class List {
  isNil() : bool { true }
  length() : int32 { 0 }
}

(* Nil is nothing more than a glorified alias to List *)
class Nil extends List { }

class Cons extends List {
  head : int32;
  tail : List;
  init(hd : int32, tl : List) : Cons {
    head <- hd;
    tail <- tl;
    self
  }

  head() : int32 { head }
  isNil() : bool { false }
  length() : int32 { 1 + tail.length() }
}

class Main extends IO {
  main() : int32 {
    let xs : List in {
      self.print("List has length ");
      self.printInt32(xs.length());
      self.print("\n");
      0
    }
  }
}

class IO {
  print(s : string) : IO {
  (* print s on stdout, then return self *)
  0
  }

  printBool(b : bool) : IO {
    (* print b on stdout, then return self *)
    0
  }

  printInt32(i : int32) : IO {
    (* print i on stdout, then return self *)
    0
  }

  inputLine() : string {
    (* read one line from stdin, return "" in case of error *)
    0
  }

  inputBool() : bool {
    (* read one boolean value from stdin, exit with error message in case of
    error *)
    0
  }

  inputInt32() : int32 {
    (* read one integer from stdin, exit with error message in case of
    error *)
    0
  }
}
