declare i1 @inputBool()
declare i32 @inputInt32()
declare i8* @inputLine()
declare void @print(i8*)
declare void @printInt32(i32)
declare void @printBool(i1)
declare i32 @strcmp(i8*, i8*)
declare float @llvm.powi.f32(float, i32)

@.str_empty = private unnamed_addr constant [1 x i8] c"\00", align 1
@.str0 = private unnamed_addr constant [6 x i8] c"Error\00", align 1
@.str1 = private unnamed_addr constant [18 x i8] c"Vector allocated\0a\00", align 1
@.str2 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str3 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str4 = private unnamed_addr constant [3 x i8] c"]\0a\00", align 1
@.str5 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str6 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str7 = private unnamed_addr constant [3 x i8] c"]\0a\00", align 1
declare noalias i8* @malloc(i32)

%struct.Sort = type {
	%struct.SortVTable*
}

%struct.SortVTable = type {
	i32 (%struct.Sort*)*,
	%struct.IO* (%struct.Sort*, i8*)*,
	i1 (%struct.Sort*)*,
	%struct.IO* (%struct.Sort*, i1)*,
	i8* (%struct.Sort*)*,
	%struct.IO* (%struct.Sort*, i32)*,
	%struct.IntVector* (%struct.Sort*, %struct.IntVector*, i32, i32)*,
	%struct.IntVector* (%struct.Sort*, %struct.IntVector*)*,
	%struct.IntVector* (%struct.Sort*, %struct.IntVector*)*
}

@SortVTable_inst = global %struct.SortVTable{
	i32 (%struct.Sort*)* bitcast (i32 (%struct.IO*)* @IO_inputInt32 to i32 (%struct.Sort*)*),
	%struct.IO* (%struct.Sort*, i8*)* bitcast (%struct.IO* (%struct.IO*, i8*)* @IO_print to %struct.IO* (%struct.Sort*, i8*)*),
	i1 (%struct.Sort*)* bitcast (i1 (%struct.IO*)* @IO_inputBool to i1 (%struct.Sort*)*),
	%struct.IO* (%struct.Sort*, i1)* bitcast (%struct.IO* (%struct.IO*, i1)* @IO_printBool to %struct.IO* (%struct.Sort*, i1)*),
	i8* (%struct.Sort*)* bitcast (i8* (%struct.IO*)* @IO_inputLine to i8* (%struct.Sort*)*),
	%struct.IO* (%struct.Sort*, i32)* bitcast (%struct.IO* (%struct.IO*, i32)* @IO_printInt32 to %struct.IO* (%struct.Sort*, i32)*),
	%struct.IntVector* (%struct.Sort*, %struct.IntVector*, i32, i32)* @Sort_swap,
	%struct.IntVector* (%struct.Sort*, %struct.IntVector*)* @Sort_selectionSort,
	%struct.IntVector* (%struct.Sort*, %struct.IntVector*)* @Sort_insertionSort
}

define void @SortInit(%struct.Sort* %self){
	%1 = bitcast %struct.Sort* %self to %struct.IO*
	call void @IOInit(%struct.IO* %1)
	%2 = getelementptr inbounds %struct.Sort* %self, i32 0, i32 0
	store %struct.SortVTable* @SortVTable_inst, %struct.SortVTable** %2
	ret void
}

define %struct.Sort* @SortNew(){
	%self = alloca %struct.Sort*
	%1 = getelementptr %struct.Sort* null, i32 1
	%size = ptrtoint %struct.Sort* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.Sort*
	store %struct.Sort* %3, %struct.Sort** %self
	%4 = load %struct.Sort** %self
	%5 = icmp ne %struct.Sort* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @SortInit(%struct.Sort* %4)
	br label %null

null:   			; preds = %5
	ret %struct.Sort* %4
}

%struct.IntVector = type {
	%struct.IntVectorVTable*,
	%struct.IntVector*,
	i32,
	i32
}

%struct.IntVectorVTable = type {
	i32 (%struct.IntVector*)*,
	%struct.IO* (%struct.IntVector*, i8*)*,
	i1 (%struct.IntVector*)*,
	%struct.IO* (%struct.IntVector*, i1)*,
	i8* (%struct.IntVector*)*,
	%struct.IO* (%struct.IntVector*, i32)*,
	i32 (%struct.IntVector*, i32, i32)*,
	i32 (%struct.IntVector*, i32)*,
	i32 (%struct.IntVector*, i32)*,
	i32 (%struct.IntVector*)*
}

@IntVectorVTable_inst = global %struct.IntVectorVTable{
	i32 (%struct.IntVector*)* bitcast (i32 (%struct.IO*)* @IO_inputInt32 to i32 (%struct.IntVector*)*),
	%struct.IO* (%struct.IntVector*, i8*)* bitcast (%struct.IO* (%struct.IO*, i8*)* @IO_print to %struct.IO* (%struct.IntVector*, i8*)*),
	i1 (%struct.IntVector*)* bitcast (i1 (%struct.IO*)* @IO_inputBool to i1 (%struct.IntVector*)*),
	%struct.IO* (%struct.IntVector*, i1)* bitcast (%struct.IO* (%struct.IO*, i1)* @IO_printBool to %struct.IO* (%struct.IntVector*, i1)*),
	i8* (%struct.IntVector*)* bitcast (i8* (%struct.IO*)* @IO_inputLine to i8* (%struct.IntVector*)*),
	%struct.IO* (%struct.IntVector*, i32)* bitcast (%struct.IO* (%struct.IO*, i32)* @IO_printInt32 to %struct.IO* (%struct.IntVector*, i32)*),
	i32 (%struct.IntVector*, i32, i32)* @IntVector_setElementAt,
	i32 (%struct.IntVector*, i32)* @IntVector_initVector,
	i32 (%struct.IntVector*, i32)* @IntVector_getElementAt,
	i32 (%struct.IntVector*)* @IntVector_getSize
}

define void @IntVectorInit(%struct.IntVector* %self){
	%1 = bitcast %struct.IntVector* %self to %struct.IO*
	call void @IOInit(%struct.IO* %1)
	%next = getelementptr inbounds %struct.IntVector* %self, i32 0, i32 1
	store %struct.IntVector* null, %struct.IntVector** %next
	%size = getelementptr inbounds %struct.IntVector* %self, i32 0, i32 2
	%2 = alloca i32
	store i32 0, i32* %2
	%3 = load i32* %2
	store i32 %3, i32* %size
	%value = getelementptr inbounds %struct.IntVector* %self, i32 0, i32 3
	store i32 0, i32* %value
	%4 = getelementptr inbounds %struct.IntVector* %self, i32 0, i32 0
	store %struct.IntVectorVTable* @IntVectorVTable_inst, %struct.IntVectorVTable** %4
	ret void
}

define %struct.IntVector* @IntVectorNew(){
	%self = alloca %struct.IntVector*
	%1 = getelementptr %struct.IntVector* null, i32 1
	%size = ptrtoint %struct.IntVector* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.IntVector*
	store %struct.IntVector* %3, %struct.IntVector** %self
	%4 = load %struct.IntVector** %self
	%5 = icmp ne %struct.IntVector* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @IntVectorInit(%struct.IntVector* %4)
	br label %null

null:   			; preds = %5
	ret %struct.IntVector* %4
}

%struct.Main = type {
	%struct.MainVTable*,
	%struct.IntVector*
}

%struct.MainVTable = type {
	i32 (%struct.Main*)*,
	%struct.IO* (%struct.Main*, i8*)*,
	i1 (%struct.Main*)*,
	%struct.IO* (%struct.Main*, i1)*,
	i8* (%struct.Main*)*,
	%struct.IO* (%struct.Main*, i32)*,
	i32 (%struct.Main*)*
}

@MainVTable_inst = global %struct.MainVTable{
	i32 (%struct.Main*)* bitcast (i32 (%struct.IO*)* @IO_inputInt32 to i32 (%struct.Main*)*),
	%struct.IO* (%struct.Main*, i8*)* bitcast (%struct.IO* (%struct.IO*, i8*)* @IO_print to %struct.IO* (%struct.Main*, i8*)*),
	i1 (%struct.Main*)* bitcast (i1 (%struct.IO*)* @IO_inputBool to i1 (%struct.Main*)*),
	%struct.IO* (%struct.Main*, i1)* bitcast (%struct.IO* (%struct.IO*, i1)* @IO_printBool to %struct.IO* (%struct.Main*, i1)*),
	i8* (%struct.Main*)* bitcast (i8* (%struct.IO*)* @IO_inputLine to i8* (%struct.Main*)*),
	%struct.IO* (%struct.Main*, i32)* bitcast (%struct.IO* (%struct.IO*, i32)* @IO_printInt32 to %struct.IO* (%struct.Main*, i32)*),
	i32 (%struct.Main*)* @Main_main
}

define void @MainInit(%struct.Main* %self){
	%1 = bitcast %struct.Main* %self to %struct.IO*
	call void @IOInit(%struct.IO* %1)
	%arr = getelementptr inbounds %struct.Main* %self, i32 0, i32 1
	%2 = alloca %struct.IntVector*
	; new
	%3 = call %struct.IntVector* @IntVectorNew()
	store %struct.IntVector* %3, %struct.IntVector** %2
	%4 = load %struct.IntVector** %2
	store %struct.IntVector* %4, %struct.IntVector** %arr
	%5 = getelementptr inbounds %struct.Main* %self, i32 0, i32 0
	store %struct.MainVTable* @MainVTable_inst, %struct.MainVTable** %5
	ret void
}

define %struct.Main* @MainNew(){
	%self = alloca %struct.Main*
	%1 = getelementptr %struct.Main* null, i32 1
	%size = ptrtoint %struct.Main* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.Main*
	store %struct.Main* %3, %struct.Main** %self
	%4 = load %struct.Main** %self
	%5 = icmp ne %struct.Main* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @MainInit(%struct.Main* %4)
	br label %null

null:   			; preds = %5
	ret %struct.Main* %4
}

%struct.IO = type {
	%struct.IOVTable*
}

%struct.IOVTable = type {
	i32 (%struct.IO*)*,
	%struct.IO* (%struct.IO*, i8*)*,
	i1 (%struct.IO*)*,
	%struct.IO* (%struct.IO*, i1)*,
	i8* (%struct.IO*)*,
	%struct.IO* (%struct.IO*, i32)*
}

@IOVTable_inst = global %struct.IOVTable{
	i32 (%struct.IO*)* @IO_inputInt32,
	%struct.IO* (%struct.IO*, i8*)* @IO_print,
	i1 (%struct.IO*)* @IO_inputBool,
	%struct.IO* (%struct.IO*, i1)* @IO_printBool,
	i8* (%struct.IO*)* @IO_inputLine,
	%struct.IO* (%struct.IO*, i32)* @IO_printInt32
}

define void @IOInit(%struct.IO* %self){
	%1 = bitcast %struct.IO* %self to %struct.Object*
	call void @ObjectInit(%struct.Object* %1)
	%2 = getelementptr inbounds %struct.IO* %self, i32 0, i32 0
	store %struct.IOVTable* @IOVTable_inst, %struct.IOVTable** %2
	ret void
}

define %struct.IO* @IONew(){
	%self = alloca %struct.IO*
	%1 = getelementptr %struct.IO* null, i32 1
	%size = ptrtoint %struct.IO* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.IO*
	store %struct.IO* %3, %struct.IO** %self
	%4 = load %struct.IO** %self
	%5 = icmp ne %struct.IO* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @IOInit(%struct.IO* %4)
	br label %null

null:   			; preds = %5
	ret %struct.IO* %4
}

%struct.Object = type {
	%struct.ObjectVTable*
}

%struct.ObjectVTable = type {
}

@ObjectVTable_inst = global %struct.ObjectVTable{
}

define void @ObjectInit(%struct.Object* %self){
	%1 = getelementptr inbounds %struct.Object* %self, i32 0, i32 0
	store %struct.ObjectVTable* @ObjectVTable_inst, %struct.ObjectVTable** %1
	ret void
}

define %struct.Object* @ObjectNew(){
	%self = alloca %struct.Object*
	%1 = getelementptr %struct.Object* null, i32 1
	%size = ptrtoint %struct.Object* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.Object*
	store %struct.Object* %3, %struct.Object** %self
	%4 = load %struct.Object** %self
	%5 = icmp ne %struct.Object* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @ObjectInit(%struct.Object* %4)
	br label %null

null:   			; preds = %5
	ret %struct.Object* %4
}

define %struct.IntVector* @Sort_insertionSort(%struct.Sort* %self, %struct.IntVector* %vector) #0 {
	%1 = alloca %struct.Sort*
	store %struct.Sort* %self, %struct.Sort** %1
	%2 = alloca %struct.IntVector*
	store %struct.IntVector* %vector, %struct.IntVector** %2
	%3 = alloca %struct.IntVector*
	%4 = alloca i1
	; condition
	%5 = alloca i1
	; unary
	%6 = alloca i1
	; unary
	%7 = alloca %struct.IntVector*
	%8 = load %struct.IntVector** %2
	store %struct.IntVector* %8, %struct.IntVector** %7
	%9 = load %struct.IntVector** %7
	%10 = icmp eq%struct.IntVector* %9, null
	store i1 %10, i1* %6
	%11 = load i1* %6
	%12 = add i1 %11, 1
	store i1 %12, i1* %5
	%13 = load i1* %5
	br i1 %13, label %then_13, label %end_13
	
then_13:
		%14 = alloca i1
		%15 = alloca i1
		; let
		%16 = alloca i32
		%17 = alloca i32
		store i32 1, i32* %17
		%18 = load i32* %17
		store i32 %18, i32* %16
		%19 = alloca i1
		%20 = alloca i1
		%21 = alloca i32
		; while
		br label %loop_2

loop_2:
		%22 = alloca i1
		; binary operation
		%23 = alloca i32
		%24 = load i32* %16
		store i32 %24, i32* %23
		%25 = alloca i32
		%26 = alloca %struct.IntVector*
		%27 = load %struct.IntVector** %2
		store %struct.IntVector* %27, %struct.IntVector** %26
; call
		%28 = load %struct.IntVector** %26
		%29 = getelementptr inbounds %struct.IntVector* %28, i32 0, i32 0
		%30 = load %struct.IntVectorVTable** %29
		%31 = getelementptr inbounds %struct.IntVectorVTable* %30, i32 0, i32 9
		%32 = load i32 (%struct.IntVector*)** %31
		%33 = call i32 %32(%struct.IntVector* %28)
		store i32 %33, i32* %25
		%34 = load i32* %23
		%35 = load i32* %25
		%36 = icmp slt i32 %34, %35
		store i1 %36, i1* %22
		%37 = load i1* %22
		br i1 %37, label %do_2, label %end_2

do_2:
		%38 = alloca i1
		; let
		%39 = alloca i32
		%40 = alloca i32
		%41 = load i32* %16
		store i32 %41, i32* %40
		%42 = load i32* %40
		store i32 %42, i32* %39
		%43 = alloca i1
		%44 = alloca i1
		%45 = alloca i32
		; while
		br label %loop_4

loop_4:
		%46 = alloca i1
		; binary operation
; blabla		; condition
		%47 = alloca i1
		; binary operation
		%48 = alloca i32
		store i32 0, i32* %48
		%49 = alloca i32
		%50 = load i32* %39
		store i32 %50, i32* %49
		%51 = load i32* %48
		%52 = load i32* %49
		%53 = icmp slt i32 %51, %52
		store i1 %53, i1* %47
		%54 = load i1* %47
		br i1 %54, label %then_54, label %else_54
		
then_54:
			%55 = alloca i1
			; binary operation
			%56 = alloca i32
			%57 = alloca i32
			%58 = load i32* %39
			store i32 %58, i32* %57
			%59 = alloca %struct.IntVector*
			%60 = load %struct.IntVector** %2
			store %struct.IntVector* %60, %struct.IntVector** %59
; call
			%61 = load %struct.IntVector** %59
			%62 = getelementptr inbounds %struct.IntVector* %61, i32 0, i32 0
			%63 = load %struct.IntVectorVTable** %62
			%64 = getelementptr inbounds %struct.IntVectorVTable* %63, i32 0, i32 8
			%65 = load i32 (%struct.IntVector*, i32)** %64
			%66 = load i32* %57
			%67 = call i32 %65(%struct.IntVector* %61, i32 %66)
			store i32 %67, i32* %56
			%68 = alloca i32
			%69 = alloca i32
			; binary operation
			%70 = alloca i32
			%71 = load i32* %39
			store i32 %71, i32* %70
			%72 = alloca i32
			store i32 1, i32* %72
			%73 = load i32* %70
			%74 = load i32* %72
			%75 = sub i32 %73, %74
			store i32 %75, i32* %69
			%76 = alloca %struct.IntVector*
			%77 = load %struct.IntVector** %2
			store %struct.IntVector* %77, %struct.IntVector** %76
; call
			%78 = load %struct.IntVector** %76
			%79 = getelementptr inbounds %struct.IntVector* %78, i32 0, i32 0
			%80 = load %struct.IntVectorVTable** %79
			%81 = getelementptr inbounds %struct.IntVectorVTable* %80, i32 0, i32 8
			%82 = load i32 (%struct.IntVector*, i32)** %81
			%83 = load i32* %69
			%84 = call i32 %82(%struct.IntVector* %78, i32 %83)
			store i32 %84, i32* %68
			%85 = load i32* %56
			%86 = load i32* %68
			%87 = icmp slt i32 %85, %86
			store i1 %87, i1* %55
			%88 = load i1* %55
			store i1 %88, i1* %46
			br label %end_54
		
else_54:
			%89 = alloca i1
			store i1 false, i1* %89
			%90 = load i1* %89
			store i1 %90, i1* %46
			br label %end_54
		
end_54:
		%91 = load i1* %46
		br i1 %91, label %do_4, label %end_4

do_4:
		%92 = alloca %struct.IntVector*
		; assignement
		%93 = alloca %struct.IntVector*
		%94 = alloca %struct.IntVector*
		%95 = load %struct.IntVector** %2
		store %struct.IntVector* %95, %struct.IntVector** %94
		%96 = alloca i32
		; binary operation
		%97 = alloca i32
		%98 = load i32* %39
		store i32 %98, i32* %97
		%99 = alloca i32
		store i32 1, i32* %99
		%100 = load i32* %97
		%101 = load i32* %99
		%102 = sub i32 %100, %101
		store i32 %102, i32* %96
		%103 = alloca i32
		%104 = load i32* %39
		store i32 %104, i32* %103
; call
		%105 = load %struct.Sort** %1
		%106 = getelementptr inbounds %struct.Sort* %105, i32 0, i32 0
		%107 = load %struct.SortVTable** %106
		%108 = getelementptr inbounds %struct.SortVTable* %107, i32 0, i32 6
		%109 = load %struct.IntVector* (%struct.Sort*, %struct.IntVector*, i32, i32)** %108
		%110 = load %struct.IntVector** %94
		%111 = load i32* %96
		%112 = load i32* %103
		%113 = call %struct.IntVector* %109(%struct.Sort* %105, %struct.IntVector* %110, i32 %111, i32 %112)
		store %struct.IntVector* %113, %struct.IntVector** %93
		%114 = load %struct.IntVector** %93
		store %struct.IntVector* %114, %struct.IntVector** %2
		store %struct.IntVector* %114, %struct.IntVector** %92
		%115 = alloca i32
		; assignement
		%116 = alloca i32
		; binary operation
		%117 = alloca i32
		%118 = load i32* %39
		store i32 %118, i32* %117
		%119 = alloca i32
		store i32 1, i32* %119
		%120 = load i32* %117
		%121 = load i32* %119
		%122 = sub i32 %120, %121
		store i32 %122, i32* %116
		%123 = load i32* %116
		store i32 %123, i32* %39
		store i32 %123, i32* %115
		%124 = load i32* %115
		store i32 %124, i32* %45
		br label %loop_4

end_4:
		%125 = load i1* %44
		store i1 %125, i1* %43
		%126 = load i1* %43
		store i1 %126, i1* %38
		%127 = alloca i32
		; assignement
		%128 = alloca i32
		; binary operation
		%129 = alloca i32
		%130 = load i32* %16
		store i32 %130, i32* %129
		%131 = alloca i32
		store i32 1, i32* %131
		%132 = load i32* %129
		%133 = load i32* %131
		%134 = add nuw i32 %132, %133
		store i32 %134, i32* %128
		%135 = load i32* %128
		store i32 %135, i32* %16
		store i32 %135, i32* %127
		%136 = load i32* %127
		store i32 %136, i32* %21
		br label %loop_2

end_2:
		%137 = load i1* %20
		store i1 %137, i1* %19
		%138 = load i1* %19
		store i1 %138, i1* %15
		%139 = load i1* %15
		store i1 %139, i1* %14
		store i1 0, i1* %4
		br label %end_13
	
end_13:
	%140 = alloca %struct.IntVector*
	%141 = load %struct.IntVector** %2
	store %struct.IntVector* %141, %struct.IntVector** %140
	%142 = load %struct.IntVector** %140
	store %struct.IntVector* %142, %struct.IntVector** %3
	%143 = load %struct.IntVector** %3
	ret %struct.IntVector* %143
}

define %struct.IntVector* @Sort_selectionSort(%struct.Sort* %self, %struct.IntVector* %vector) #0 {
	%1 = alloca %struct.Sort*
	store %struct.Sort* %self, %struct.Sort** %1
	%2 = alloca %struct.IntVector*
	store %struct.IntVector* %vector, %struct.IntVector** %2
	%3 = alloca %struct.IntVector*
	%4 = alloca i1
	; condition
	%5 = alloca i1
	; unary
	%6 = alloca i1
	; unary
	%7 = alloca %struct.IntVector*
	%8 = load %struct.IntVector** %2
	store %struct.IntVector* %8, %struct.IntVector** %7
	%9 = load %struct.IntVector** %7
	%10 = icmp eq%struct.IntVector* %9, null
	store i1 %10, i1* %6
	%11 = load i1* %6
	%12 = add i1 %11, 1
	store i1 %12, i1* %5
	%13 = load i1* %5
	br i1 %13, label %then_13, label %end_13
	
then_13:
		%14 = alloca i1
		%15 = alloca i1
		; let
		%16 = alloca i32
		%17 = alloca i32
		store i32 0, i32* %17
		%18 = load i32* %17
		store i32 %18, i32* %16
		%19 = alloca i1
		%20 = alloca i1
		%21 = alloca i32
		; while
		br label %loop_2

loop_2:
		%22 = alloca i1
		; binary operation
		%23 = alloca i32
		%24 = load i32* %16
		store i32 %24, i32* %23
		%25 = alloca i32
		; binary operation
		%26 = alloca i32
		%27 = alloca %struct.IntVector*
		%28 = load %struct.IntVector** %2
		store %struct.IntVector* %28, %struct.IntVector** %27
; call
		%29 = load %struct.IntVector** %27
		%30 = getelementptr inbounds %struct.IntVector* %29, i32 0, i32 0
		%31 = load %struct.IntVectorVTable** %30
		%32 = getelementptr inbounds %struct.IntVectorVTable* %31, i32 0, i32 9
		%33 = load i32 (%struct.IntVector*)** %32
		%34 = call i32 %33(%struct.IntVector* %29)
		store i32 %34, i32* %26
		%35 = alloca i32
		store i32 1, i32* %35
		%36 = load i32* %26
		%37 = load i32* %35
		%38 = sub i32 %36, %37
		store i32 %38, i32* %25
		%39 = load i32* %23
		%40 = load i32* %25
		%41 = icmp slt i32 %39, %40
		store i1 %41, i1* %22
		%42 = load i1* %22
		br i1 %42, label %do_2, label %end_2

do_2:
		%43 = alloca i1
		; let
		%44 = alloca i32
		%45 = alloca i32
		%46 = load i32* %16
		store i32 %46, i32* %45
		%47 = load i32* %45
		store i32 %47, i32* %44
		%48 = alloca i1
		%49 = alloca i1
		; let
		%50 = alloca i32
		%51 = alloca i32
		; binary operation
		%52 = alloca i32
		%53 = load i32* %16
		store i32 %53, i32* %52
		%54 = alloca i32
		store i32 1, i32* %54
		%55 = load i32* %52
		%56 = load i32* %54
		%57 = add nuw i32 %55, %56
		store i32 %57, i32* %51
		%58 = load i32* %51
		store i32 %58, i32* %50
		%59 = alloca i1
		%60 = alloca i1
		%61 = alloca i32
		; while
		br label %loop_6

loop_6:
		%62 = alloca i1
		; binary operation
		%63 = alloca i32
		%64 = load i32* %50
		store i32 %64, i32* %63
		%65 = alloca i32
		%66 = alloca %struct.IntVector*
		%67 = load %struct.IntVector** %2
		store %struct.IntVector* %67, %struct.IntVector** %66
; call
		%68 = load %struct.IntVector** %66
		%69 = getelementptr inbounds %struct.IntVector* %68, i32 0, i32 0
		%70 = load %struct.IntVectorVTable** %69
		%71 = getelementptr inbounds %struct.IntVectorVTable* %70, i32 0, i32 9
		%72 = load i32 (%struct.IntVector*)** %71
		%73 = call i32 %72(%struct.IntVector* %68)
		store i32 %73, i32* %65
		%74 = load i32* %63
		%75 = load i32* %65
		%76 = icmp slt i32 %74, %75
		store i1 %76, i1* %62
		%77 = load i1* %62
		br i1 %77, label %do_6, label %end_6

do_6:
		%78 = alloca i1
		; condition
		%79 = alloca i1
		; binary operation
		%80 = alloca i32
		%81 = alloca i32
		%82 = load i32* %50
		store i32 %82, i32* %81
		%83 = alloca %struct.IntVector*
		%84 = load %struct.IntVector** %2
		store %struct.IntVector* %84, %struct.IntVector** %83
; call
		%85 = load %struct.IntVector** %83
		%86 = getelementptr inbounds %struct.IntVector* %85, i32 0, i32 0
		%87 = load %struct.IntVectorVTable** %86
		%88 = getelementptr inbounds %struct.IntVectorVTable* %87, i32 0, i32 8
		%89 = load i32 (%struct.IntVector*, i32)** %88
		%90 = load i32* %81
		%91 = call i32 %89(%struct.IntVector* %85, i32 %90)
		store i32 %91, i32* %80
		%92 = alloca i32
		%93 = alloca i32
		%94 = load i32* %44
		store i32 %94, i32* %93
		%95 = alloca %struct.IntVector*
		%96 = load %struct.IntVector** %2
		store %struct.IntVector* %96, %struct.IntVector** %95
; call
		%97 = load %struct.IntVector** %95
		%98 = getelementptr inbounds %struct.IntVector* %97, i32 0, i32 0
		%99 = load %struct.IntVectorVTable** %98
		%100 = getelementptr inbounds %struct.IntVectorVTable* %99, i32 0, i32 8
		%101 = load i32 (%struct.IntVector*, i32)** %100
		%102 = load i32* %93
		%103 = call i32 %101(%struct.IntVector* %97, i32 %102)
		store i32 %103, i32* %92
		%104 = load i32* %80
		%105 = load i32* %92
		%106 = icmp slt i32 %104, %105
		store i1 %106, i1* %79
		%107 = load i1* %79
		br i1 %107, label %then_107, label %end_107
		
then_107:
			%108 = alloca i32
			; assignement
			%109 = alloca i32
			%110 = load i32* %50
			store i32 %110, i32* %109
			%111 = load i32* %109
			store i32 %111, i32* %44
			store i32 %111, i32* %108
			store i1 0, i1* %78
			br label %end_107
		
end_107:
		%112 = alloca i32
		; assignement
		%113 = alloca i32
		; binary operation
		%114 = alloca i32
		%115 = load i32* %50
		store i32 %115, i32* %114
		%116 = alloca i32
		store i32 1, i32* %116
		%117 = load i32* %114
		%118 = load i32* %116
		%119 = add nuw i32 %117, %118
		store i32 %119, i32* %113
		%120 = load i32* %113
		store i32 %120, i32* %50
		store i32 %120, i32* %112
		%121 = load i32* %112
		store i32 %121, i32* %61
		br label %loop_6

end_6:
		%122 = alloca i1
		; condition
		%123 = alloca i1
		; unary
		%124 = alloca i1
		; binary operation
		%125 = alloca i32
		%126 = load i32* %44
		store i32 %126, i32* %125
		%127 = alloca i32
		%128 = load i32* %16
		store i32 %128, i32* %127
		%129 = load i32* %125
		%130 = load i32* %127
		%131 = icmp eq i32 %129, %130
		store i1 %131, i1* %124
		%132 = load i1* %124
		%133 = add i1 %132, 1
		store i1 %133, i1* %123
		%134 = load i1* %123
		br i1 %134, label %then_134, label %end_134
		
then_134:
			%135 = alloca %struct.IntVector*
			; assignement
			%136 = alloca %struct.IntVector*
			%137 = alloca %struct.IntVector*
			%138 = load %struct.IntVector** %2
			store %struct.IntVector* %138, %struct.IntVector** %137
			%139 = alloca i32
			%140 = load i32* %16
			store i32 %140, i32* %139
			%141 = alloca i32
			%142 = load i32* %44
			store i32 %142, i32* %141
; call
			%143 = load %struct.Sort** %1
			%144 = getelementptr inbounds %struct.Sort* %143, i32 0, i32 0
			%145 = load %struct.SortVTable** %144
			%146 = getelementptr inbounds %struct.SortVTable* %145, i32 0, i32 6
			%147 = load %struct.IntVector* (%struct.Sort*, %struct.IntVector*, i32, i32)** %146
			%148 = load %struct.IntVector** %137
			%149 = load i32* %139
			%150 = load i32* %141
			%151 = call %struct.IntVector* %147(%struct.Sort* %143, %struct.IntVector* %148, i32 %149, i32 %150)
			store %struct.IntVector* %151, %struct.IntVector** %136
			%152 = load %struct.IntVector** %136
			store %struct.IntVector* %152, %struct.IntVector** %2
			store %struct.IntVector* %152, %struct.IntVector** %135
			store i1 0, i1* %122
			br label %end_134
		
end_134:
		%153 = load i1* %122
		store i1 %153, i1* %59
		%154 = load i1* %59
		store i1 %154, i1* %49
		%155 = load i1* %49
		store i1 %155, i1* %48
		%156 = load i1* %48
		store i1 %156, i1* %43
		%157 = alloca i32
		; assignement
		%158 = alloca i32
		; binary operation
		%159 = alloca i32
		%160 = load i32* %16
		store i32 %160, i32* %159
		%161 = alloca i32
		store i32 1, i32* %161
		%162 = load i32* %159
		%163 = load i32* %161
		%164 = add nuw i32 %162, %163
		store i32 %164, i32* %158
		%165 = load i32* %158
		store i32 %165, i32* %16
		store i32 %165, i32* %157
		%166 = load i32* %157
		store i32 %166, i32* %21
		br label %loop_2

end_2:
		%167 = load i1* %20
		store i1 %167, i1* %19
		%168 = load i1* %19
		store i1 %168, i1* %15
		%169 = load i1* %15
		store i1 %169, i1* %14
		store i1 0, i1* %4
		br label %end_13
	
end_13:
	%170 = alloca %struct.IntVector*
	%171 = load %struct.IntVector** %2
	store %struct.IntVector* %171, %struct.IntVector** %170
	%172 = load %struct.IntVector** %170
	store %struct.IntVector* %172, %struct.IntVector** %3
	%173 = load %struct.IntVector** %3
	ret %struct.IntVector* %173
}

define %struct.IntVector* @Sort_swap(%struct.Sort* %self, %struct.IntVector* %vector, i32 %i, i32 %j) #0 {
	%1 = alloca %struct.Sort*
	store %struct.Sort* %self, %struct.Sort** %1
	%2 = alloca %struct.IntVector*
	store %struct.IntVector* %vector, %struct.IntVector** %2
	%3 = alloca i32
	store i32 %i, i32* %3
	%4 = alloca i32
	store i32 %j, i32* %4
	%5 = alloca %struct.IntVector*
	%6 = alloca i1
	; condition
	%7 = alloca i1
	; unary
	%8 = alloca i1
	; unary
	%9 = alloca %struct.IntVector*
	%10 = load %struct.IntVector** %2
	store %struct.IntVector* %10, %struct.IntVector** %9
	%11 = load %struct.IntVector** %9
	%12 = icmp eq%struct.IntVector* %11, null
	store i1 %12, i1* %8
	%13 = load i1* %8
	%14 = add i1 %13, 1
	store i1 %14, i1* %7
	%15 = load i1* %7
	br i1 %15, label %then_15, label %end_15
	
then_15:
		%16 = alloca i32
		%17 = alloca i32
		; let
		%18 = alloca i32
		%19 = alloca i32
		%20 = alloca i32
		%21 = load i32* %3
		store i32 %21, i32* %20
		%22 = alloca %struct.IntVector*
		%23 = load %struct.IntVector** %2
		store %struct.IntVector* %23, %struct.IntVector** %22
; call
		%24 = load %struct.IntVector** %22
		%25 = getelementptr inbounds %struct.IntVector* %24, i32 0, i32 0
		%26 = load %struct.IntVectorVTable** %25
		%27 = getelementptr inbounds %struct.IntVectorVTable* %26, i32 0, i32 8
		%28 = load i32 (%struct.IntVector*, i32)** %27
		%29 = load i32* %20
		%30 = call i32 %28(%struct.IntVector* %24, i32 %29)
		store i32 %30, i32* %19
		%31 = load i32* %19
		store i32 %31, i32* %18
		%32 = alloca i32
		%33 = alloca i32
		%34 = alloca i32
		%35 = load i32* %3
		store i32 %35, i32* %34
		%36 = alloca i32
		%37 = alloca i32
		%38 = load i32* %4
		store i32 %38, i32* %37
		%39 = alloca %struct.IntVector*
		%40 = load %struct.IntVector** %2
		store %struct.IntVector* %40, %struct.IntVector** %39
; call
		%41 = load %struct.IntVector** %39
		%42 = getelementptr inbounds %struct.IntVector* %41, i32 0, i32 0
		%43 = load %struct.IntVectorVTable** %42
		%44 = getelementptr inbounds %struct.IntVectorVTable* %43, i32 0, i32 8
		%45 = load i32 (%struct.IntVector*, i32)** %44
		%46 = load i32* %37
		%47 = call i32 %45(%struct.IntVector* %41, i32 %46)
		store i32 %47, i32* %36
		%48 = alloca %struct.IntVector*
		%49 = load %struct.IntVector** %2
		store %struct.IntVector* %49, %struct.IntVector** %48
; call
		%50 = load %struct.IntVector** %48
		%51 = getelementptr inbounds %struct.IntVector* %50, i32 0, i32 0
		%52 = load %struct.IntVectorVTable** %51
		%53 = getelementptr inbounds %struct.IntVectorVTable* %52, i32 0, i32 6
		%54 = load i32 (%struct.IntVector*, i32, i32)** %53
		%55 = load i32* %34
		%56 = load i32* %36
		%57 = call i32 %54(%struct.IntVector* %50, i32 %55, i32 %56)
		store i32 %57, i32* %33
		%58 = alloca i32
		%59 = alloca i32
		%60 = load i32* %4
		store i32 %60, i32* %59
		%61 = alloca i32
		%62 = load i32* %18
		store i32 %62, i32* %61
		%63 = alloca %struct.IntVector*
		%64 = load %struct.IntVector** %2
		store %struct.IntVector* %64, %struct.IntVector** %63
; call
		%65 = load %struct.IntVector** %63
		%66 = getelementptr inbounds %struct.IntVector* %65, i32 0, i32 0
		%67 = load %struct.IntVectorVTable** %66
		%68 = getelementptr inbounds %struct.IntVectorVTable* %67, i32 0, i32 6
		%69 = load i32 (%struct.IntVector*, i32, i32)** %68
		%70 = load i32* %59
		%71 = load i32* %61
		%72 = call i32 %69(%struct.IntVector* %65, i32 %70, i32 %71)
		store i32 %72, i32* %58
		%73 = load i32* %58
		store i32 %73, i32* %32
		%74 = load i32* %32
		store i32 %74, i32* %17
		%75 = load i32* %17
		store i32 %75, i32* %16
		store i1 0, i1* %6
		br label %end_15
	
end_15:
	%76 = alloca %struct.IntVector*
	%77 = load %struct.IntVector** %2
	store %struct.IntVector* %77, %struct.IntVector** %76
	%78 = load %struct.IntVector** %76
	store %struct.IntVector* %78, %struct.IntVector** %5
	%79 = load %struct.IntVector** %5
	ret %struct.IntVector* %79
}

define i32 @IntVector_getSize(%struct.IntVector* %self) #0 {
	%1 = alloca %struct.IntVector*
	store %struct.IntVector* %self, %struct.IntVector** %1
	%2 = alloca i32
	%3 = alloca i32
	%4 = load %struct.IntVector** %1
	%5 = getelementptr inbounds %struct.IntVector* %4, i32 0, i32 2
	%6 = load i32* %5
	store i32 %6, i32* %3
	%7 = load i32* %3
	store i32 %7, i32* %2
	%8 = load i32* %2
	ret i32 %8
}

define i32 @IntVector_getElementAt(%struct.IntVector* %self, i32 %i) #0 {
	%1 = alloca %struct.IntVector*
	store %struct.IntVector* %self, %struct.IntVector** %1
	%2 = alloca i32
	store i32 %i, i32* %2
	%3 = alloca i32
	%4 = alloca i32
	; condition
	%5 = alloca i1
	; binary operation
	%6 = alloca i32
	%7 = load %struct.IntVector** %1
	%8 = getelementptr inbounds %struct.IntVector* %7, i32 0, i32 2
	%9 = load i32* %8
	store i32 %9, i32* %6
	%10 = alloca i32
	%11 = load i32* %2
	store i32 %11, i32* %10
	%12 = load i32* %6
	%13 = load i32* %10
	%14 = icmp sle i32 %12, %13
	store i1 %14, i1* %5
	%15 = load i1* %5
	br i1 %15, label %then_15, label %else_15
	
then_15:
		%16 = alloca i32
		; unary
		%17 = alloca i32
		store i32 1, i32* %17
		%18 = load i32* %17
		%19 = sub i32 0, %18
		store i32 %19, i32* %16
		%20 = load i32* %16
		store i32 %20, i32* %4
		br label %end_15
	
else_15:
		%21 = alloca i32
		; condition
		%22 = alloca i1
		; binary operation
		%23 = alloca i32
		%24 = load i32* %2
		store i32 %24, i32* %23
		%25 = alloca i32
		store i32 0, i32* %25
		%26 = load i32* %23
		%27 = load i32* %25
		%28 = icmp eq i32 %26, %27
		store i1 %28, i1* %22
		%29 = load i1* %22
		br i1 %29, label %then_29, label %else_29
		
then_29:
			%30 = alloca i32
			%31 = load %struct.IntVector** %1
			%32 = getelementptr inbounds %struct.IntVector* %31, i32 0, i32 3
			%33 = load i32* %32
			store i32 %33, i32* %30
			%34 = load i32* %30
			store i32 %34, i32* %21
			br label %end_29
		
else_29:
			%35 = alloca i32
			%36 = alloca i32
			; binary operation
			%37 = alloca i32
			%38 = load i32* %2
			store i32 %38, i32* %37
			%39 = alloca i32
			store i32 1, i32* %39
			%40 = load i32* %37
			%41 = load i32* %39
			%42 = sub i32 %40, %41
			store i32 %42, i32* %36
			%43 = alloca %struct.IntVector*
			%44 = load %struct.IntVector** %1
			%45 = getelementptr inbounds %struct.IntVector* %44, i32 0, i32 1
			%46 = load %struct.IntVector** %45
			store %struct.IntVector* %46, %struct.IntVector** %43
; call
			%47 = load %struct.IntVector** %43
			%48 = getelementptr inbounds %struct.IntVector* %47, i32 0, i32 0
			%49 = load %struct.IntVectorVTable** %48
			%50 = getelementptr inbounds %struct.IntVectorVTable* %49, i32 0, i32 8
			%51 = load i32 (%struct.IntVector*, i32)** %50
			%52 = load i32* %36
			%53 = call i32 %51(%struct.IntVector* %47, i32 %52)
			store i32 %53, i32* %35
			%54 = load i32* %35
			store i32 %54, i32* %21
			br label %end_29
		
end_29:
		%55 = load i32* %21
		store i32 %55, i32* %4
		br label %end_15
	
end_15:
	%56 = load i32* %4
	store i32 %56, i32* %3
	%57 = load i32* %3
	ret i32 %57
}

define i32 @IntVector_setElementAt(%struct.IntVector* %self, i32 %i, i32 %v) #0 {
	%1 = alloca %struct.IntVector*
	store %struct.IntVector* %self, %struct.IntVector** %1
	%2 = alloca i32
	store i32 %i, i32* %2
	%3 = alloca i32
	store i32 %v, i32* %3
	%4 = alloca i32
	%5 = alloca i32
	; condition
	%6 = alloca i1
	; binary operation
	%7 = alloca i32
	%8 = load %struct.IntVector** %1
	%9 = getelementptr inbounds %struct.IntVector* %8, i32 0, i32 2
	%10 = load i32* %9
	store i32 %10, i32* %7
	%11 = alloca i32
	%12 = load i32* %2
	store i32 %12, i32* %11
	%13 = load i32* %7
	%14 = load i32* %11
	%15 = icmp sle i32 %13, %14
	store i1 %15, i1* %6
	%16 = load i1* %6
	br i1 %16, label %then_16, label %else_16
	
then_16:
		%17 = alloca i32
		; unary
		%18 = alloca i32
		store i32 1, i32* %18
		%19 = load i32* %18
		%20 = sub i32 0, %19
		store i32 %20, i32* %17
		%21 = load i32* %17
		store i32 %21, i32* %5
		br label %end_16
	
else_16:
		%22 = alloca i32
		; condition
		%23 = alloca i1
		; binary operation
		%24 = alloca i32
		%25 = load i32* %2
		store i32 %25, i32* %24
		%26 = alloca i32
		store i32 0, i32* %26
		%27 = load i32* %24
		%28 = load i32* %26
		%29 = icmp eq i32 %27, %28
		store i1 %29, i1* %23
		%30 = load i1* %23
		br i1 %30, label %then_30, label %else_30
		
then_30:
			%31 = alloca i32
			; assignement
			%32 = alloca i32
			%33 = load i32* %3
			store i32 %33, i32* %32
			%34 = load i32* %32
;field
			%35 = load %struct.IntVector** %1
			%36 = getelementptr inbounds %struct.IntVector* %35, i32 0, i32 3
			store i32 %34, i32* %36
			store i32 %34, i32* %31
			%37 = load i32* %31
			store i32 %37, i32* %22
			br label %end_30
		
else_30:
			%38 = alloca i32
			%39 = alloca i32
			; binary operation
			%40 = alloca i32
			%41 = load i32* %2
			store i32 %41, i32* %40
			%42 = alloca i32
			store i32 1, i32* %42
			%43 = load i32* %40
			%44 = load i32* %42
			%45 = sub i32 %43, %44
			store i32 %45, i32* %39
			%46 = alloca i32
			%47 = load i32* %3
			store i32 %47, i32* %46
			%48 = alloca %struct.IntVector*
			%49 = load %struct.IntVector** %1
			%50 = getelementptr inbounds %struct.IntVector* %49, i32 0, i32 1
			%51 = load %struct.IntVector** %50
			store %struct.IntVector* %51, %struct.IntVector** %48
; call
			%52 = load %struct.IntVector** %48
			%53 = getelementptr inbounds %struct.IntVector* %52, i32 0, i32 0
			%54 = load %struct.IntVectorVTable** %53
			%55 = getelementptr inbounds %struct.IntVectorVTable* %54, i32 0, i32 6
			%56 = load i32 (%struct.IntVector*, i32, i32)** %55
			%57 = load i32* %39
			%58 = load i32* %46
			%59 = call i32 %56(%struct.IntVector* %52, i32 %57, i32 %58)
			store i32 %59, i32* %38
			%60 = load i32* %38
			store i32 %60, i32* %22
			br label %end_30
		
end_30:
		%61 = load i32* %22
		store i32 %61, i32* %5
		br label %end_16
	
end_16:
	%62 = load i32* %5
	store i32 %62, i32* %4
	%63 = load i32* %4
	ret i32 %63
}

define i32 @IntVector_initVector(%struct.IntVector* %self, i32 %s) #0 {
	%1 = alloca %struct.IntVector*
	store %struct.IntVector* %self, %struct.IntVector** %1
	%2 = alloca i32
	store i32 %s, i32* %2
	%3 = alloca i32
	%4 = alloca i32
	; condition
	%5 = alloca i1
	; binary operation
	%6 = alloca i32
	%7 = load i32* %2
	store i32 %7, i32* %6
	%8 = alloca i32
	store i32 0, i32* %8
	%9 = load i32* %6
	%10 = load i32* %8
	%11 = icmp slt i32 %9, %10
	store i1 %11, i1* %5
	%12 = load i1* %5
	br i1 %12, label %then_12, label %else_12
	
then_12:
		%13 = alloca i32
		; unary
		%14 = alloca i32
		store i32 1, i32* %14
		%15 = load i32* %14
		%16 = sub i32 0, %15
		store i32 %16, i32* %13
		%17 = load i32* %13
		store i32 %17, i32* %4
		br label %end_12
	
else_12:
		%18 = alloca i32
		%19 = alloca i32
		; assignement
		%20 = alloca i32
		%21 = load i32* %2
		store i32 %21, i32* %20
		%22 = load i32* %20
;field
		%23 = load %struct.IntVector** %1
		%24 = getelementptr inbounds %struct.IntVector* %23, i32 0, i32 2
		store i32 %22, i32* %24
		store i32 %22, i32* %19
		%25 = alloca i32
		; assignement
		%26 = alloca i32
		store i32 0, i32* %26
		%27 = load i32* %26
;field
		%28 = load %struct.IntVector** %1
		%29 = getelementptr inbounds %struct.IntVector* %28, i32 0, i32 3
		store i32 %27, i32* %29
		store i32 %27, i32* %25
		%30 = alloca i1
		; condition
		%31 = alloca i1
		; binary operation
		%32 = alloca i32
		store i32 1, i32* %32
		%33 = alloca i32
		%34 = load i32* %2
		store i32 %34, i32* %33
		%35 = load i32* %32
		%36 = load i32* %33
		%37 = icmp slt i32 %35, %36
		store i1 %37, i1* %31
		%38 = load i1* %31
		br i1 %38, label %then_38, label %end_38
		
then_38:
			%39 = alloca i32
			%40 = alloca %struct.IntVector*
			; assignement
			%41 = alloca %struct.IntVector*
			; new
			%42 = call %struct.IntVector* @IntVectorNew()
			store %struct.IntVector* %42, %struct.IntVector** %41
			%43 = load %struct.IntVector** %41
;field
			%44 = load %struct.IntVector** %1
			%45 = getelementptr inbounds %struct.IntVector* %44, i32 0, i32 1
			store %struct.IntVector* %43, %struct.IntVector** %45
			store %struct.IntVector* %43, %struct.IntVector** %40
			%46 = alloca i32
			%47 = alloca i32
			; binary operation
			%48 = alloca i32
			%49 = load %struct.IntVector** %1
			%50 = getelementptr inbounds %struct.IntVector* %49, i32 0, i32 2
			%51 = load i32* %50
			store i32 %51, i32* %48
			%52 = alloca i32
			store i32 1, i32* %52
			%53 = load i32* %48
			%54 = load i32* %52
			%55 = sub i32 %53, %54
			store i32 %55, i32* %47
			%56 = alloca %struct.IntVector*
			%57 = load %struct.IntVector** %1
			%58 = getelementptr inbounds %struct.IntVector* %57, i32 0, i32 1
			%59 = load %struct.IntVector** %58
			store %struct.IntVector* %59, %struct.IntVector** %56
; call
			%60 = load %struct.IntVector** %56
			%61 = getelementptr inbounds %struct.IntVector* %60, i32 0, i32 0
			%62 = load %struct.IntVectorVTable** %61
			%63 = getelementptr inbounds %struct.IntVectorVTable* %62, i32 0, i32 7
			%64 = load i32 (%struct.IntVector*, i32)** %63
			%65 = load i32* %47
			%66 = call i32 %64(%struct.IntVector* %60, i32 %65)
			store i32 %66, i32* %46
			%67 = load i32* %46
			store i32 %67, i32* %39
			store i1 0, i1* %30
			br label %end_38
		
end_38:
		%68 = alloca i32
		store i32 0, i32* %68
		%69 = load i32* %68
		store i32 %69, i32* %18
		%70 = load i32* %18
		store i32 %70, i32* %4
		br label %end_12
	
end_12:
	%71 = load i32* %4
	store i32 %71, i32* %3
	%72 = load i32* %3
	ret i32 %72
}

define i32 @Main_main(%struct.Main* %self) #0 {
	%1 = alloca %struct.Main*
	store %struct.Main* %self, %struct.Main** %1
	%2 = alloca i32
	%3 = alloca %struct.IO*
	; let
	%4 = alloca i32
	%5 = alloca i32
	%6 = alloca i32
	store i32 3, i32* %6
	%7 = alloca %struct.IntVector*
	%8 = load %struct.Main** %1
	%9 = getelementptr inbounds %struct.Main* %8, i32 0, i32 1
	%10 = load %struct.IntVector** %9
	store %struct.IntVector* %10, %struct.IntVector** %7
; call
	%11 = load %struct.IntVector** %7
	%12 = getelementptr inbounds %struct.IntVector* %11, i32 0, i32 0
	%13 = load %struct.IntVectorVTable** %12
	%14 = getelementptr inbounds %struct.IntVectorVTable* %13, i32 0, i32 7
	%15 = load i32 (%struct.IntVector*, i32)** %14
	%16 = load i32* %6
	%17 = call i32 %15(%struct.IntVector* %11, i32 %16)
	store i32 %17, i32* %5
	%18 = load i32* %5
	store i32 %18, i32* %4
	%19 = alloca %struct.IO*
	%20 = alloca %struct.IO*
	; condition
	%21 = alloca i1
	; binary operation
	%22 = alloca i32
	%23 = load i32* %4
	store i32 %23, i32* %22
	%24 = alloca i32
	store i32 0, i32* %24
	%25 = load i32* %22
	%26 = load i32* %24
	%27 = icmp slt i32 %25, %26
	store i1 %27, i1* %21
	%28 = load i1* %21
	br i1 %28, label %then_28, label %else_28
	
then_28:
		%29 = alloca %struct.IO*
		%30 = alloca i8*
		store i8* getelementptr inbounds ([6 x i8]* @.str0, i32 0, i32 0), i8** %30
; call
		%31 = load %struct.Main** %1
		%32 = getelementptr inbounds %struct.Main* %31, i32 0, i32 0
		%33 = load %struct.MainVTable** %32
		%34 = getelementptr inbounds %struct.MainVTable* %33, i32 0, i32 1
		%35 = load %struct.IO* (%struct.Main*, i8*)** %34
		%36 = load i8** %30
		%37 = call %struct.IO* %35(%struct.Main* %31, i8* %36)
		store %struct.IO* %37, %struct.IO** %29
		%38 = load %struct.IO** %29
		store %struct.IO* %38, %struct.IO** %20
		br label %end_28
	
else_28:
		%39 = alloca %struct.IO*
		%40 = alloca i8*
		store i8* getelementptr inbounds ([18 x i8]* @.str1, i32 0, i32 0), i8** %40
; call
		%41 = load %struct.Main** %1
		%42 = getelementptr inbounds %struct.Main* %41, i32 0, i32 0
		%43 = load %struct.MainVTable** %42
		%44 = getelementptr inbounds %struct.MainVTable* %43, i32 0, i32 1
		%45 = load %struct.IO* (%struct.Main*, i8*)** %44
		%46 = load i8** %40
		%47 = call %struct.IO* %45(%struct.Main* %41, i8* %46)
		store %struct.IO* %47, %struct.IO** %39
		%48 = load %struct.IO** %39
		store %struct.IO* %48, %struct.IO** %20
		br label %end_28
	
end_28:
	%49 = load %struct.IO** %20
	store %struct.IO* %49, %struct.IO** %19
	%50 = load %struct.IO** %19
	store %struct.IO* %50, %struct.IO** %3
	%51 = alloca i1
	; let
	%52 = alloca i32
	%53 = alloca i32
	store i32 0, i32* %53
	%54 = load i32* %53
	store i32 %54, i32* %52
	%55 = alloca i1
	%56 = alloca i1
	%57 = alloca i32
	; while
	br label %loop_5

loop_5:
	%58 = alloca i1
	; binary operation
	%59 = alloca i32
	%60 = load i32* %52
	store i32 %60, i32* %59
	%61 = alloca i32
	%62 = alloca %struct.IntVector*
	%63 = load %struct.Main** %1
	%64 = getelementptr inbounds %struct.Main* %63, i32 0, i32 1
	%65 = load %struct.IntVector** %64
	store %struct.IntVector* %65, %struct.IntVector** %62
; call
	%66 = load %struct.IntVector** %62
	%67 = getelementptr inbounds %struct.IntVector* %66, i32 0, i32 0
	%68 = load %struct.IntVectorVTable** %67
	%69 = getelementptr inbounds %struct.IntVectorVTable* %68, i32 0, i32 9
	%70 = load i32 (%struct.IntVector*)** %69
	%71 = call i32 %70(%struct.IntVector* %66)
	store i32 %71, i32* %61
	%72 = load i32* %59
	%73 = load i32* %61
	%74 = icmp slt i32 %72, %73
	store i1 %74, i1* %58
	%75 = load i1* %58
	br i1 %75, label %do_5, label %end_5

do_5:
	%76 = alloca i32
	%77 = alloca i32
	%78 = load i32* %52
	store i32 %78, i32* %77
	%79 = alloca i32
	; binary operation
	%80 = alloca i32
	store i32 5, i32* %80
	%81 = alloca i32
	; binary operation
	%82 = alloca i32
	%83 = load i32* %52
	store i32 %83, i32* %82
	%84 = alloca i32
	store i32 2, i32* %84
	%85 = load i32* %82
	%86 = load i32* %84
	%87 = mul i32 %85, %86
	store i32 %87, i32* %81
	%88 = load i32* %80
	%89 = load i32* %81
	%90 = sub i32 %88, %89
	store i32 %90, i32* %79
	%91 = alloca %struct.IntVector*
	%92 = load %struct.Main** %1
	%93 = getelementptr inbounds %struct.Main* %92, i32 0, i32 1
	%94 = load %struct.IntVector** %93
	store %struct.IntVector* %94, %struct.IntVector** %91
; call
	%95 = load %struct.IntVector** %91
	%96 = getelementptr inbounds %struct.IntVector* %95, i32 0, i32 0
	%97 = load %struct.IntVectorVTable** %96
	%98 = getelementptr inbounds %struct.IntVectorVTable* %97, i32 0, i32 6
	%99 = load i32 (%struct.IntVector*, i32, i32)** %98
	%100 = load i32* %77
	%101 = load i32* %79
	%102 = call i32 %99(%struct.IntVector* %95, i32 %100, i32 %101)
	store i32 %102, i32* %76
	%103 = alloca i32
	; assignement
	%104 = alloca i32
	; binary operation
	%105 = alloca i32
	%106 = load i32* %52
	store i32 %106, i32* %105
	%107 = alloca i32
	store i32 1, i32* %107
	%108 = load i32* %105
	%109 = load i32* %107
	%110 = add nuw i32 %108, %109
	store i32 %110, i32* %104
	%111 = load i32* %104
	store i32 %111, i32* %52
	store i32 %111, i32* %103
	%112 = load i32* %103
	store i32 %112, i32* %57
	br label %loop_5

end_5:
	%113 = load i1* %56
	store i1 %113, i1* %55
	%114 = load i1* %55
	store i1 %114, i1* %51
	%115 = alloca %struct.IO*
	; let
	%116 = alloca i32
	%117 = alloca i32
	store i32 0, i32* %117
	%118 = load i32* %117
	store i32 %118, i32* %116
	%119 = alloca %struct.IO*
	%120 = alloca %struct.IO*
	%121 = alloca i8*
	store i8* getelementptr inbounds ([2 x i8]* @.str2, i32 0, i32 0), i8** %121
; call
	%122 = load %struct.Main** %1
	%123 = getelementptr inbounds %struct.Main* %122, i32 0, i32 0
	%124 = load %struct.MainVTable** %123
	%125 = getelementptr inbounds %struct.MainVTable* %124, i32 0, i32 1
	%126 = load %struct.IO* (%struct.Main*, i8*)** %125
	%127 = load i8** %121
	%128 = call %struct.IO* %126(%struct.Main* %122, i8* %127)
	store %struct.IO* %128, %struct.IO** %120
	%129 = alloca i1
	%130 = alloca i32
	; while
	br label %loop_1

loop_1:
	%131 = alloca i1
	; binary operation
	%132 = alloca i32
	%133 = load i32* %116
	store i32 %133, i32* %132
	%134 = alloca i32
	; binary operation
	%135 = alloca i32
	%136 = alloca %struct.IntVector*
	%137 = load %struct.Main** %1
	%138 = getelementptr inbounds %struct.Main* %137, i32 0, i32 1
	%139 = load %struct.IntVector** %138
	store %struct.IntVector* %139, %struct.IntVector** %136
; call
	%140 = load %struct.IntVector** %136
	%141 = getelementptr inbounds %struct.IntVector* %140, i32 0, i32 0
	%142 = load %struct.IntVectorVTable** %141
	%143 = getelementptr inbounds %struct.IntVectorVTable* %142, i32 0, i32 9
	%144 = load i32 (%struct.IntVector*)** %143
	%145 = call i32 %144(%struct.IntVector* %140)
	store i32 %145, i32* %135
	%146 = alloca i32
	store i32 1, i32* %146
	%147 = load i32* %135
	%148 = load i32* %146
	%149 = sub i32 %147, %148
	store i32 %149, i32* %134
	%150 = load i32* %132
	%151 = load i32* %134
	%152 = icmp slt i32 %150, %151
	store i1 %152, i1* %131
	%153 = load i1* %131
	br i1 %153, label %do_1, label %end_1

do_1:
	%154 = alloca %struct.IO*
	%155 = alloca i8*
	store i8* getelementptr inbounds ([2 x i8]* @.str3, i32 0, i32 0), i8** %155
	%156 = alloca %struct.IO*
	%157 = alloca i32
	%158 = alloca i32
	%159 = load i32* %116
	store i32 %159, i32* %158
	%160 = alloca %struct.IntVector*
	%161 = load %struct.Main** %1
	%162 = getelementptr inbounds %struct.Main* %161, i32 0, i32 1
	%163 = load %struct.IntVector** %162
	store %struct.IntVector* %163, %struct.IntVector** %160
; call
	%164 = load %struct.IntVector** %160
	%165 = getelementptr inbounds %struct.IntVector* %164, i32 0, i32 0
	%166 = load %struct.IntVectorVTable** %165
	%167 = getelementptr inbounds %struct.IntVectorVTable* %166, i32 0, i32 8
	%168 = load i32 (%struct.IntVector*, i32)** %167
	%169 = load i32* %158
	%170 = call i32 %168(%struct.IntVector* %164, i32 %169)
	store i32 %170, i32* %157
; call
	%171 = load %struct.Main** %1
	%172 = getelementptr inbounds %struct.Main* %171, i32 0, i32 0
	%173 = load %struct.MainVTable** %172
	%174 = getelementptr inbounds %struct.MainVTable* %173, i32 0, i32 5
	%175 = load %struct.IO* (%struct.Main*, i32)** %174
	%176 = load i32* %157
	%177 = call %struct.IO* %175(%struct.Main* %171, i32 %176)
	store %struct.IO* %177, %struct.IO** %156
; call
	%178 = load %struct.IO** %156
	%179 = getelementptr inbounds %struct.IO* %178, i32 0, i32 0
	%180 = load %struct.IOVTable** %179
	%181 = getelementptr inbounds %struct.IOVTable* %180, i32 0, i32 1
	%182 = load %struct.IO* (%struct.IO*, i8*)** %181
	%183 = load i8** %155
	%184 = call %struct.IO* %182(%struct.IO* %178, i8* %183)
	store %struct.IO* %184, %struct.IO** %154
	%185 = alloca i32
	; assignement
	%186 = alloca i32
	; binary operation
	%187 = alloca i32
	%188 = load i32* %116
	store i32 %188, i32* %187
	%189 = alloca i32
	store i32 1, i32* %189
	%190 = load i32* %187
	%191 = load i32* %189
	%192 = add nuw i32 %190, %191
	store i32 %192, i32* %186
	%193 = load i32* %186
	store i32 %193, i32* %116
	store i32 %193, i32* %185
	%194 = load i32* %185
	store i32 %194, i32* %130
	br label %loop_1

end_1:
	%195 = alloca %struct.IO*
	%196 = alloca i32
	%197 = alloca i32
	; binary operation
	%198 = alloca i32
	%199 = alloca %struct.IntVector*
	%200 = load %struct.Main** %1
	%201 = getelementptr inbounds %struct.Main* %200, i32 0, i32 1
	%202 = load %struct.IntVector** %201
	store %struct.IntVector* %202, %struct.IntVector** %199
; call
	%203 = load %struct.IntVector** %199
	%204 = getelementptr inbounds %struct.IntVector* %203, i32 0, i32 0
	%205 = load %struct.IntVectorVTable** %204
	%206 = getelementptr inbounds %struct.IntVectorVTable* %205, i32 0, i32 9
	%207 = load i32 (%struct.IntVector*)** %206
	%208 = call i32 %207(%struct.IntVector* %203)
	store i32 %208, i32* %198
	%209 = alloca i32
	store i32 1, i32* %209
	%210 = load i32* %198
	%211 = load i32* %209
	%212 = sub i32 %210, %211
	store i32 %212, i32* %197
	%213 = alloca %struct.IntVector*
	%214 = load %struct.Main** %1
	%215 = getelementptr inbounds %struct.Main* %214, i32 0, i32 1
	%216 = load %struct.IntVector** %215
	store %struct.IntVector* %216, %struct.IntVector** %213
; call
	%217 = load %struct.IntVector** %213
	%218 = getelementptr inbounds %struct.IntVector* %217, i32 0, i32 0
	%219 = load %struct.IntVectorVTable** %218
	%220 = getelementptr inbounds %struct.IntVectorVTable* %219, i32 0, i32 8
	%221 = load i32 (%struct.IntVector*, i32)** %220
	%222 = load i32* %197
	%223 = call i32 %221(%struct.IntVector* %217, i32 %222)
	store i32 %223, i32* %196
; call
	%224 = load %struct.Main** %1
	%225 = getelementptr inbounds %struct.Main* %224, i32 0, i32 0
	%226 = load %struct.MainVTable** %225
	%227 = getelementptr inbounds %struct.MainVTable* %226, i32 0, i32 5
	%228 = load %struct.IO* (%struct.Main*, i32)** %227
	%229 = load i32* %196
	%230 = call %struct.IO* %228(%struct.Main* %224, i32 %229)
	store %struct.IO* %230, %struct.IO** %195
	%231 = alloca %struct.IO*
	%232 = alloca i8*
	store i8* getelementptr inbounds ([3 x i8]* @.str4, i32 0, i32 0), i8** %232
; call
	%233 = load %struct.Main** %1
	%234 = getelementptr inbounds %struct.Main* %233, i32 0, i32 0
	%235 = load %struct.MainVTable** %234
	%236 = getelementptr inbounds %struct.MainVTable* %235, i32 0, i32 1
	%237 = load %struct.IO* (%struct.Main*, i8*)** %236
	%238 = load i8** %232
	%239 = call %struct.IO* %237(%struct.Main* %233, i8* %238)
	store %struct.IO* %239, %struct.IO** %231
	%240 = load %struct.IO** %231
	store %struct.IO* %240, %struct.IO** %119
	%241 = load %struct.IO** %119
	store %struct.IO* %241, %struct.IO** %115
	%242 = alloca %struct.IntVector*
	; assignement
	%243 = alloca %struct.IntVector*
	%244 = alloca %struct.IntVector*
	%245 = load %struct.Main** %1
	%246 = getelementptr inbounds %struct.Main* %245, i32 0, i32 1
	%247 = load %struct.IntVector** %246
	store %struct.IntVector* %247, %struct.IntVector** %244
	%248 = alloca %struct.Sort*
	; new
	%249 = call %struct.Sort* @SortNew()
	store %struct.Sort* %249, %struct.Sort** %248
; call
	%250 = load %struct.Sort** %248
	%251 = getelementptr inbounds %struct.Sort* %250, i32 0, i32 0
	%252 = load %struct.SortVTable** %251
	%253 = getelementptr inbounds %struct.SortVTable* %252, i32 0, i32 7
	%254 = load %struct.IntVector* (%struct.Sort*, %struct.IntVector*)** %253
	%255 = load %struct.IntVector** %244
	%256 = call %struct.IntVector* %254(%struct.Sort* %250, %struct.IntVector* %255)
	store %struct.IntVector* %256, %struct.IntVector** %243
	%257 = load %struct.IntVector** %243
;field
	%258 = load %struct.Main** %1
	%259 = getelementptr inbounds %struct.Main* %258, i32 0, i32 1
	store %struct.IntVector* %257, %struct.IntVector** %259
	store %struct.IntVector* %257, %struct.IntVector** %242
	%260 = alloca %struct.IO*
	; let
	%261 = alloca i32
	%262 = alloca i32
	store i32 0, i32* %262
	%263 = load i32* %262
	store i32 %263, i32* %261
	%264 = alloca %struct.IO*
	%265 = alloca %struct.IO*
	%266 = alloca i8*
	store i8* getelementptr inbounds ([2 x i8]* @.str5, i32 0, i32 0), i8** %266
; call
	%267 = load %struct.Main** %1
	%268 = getelementptr inbounds %struct.Main* %267, i32 0, i32 0
	%269 = load %struct.MainVTable** %268
	%270 = getelementptr inbounds %struct.MainVTable* %269, i32 0, i32 1
	%271 = load %struct.IO* (%struct.Main*, i8*)** %270
	%272 = load i8** %266
	%273 = call %struct.IO* %271(%struct.Main* %267, i8* %272)
	store %struct.IO* %273, %struct.IO** %265
	%274 = alloca i1
	%275 = alloca i32
	; while
	br label %loop_2

loop_2:
	%276 = alloca i1
	; binary operation
	%277 = alloca i32
	%278 = load i32* %261
	store i32 %278, i32* %277
	%279 = alloca i32
	; binary operation
	%280 = alloca i32
	%281 = alloca %struct.IntVector*
	%282 = load %struct.Main** %1
	%283 = getelementptr inbounds %struct.Main* %282, i32 0, i32 1
	%284 = load %struct.IntVector** %283
	store %struct.IntVector* %284, %struct.IntVector** %281
; call
	%285 = load %struct.IntVector** %281
	%286 = getelementptr inbounds %struct.IntVector* %285, i32 0, i32 0
	%287 = load %struct.IntVectorVTable** %286
	%288 = getelementptr inbounds %struct.IntVectorVTable* %287, i32 0, i32 9
	%289 = load i32 (%struct.IntVector*)** %288
	%290 = call i32 %289(%struct.IntVector* %285)
	store i32 %290, i32* %280
	%291 = alloca i32
	store i32 1, i32* %291
	%292 = load i32* %280
	%293 = load i32* %291
	%294 = sub i32 %292, %293
	store i32 %294, i32* %279
	%295 = load i32* %277
	%296 = load i32* %279
	%297 = icmp slt i32 %295, %296
	store i1 %297, i1* %276
	%298 = load i1* %276
	br i1 %298, label %do_2, label %end_2

do_2:
	%299 = alloca %struct.IO*
	%300 = alloca i8*
	store i8* getelementptr inbounds ([2 x i8]* @.str6, i32 0, i32 0), i8** %300
	%301 = alloca %struct.IO*
	%302 = alloca i32
	%303 = alloca i32
	%304 = load i32* %261
	store i32 %304, i32* %303
	%305 = alloca %struct.IntVector*
	%306 = load %struct.Main** %1
	%307 = getelementptr inbounds %struct.Main* %306, i32 0, i32 1
	%308 = load %struct.IntVector** %307
	store %struct.IntVector* %308, %struct.IntVector** %305
; call
	%309 = load %struct.IntVector** %305
	%310 = getelementptr inbounds %struct.IntVector* %309, i32 0, i32 0
	%311 = load %struct.IntVectorVTable** %310
	%312 = getelementptr inbounds %struct.IntVectorVTable* %311, i32 0, i32 8
	%313 = load i32 (%struct.IntVector*, i32)** %312
	%314 = load i32* %303
	%315 = call i32 %313(%struct.IntVector* %309, i32 %314)
	store i32 %315, i32* %302
; call
	%316 = load %struct.Main** %1
	%317 = getelementptr inbounds %struct.Main* %316, i32 0, i32 0
	%318 = load %struct.MainVTable** %317
	%319 = getelementptr inbounds %struct.MainVTable* %318, i32 0, i32 5
	%320 = load %struct.IO* (%struct.Main*, i32)** %319
	%321 = load i32* %302
	%322 = call %struct.IO* %320(%struct.Main* %316, i32 %321)
	store %struct.IO* %322, %struct.IO** %301
; call
	%323 = load %struct.IO** %301
	%324 = getelementptr inbounds %struct.IO* %323, i32 0, i32 0
	%325 = load %struct.IOVTable** %324
	%326 = getelementptr inbounds %struct.IOVTable* %325, i32 0, i32 1
	%327 = load %struct.IO* (%struct.IO*, i8*)** %326
	%328 = load i8** %300
	%329 = call %struct.IO* %327(%struct.IO* %323, i8* %328)
	store %struct.IO* %329, %struct.IO** %299
	%330 = alloca i32
	; assignement
	%331 = alloca i32
	; binary operation
	%332 = alloca i32
	%333 = load i32* %261
	store i32 %333, i32* %332
	%334 = alloca i32
	store i32 1, i32* %334
	%335 = load i32* %332
	%336 = load i32* %334
	%337 = add nuw i32 %335, %336
	store i32 %337, i32* %331
	%338 = load i32* %331
	store i32 %338, i32* %261
	store i32 %338, i32* %330
	%339 = load i32* %330
	store i32 %339, i32* %275
	br label %loop_2

end_2:
	%340 = alloca %struct.IO*
	%341 = alloca i32
	%342 = alloca i32
	; binary operation
	%343 = alloca i32
	%344 = alloca %struct.IntVector*
	%345 = load %struct.Main** %1
	%346 = getelementptr inbounds %struct.Main* %345, i32 0, i32 1
	%347 = load %struct.IntVector** %346
	store %struct.IntVector* %347, %struct.IntVector** %344
; call
	%348 = load %struct.IntVector** %344
	%349 = getelementptr inbounds %struct.IntVector* %348, i32 0, i32 0
	%350 = load %struct.IntVectorVTable** %349
	%351 = getelementptr inbounds %struct.IntVectorVTable* %350, i32 0, i32 9
	%352 = load i32 (%struct.IntVector*)** %351
	%353 = call i32 %352(%struct.IntVector* %348)
	store i32 %353, i32* %343
	%354 = alloca i32
	store i32 1, i32* %354
	%355 = load i32* %343
	%356 = load i32* %354
	%357 = sub i32 %355, %356
	store i32 %357, i32* %342
	%358 = alloca %struct.IntVector*
	%359 = load %struct.Main** %1
	%360 = getelementptr inbounds %struct.Main* %359, i32 0, i32 1
	%361 = load %struct.IntVector** %360
	store %struct.IntVector* %361, %struct.IntVector** %358
; call
	%362 = load %struct.IntVector** %358
	%363 = getelementptr inbounds %struct.IntVector* %362, i32 0, i32 0
	%364 = load %struct.IntVectorVTable** %363
	%365 = getelementptr inbounds %struct.IntVectorVTable* %364, i32 0, i32 8
	%366 = load i32 (%struct.IntVector*, i32)** %365
	%367 = load i32* %342
	%368 = call i32 %366(%struct.IntVector* %362, i32 %367)
	store i32 %368, i32* %341
; call
	%369 = load %struct.Main** %1
	%370 = getelementptr inbounds %struct.Main* %369, i32 0, i32 0
	%371 = load %struct.MainVTable** %370
	%372 = getelementptr inbounds %struct.MainVTable* %371, i32 0, i32 5
	%373 = load %struct.IO* (%struct.Main*, i32)** %372
	%374 = load i32* %341
	%375 = call %struct.IO* %373(%struct.Main* %369, i32 %374)
	store %struct.IO* %375, %struct.IO** %340
	%376 = alloca %struct.IO*
	%377 = alloca i8*
	store i8* getelementptr inbounds ([3 x i8]* @.str7, i32 0, i32 0), i8** %377
; call
	%378 = load %struct.Main** %1
	%379 = getelementptr inbounds %struct.Main* %378, i32 0, i32 0
	%380 = load %struct.MainVTable** %379
	%381 = getelementptr inbounds %struct.MainVTable* %380, i32 0, i32 1
	%382 = load %struct.IO* (%struct.Main*, i8*)** %381
	%383 = load i8** %377
	%384 = call %struct.IO* %382(%struct.Main* %378, i8* %383)
	store %struct.IO* %384, %struct.IO** %376
	%385 = load %struct.IO** %376
	store %struct.IO* %385, %struct.IO** %264
	%386 = load %struct.IO** %264
	store %struct.IO* %386, %struct.IO** %260
	%387 = alloca i32
	store i32 0, i32* %387
	%388 = load i32* %387
	store i32 %388, i32* %2
	%389 = load i32* %2
	ret i32 %389
}

define %struct.IO* @IO_print(%struct.IO* %self, i8* %s) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i8*
	store i8* %s, i8** %2
	%3 = alloca %struct.IO*
	%4 = alloca %struct.IO*
	%5 = alloca i8*
	%6 = load i8** %2
	store i8* %6, i8** %5
;call
	%7 = load i8** %5
call void @print(i8* %7)
	%8 = alloca %struct.IO*
	%9 = load %struct.IO** %1
	store %struct.IO* %9, %struct.IO** %8
	%10 = load %struct.IO** %8
	store %struct.IO* %10, %struct.IO** %3
	%11 = load %struct.IO** %3
	ret %struct.IO* %11
}

define %struct.IO* @IO_printBool(%struct.IO* %self, i1 %b) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i1
	store i1 %b, i1* %2
	%3 = alloca %struct.IO*
	%4 = alloca %struct.IO*
	%5 = alloca i1
	%6 = load i1* %2
	store i1 %6, i1* %5
;call
	%7 = load i1* %5
call void @printBool(i1 %7)
	%8 = alloca %struct.IO*
	%9 = load %struct.IO** %1
	store %struct.IO* %9, %struct.IO** %8
	%10 = load %struct.IO** %8
	store %struct.IO* %10, %struct.IO** %3
	%11 = load %struct.IO** %3
	ret %struct.IO* %11
}

define %struct.IO* @IO_printInt32(%struct.IO* %self, i32 %i) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i32
	store i32 %i, i32* %2
	%3 = alloca %struct.IO*
	%4 = alloca %struct.IO*
	%5 = alloca i32
	%6 = load i32* %2
	store i32 %6, i32* %5
;call
	%7 = load i32* %5
call void @printInt32(i32 %7)
	%8 = alloca %struct.IO*
	%9 = load %struct.IO** %1
	store %struct.IO* %9, %struct.IO** %8
	%10 = load %struct.IO** %8
	store %struct.IO* %10, %struct.IO** %3
	%11 = load %struct.IO** %3
	ret %struct.IO* %11
}

define i8* @IO_inputLine(%struct.IO* %self) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i8*
	%3 = alloca i8*
;call
	%4 = call i8* @inputLine()
	store i8* %4, i8** %3
	%5 = load i8** %3
	store i8* %5, i8** %2
	%6 = load i8** %2
	ret i8* %6
}

define i1 @IO_inputBool(%struct.IO* %self) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i1
	%3 = alloca i1
;call
	%4 = call i1 @inputBool()
	store i1 %4, i1* %3
	%5 = load i1* %3
	store i1 %5, i1* %2
	%6 = load i1* %2
	ret i1 %6
}

define i32 @IO_inputInt32(%struct.IO* %self) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i32
	%3 = alloca i32
;call
	%4 = call i32 @inputInt32()
	store i32 %4, i32* %3
	%5 = load i32* %3
	store i32 %5, i32* %2
	%6 = load i32* %2
	ret i32 %6
}

define i32 @main(){
	%1 = call %struct.Main* @MainNew()
	%2 = getelementptr inbounds %struct.Main* %1, i32 0, i32 0
	%3 = load %struct.MainVTable** %2
	%4 = getelementptr inbounds %struct.MainVTable* %3, i32 0, i32 6
	%5 = load i32 (%struct.Main*)** %4
	%6 = call i32 %5(%struct.Main* %1)
	ret i32 %6
}
