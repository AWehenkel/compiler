class Sort extends IO {

  insertionSort(vector : IntVector) : IntVector {
    if not (isnull vector)
    then {
      let i : int32 <- 1 in {
        while i < vector.getSize()
        do {
          let j : int32 <- i in {
            while 0 < j and vector.getElementAt(j) < vector.getElementAt(j-1)
            do {
              vector <- swap(vector, j-1, j);
              j <- j - 1
            }
          };
          i <- i + 1
        }
      }
    };
    vector
  }

  selectionSort(vector : IntVector) : IntVector {
    if not (isnull vector)
    then{
      let j : int32 <- 0 in {
        while j < vector.getSize()-1
        do {
          let iMin : int32 <- j in {
            let i : int32 <- j+1 in {
              while i < vector.getSize()
              do {
                if vector.getElementAt(i) < vector.getElementAt(iMin)
                then iMin <- i;
                i <- i + 1
              };
              if not (iMin = j)
              then
                vector <- swap(vector, j, iMin)
            }
          };
          j <- j + 1
        }
      }
    };
    vector
  }

  swap(vector : IntVector, i : int32, j : int32) : IntVector {
    if not (isnull vector)
    then {
      let tmp : int32 <- vector.getElementAt(i) in {
        vector.setElementAt(i, vector.getElementAt(j));
        vector.setElementAt(j, tmp)
      }
    };
    vector
  }
}

class IntVector extends IO {
  value : int32;
  size : int32 <- 0;
  next : IntVector;

  getSize() : int32 {
    size
  }

  getElementAt(i : int32) : int32 {
    if size <= i
    then -1
    else
      if i = 0
      then
        value
      else
        next.getElementAt(i-1)
  }

  setElementAt(i : int32, v : int32) : int32 {
    if size <= i
    then -1
    else
      if i = 0
      then
        value <- v
      else
        next.setElementAt(i-1, v)
  }

  initVector(s : int32) : int32 {
    if s < 0
    then -1
    else {
      size <- s;
      value <- 0;
      if 1 < s
      then{
        next <- new IntVector;
        next.initVector(size-1)
      };
      0
    }
  }
}

class Main extends IO {
  arr : IntVector <- new IntVector;
  main() : int32 {
    // Allocate the vector
    let res : int32 <- arr.initVector(3) in {
      if res < 0
      then
        print("Error")
      else
        print("Vector allocated\n")
    };
    // Initialize the values
    let i : int32 <- 0 in {
      while i < arr.getSize()
      do {
        arr.setElementAt(i, 5-i*2);
        i <- i + 1
      }
    };
    // Get the values unsorted
    let i : int32 <- 0 in {
      print("[");
      while i < arr.getSize()-1
      do {
        printInt32(arr.getElementAt(i)).print(" ");
        i <- i + 1
      };
      printInt32(arr.getElementAt(arr.getSize()-1));
      print("]\n")
    };
    // Sort the vector
    arr <- (new Sort).selectionSort(arr);
    // Get the values sorted
    let i : int32 <- 0 in {
      print("[");
      while i < arr.getSize()-1
      do {
        printInt32(arr.getElementAt(i)).print(" ");
        i <- i + 1
      };
      printInt32(arr.getElementAt(arr.getSize()-1));
      print("]\n")
    };
    0
  }
}
