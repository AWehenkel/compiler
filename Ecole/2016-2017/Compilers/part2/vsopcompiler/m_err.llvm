declare i1 @inputBool()
declare i32 @inputInt32()
declare i8* @inputLine()
declare void @print(i8*)
declare void @printInt32(i32)
declare void @printBool(i1)
declare i32 @strcmp(i8*, i8*)
declare float @llvm.powi.f32(float, i32)

@.str_empty = private unnamed_addr constant [1 x i8] c"\00", align 1
@.str0 = private unnamed_addr constant [23 x i8] c"Choose an operator : \0a\00", align 1
@.str1 = private unnamed_addr constant [15 x i8] c"A  : addition\0a\00", align 1
@.str2 = private unnamed_addr constant [19 x i8] c"S  : substraction\0a\00", align 1
@.str3 = private unnamed_addr constant [21 x i8] c"M  : multiplication\0a\00", align 1
@.str4 = private unnamed_addr constant [15 x i8] c"D  : division\0a\00", align 1
@.str5 = private unnamed_addr constant [12 x i8] c"P  : power\0a\00", align 1
@.str6 = private unnamed_addr constant [13 x i8] c"MO : modulo\0a\00", align 1
@.str7 = private unnamed_addr constant [10 x i8] c"Choice : \00", align 1
@.str8 = private unnamed_addr constant [2 x i8] c"A\00", align 1
@.str9 = private unnamed_addr constant [2 x i8] c"S\00", align 1
@.str10 = private unnamed_addr constant [23 x i8] c"Enter a first number: \00", align 1
@.str11 = private unnamed_addr constant [24 x i8] c"Enter a second number: \00", align 1
@.str12 = private unnamed_addr constant [2 x i8] c"\0a\00", align 1
@.str13 = private unnamed_addr constant [10 x i8] c"Output : \00", align 1
declare noalias i8* @malloc(i32)

%struct.Calculator = type {
	%struct.CalculatorVTable*
}

%struct.CalculatorVTable = type {
	i32 (%struct.Calculator*, i32, i32)*
}

@CalculatorVTable_inst = global %struct.CalculatorVTable{
	i32 (%struct.Calculator*, i32, i32)* @Calculator_operate
}

define void @CalculatorInit(%struct.Calculator* %self){
	%1 = bitcast %struct.Calculator* %self to %struct.Object*
	call void @ObjectInit(%struct.Object* %1)
	%2 = getelementptr inbounds %struct.Calculator* %self, i32 0, i32 0
	store %struct.CalculatorVTable* @CalculatorVTable_inst, %struct.CalculatorVTable** %2
	ret void
}

define %struct.Calculator* @CalculatorNew(){
	%self = alloca %struct.Calculator*
	%1 = getelementptr %struct.Calculator* null, i32 1
	%size = ptrtoint %struct.Calculator* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.Calculator*
	store %struct.Calculator* %3, %struct.Calculator** %self
	%4 = load %struct.Calculator** %self
	%5 = icmp ne %struct.Calculator* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @CalculatorInit(%struct.Calculator* %4)
	br label %null

null:   			; preds = %5
	ret %struct.Calculator* %4
}

%struct.Addition = type {
	%struct.AdditionVTable*
}

%struct.AdditionVTable = type {
	i32 (%struct.Addition*, i32, i32)*
}

@AdditionVTable_inst = global %struct.AdditionVTable{
	i32 (%struct.Addition*, i32, i32)* @Addition_operate
}

define void @AdditionInit(%struct.Addition* %self){
	%1 = bitcast %struct.Addition* %self to %struct.Calculator*
	call void @CalculatorInit(%struct.Calculator* %1)
	%2 = getelementptr inbounds %struct.Addition* %self, i32 0, i32 0
	store %struct.AdditionVTable* @AdditionVTable_inst, %struct.AdditionVTable** %2
	ret void
}

define %struct.Addition* @AdditionNew(){
	%self = alloca %struct.Addition*
	%1 = getelementptr %struct.Addition* null, i32 1
	%size = ptrtoint %struct.Addition* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.Addition*
	store %struct.Addition* %3, %struct.Addition** %self
	%4 = load %struct.Addition** %self
	%5 = icmp ne %struct.Addition* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @AdditionInit(%struct.Addition* %4)
	br label %null

null:   			; preds = %5
	ret %struct.Addition* %4
}

%struct.Substraction = type {
	%struct.SubstractionVTable*
}

%struct.SubstractionVTable = type {
	i32 (%struct.Substraction*, i32, i32)*
}

@SubstractionVTable_inst = global %struct.SubstractionVTable{
	i32 (%struct.Substraction*, i32, i32)* @Substraction_operate
}

define void @SubstractionInit(%struct.Substraction* %self){
	%1 = bitcast %struct.Substraction* %self to %struct.Calculator*
	call void @CalculatorInit(%struct.Calculator* %1)
	%2 = getelementptr inbounds %struct.Substraction* %self, i32 0, i32 0
	store %struct.SubstractionVTable* @SubstractionVTable_inst, %struct.SubstractionVTable** %2
	ret void
}

define %struct.Substraction* @SubstractionNew(){
	%self = alloca %struct.Substraction*
	%1 = getelementptr %struct.Substraction* null, i32 1
	%size = ptrtoint %struct.Substraction* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.Substraction*
	store %struct.Substraction* %3, %struct.Substraction** %self
	%4 = load %struct.Substraction** %self
	%5 = icmp ne %struct.Substraction* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @SubstractionInit(%struct.Substraction* %4)
	br label %null

null:   			; preds = %5
	ret %struct.Substraction* %4
}

%struct.Multiplication = type {
	%struct.MultiplicationVTable*
}

%struct.MultiplicationVTable = type {
	i32 (%struct.Multiplication*, i32, i32)*
}

@MultiplicationVTable_inst = global %struct.MultiplicationVTable{
	i32 (%struct.Multiplication*, i32, i32)* @Multiplication_operate
}

define void @MultiplicationInit(%struct.Multiplication* %self){
	%1 = bitcast %struct.Multiplication* %self to %struct.Calculator*
	call void @CalculatorInit(%struct.Calculator* %1)
	%2 = getelementptr inbounds %struct.Multiplication* %self, i32 0, i32 0
	store %struct.MultiplicationVTable* @MultiplicationVTable_inst, %struct.MultiplicationVTable** %2
	ret void
}

define %struct.Multiplication* @MultiplicationNew(){
	%self = alloca %struct.Multiplication*
	%1 = getelementptr %struct.Multiplication* null, i32 1
	%size = ptrtoint %struct.Multiplication* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.Multiplication*
	store %struct.Multiplication* %3, %struct.Multiplication** %self
	%4 = load %struct.Multiplication** %self
	%5 = icmp ne %struct.Multiplication* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @MultiplicationInit(%struct.Multiplication* %4)
	br label %null

null:   			; preds = %5
	ret %struct.Multiplication* %4
}

%struct.Division = type {
	%struct.DivisionVTable*
}

%struct.DivisionVTable = type {
	i32 (%struct.Division*, i32, i32)*
}

@DivisionVTable_inst = global %struct.DivisionVTable{
	i32 (%struct.Division*, i32, i32)* @Division_operate
}

define void @DivisionInit(%struct.Division* %self){
	%1 = bitcast %struct.Division* %self to %struct.Calculator*
	call void @CalculatorInit(%struct.Calculator* %1)
	%2 = getelementptr inbounds %struct.Division* %self, i32 0, i32 0
	store %struct.DivisionVTable* @DivisionVTable_inst, %struct.DivisionVTable** %2
	ret void
}

define %struct.Division* @DivisionNew(){
	%self = alloca %struct.Division*
	%1 = getelementptr %struct.Division* null, i32 1
	%size = ptrtoint %struct.Division* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.Division*
	store %struct.Division* %3, %struct.Division** %self
	%4 = load %struct.Division** %self
	%5 = icmp ne %struct.Division* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @DivisionInit(%struct.Division* %4)
	br label %null

null:   			; preds = %5
	ret %struct.Division* %4
}

%struct.Modulo = type {
	%struct.ModuloVTable*
}

%struct.ModuloVTable = type {
	i32 (%struct.Modulo*, i32, i32)*
}

@ModuloVTable_inst = global %struct.ModuloVTable{
	i32 (%struct.Modulo*, i32, i32)* @Modulo_operate
}

define void @ModuloInit(%struct.Modulo* %self){
	%1 = bitcast %struct.Modulo* %self to %struct.Calculator*
	call void @CalculatorInit(%struct.Calculator* %1)
	%2 = getelementptr inbounds %struct.Modulo* %self, i32 0, i32 0
	store %struct.ModuloVTable* @ModuloVTable_inst, %struct.ModuloVTable** %2
	ret void
}

define %struct.Modulo* @ModuloNew(){
	%self = alloca %struct.Modulo*
	%1 = getelementptr %struct.Modulo* null, i32 1
	%size = ptrtoint %struct.Modulo* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.Modulo*
	store %struct.Modulo* %3, %struct.Modulo** %self
	%4 = load %struct.Modulo** %self
	%5 = icmp ne %struct.Modulo* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @ModuloInit(%struct.Modulo* %4)
	br label %null

null:   			; preds = %5
	ret %struct.Modulo* %4
}

%struct.Power = type {
	%struct.PowerVTable*
}

%struct.PowerVTable = type {
	i32 (%struct.Power*, i32, i32)*
}

@PowerVTable_inst = global %struct.PowerVTable{
	i32 (%struct.Power*, i32, i32)* @Power_operate
}

define void @PowerInit(%struct.Power* %self){
	%1 = bitcast %struct.Power* %self to %struct.Calculator*
	call void @CalculatorInit(%struct.Calculator* %1)
	%2 = getelementptr inbounds %struct.Power* %self, i32 0, i32 0
	store %struct.PowerVTable* @PowerVTable_inst, %struct.PowerVTable** %2
	ret void
}

define %struct.Power* @PowerNew(){
	%self = alloca %struct.Power*
	%1 = getelementptr %struct.Power* null, i32 1
	%size = ptrtoint %struct.Power* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.Power*
	store %struct.Power* %3, %struct.Power** %self
	%4 = load %struct.Power** %self
	%5 = icmp ne %struct.Power* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @PowerInit(%struct.Power* %4)
	br label %null

null:   			; preds = %5
	ret %struct.Power* %4
}

%struct.Main = type {
	%struct.MainVTable*,
	%struct.Calculator*
}

%struct.MainVTable = type {
	i32 (%struct.Main*)*,
	%struct.IO* (%struct.Main*, i8*)*,
	%struct.IO* (%struct.Main*, i1)*,
	%struct.IO* (%struct.Main*, i32)*,
	i1 (%struct.Main*)*,
	i8* (%struct.Main*)*,
	i32 (%struct.Main*)*
}

@MainVTable_inst = global %struct.MainVTable{
	i32 (%struct.Main*)* bitcast (i32 (%struct.IO*)* @IO_inputInt32 to i32 (%struct.Main*)*),
	%struct.IO* (%struct.Main*, i8*)* bitcast (%struct.IO* (%struct.IO*, i8*)* @IO_print to %struct.IO* (%struct.Main*, i8*)*),
	%struct.IO* (%struct.Main*, i1)* bitcast (%struct.IO* (%struct.IO*, i1)* @IO_printBool to %struct.IO* (%struct.Main*, i1)*),
	%struct.IO* (%struct.Main*, i32)* bitcast (%struct.IO* (%struct.IO*, i32)* @IO_printInt32 to %struct.IO* (%struct.Main*, i32)*),
	i1 (%struct.Main*)* bitcast (i1 (%struct.IO*)* @IO_inputBool to i1 (%struct.Main*)*),
	i8* (%struct.Main*)* bitcast (i8* (%struct.IO*)* @IO_inputLine to i8* (%struct.Main*)*),
	i32 (%struct.Main*)* @Main_main
}

define void @MainInit(%struct.Main* %self){
	%1 = bitcast %struct.Main* %self to %struct.IO*
	call void @IOInit(%struct.IO* %1)
	%calc = getelementptr inbounds %struct.Main* %self, i32 0, i32 1
	store %struct.Calculator* null, %struct.Calculator** %calc
	%2 = getelementptr inbounds %struct.Main* %self, i32 0, i32 0
	store %struct.MainVTable* @MainVTable_inst, %struct.MainVTable** %2
	ret void
}

define %struct.Main* @MainNew(){
	%self = alloca %struct.Main*
	%1 = getelementptr %struct.Main* null, i32 1
	%size = ptrtoint %struct.Main* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.Main*
	store %struct.Main* %3, %struct.Main** %self
	%4 = load %struct.Main** %self
	%5 = icmp ne %struct.Main* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @MainInit(%struct.Main* %4)
	br label %null

null:   			; preds = %5
	ret %struct.Main* %4
}

%struct.IO = type {
	%struct.IOVTable*
}

%struct.IOVTable = type {
	i32 (%struct.IO*)*,
	%struct.IO* (%struct.IO*, i8*)*,
	%struct.IO* (%struct.IO*, i1)*,
	%struct.IO* (%struct.IO*, i32)*,
	i1 (%struct.IO*)*,
	i8* (%struct.IO*)*
}

@IOVTable_inst = global %struct.IOVTable{
	i32 (%struct.IO*)* @IO_inputInt32,
	%struct.IO* (%struct.IO*, i8*)* @IO_print,
	%struct.IO* (%struct.IO*, i1)* @IO_printBool,
	%struct.IO* (%struct.IO*, i32)* @IO_printInt32,
	i1 (%struct.IO*)* @IO_inputBool,
	i8* (%struct.IO*)* @IO_inputLine
}

define void @IOInit(%struct.IO* %self){
	%1 = bitcast %struct.IO* %self to %struct.Object*
	call void @ObjectInit(%struct.Object* %1)
	%2 = getelementptr inbounds %struct.IO* %self, i32 0, i32 0
	store %struct.IOVTable* @IOVTable_inst, %struct.IOVTable** %2
	ret void
}

define %struct.IO* @IONew(){
	%self = alloca %struct.IO*
	%1 = getelementptr %struct.IO* null, i32 1
	%size = ptrtoint %struct.IO* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.IO*
	store %struct.IO* %3, %struct.IO** %self
	%4 = load %struct.IO** %self
	%5 = icmp ne %struct.IO* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @IOInit(%struct.IO* %4)
	br label %null

null:   			; preds = %5
	ret %struct.IO* %4
}

%struct.Object = type {
	%struct.ObjectVTable*
}

%struct.ObjectVTable = type {
}

@ObjectVTable_inst = global %struct.ObjectVTable{
}

define void @ObjectInit(%struct.Object* %self){
	%1 = getelementptr inbounds %struct.Object* %self, i32 0, i32 0
	store %struct.ObjectVTable* @ObjectVTable_inst, %struct.ObjectVTable** %1
	ret void
}

define %struct.Object* @ObjectNew(){
	%self = alloca %struct.Object*
	%1 = getelementptr %struct.Object* null, i32 1
	%size = ptrtoint %struct.Object* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.Object*
	store %struct.Object* %3, %struct.Object** %self
	%4 = load %struct.Object** %self
	%5 = icmp ne %struct.Object* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @ObjectInit(%struct.Object* %4)
	br label %null

null:   			; preds = %5
	ret %struct.Object* %4
}

define i32 @Main_main(%struct.Main* %self) #0 {
	%1 = alloca %struct.Main*
	store %struct.Main* %self, %struct.Main** %1
	%2 = alloca i32
	%3 = alloca %struct.IO*
	%4 = alloca i8*
	store i8* getelementptr inbounds ([23 x i8]* @.str0, i32 0, i32 0), i8** %4
; call
	%5 = load %struct.Main** %1
	%6 = getelementptr inbounds %struct.Main* %5, i32 0, i32 0
	%7 = load %struct.MainVTable** %6
	%8 = getelementptr inbounds %struct.MainVTable* %7, i32 0, i32 1
	%9 = load %struct.IO* (%struct.Main*, i8*)** %8
	%10 = load i8** %4
	%11 = call %struct.IO* %9(%struct.Main* %5, i8* %10)
	store %struct.IO* %11, %struct.IO** %3
	%12 = alloca %struct.IO*
	%13 = alloca i8*
	store i8* getelementptr inbounds ([15 x i8]* @.str1, i32 0, i32 0), i8** %13
; call
	%14 = load %struct.Main** %1
	%15 = getelementptr inbounds %struct.Main* %14, i32 0, i32 0
	%16 = load %struct.MainVTable** %15
	%17 = getelementptr inbounds %struct.MainVTable* %16, i32 0, i32 1
	%18 = load %struct.IO* (%struct.Main*, i8*)** %17
	%19 = load i8** %13
	%20 = call %struct.IO* %18(%struct.Main* %14, i8* %19)
	store %struct.IO* %20, %struct.IO** %12
	%21 = alloca %struct.IO*
	%22 = alloca i8*
	store i8* getelementptr inbounds ([19 x i8]* @.str2, i32 0, i32 0), i8** %22
; call
	%23 = load %struct.Main** %1
	%24 = getelementptr inbounds %struct.Main* %23, i32 0, i32 0
	%25 = load %struct.MainVTable** %24
	%26 = getelementptr inbounds %struct.MainVTable* %25, i32 0, i32 1
	%27 = load %struct.IO* (%struct.Main*, i8*)** %26
	%28 = load i8** %22
	%29 = call %struct.IO* %27(%struct.Main* %23, i8* %28)
	store %struct.IO* %29, %struct.IO** %21
	%30 = alloca %struct.IO*
	%31 = alloca i8*
	store i8* getelementptr inbounds ([21 x i8]* @.str3, i32 0, i32 0), i8** %31
; call
	%32 = load %struct.Main** %1
	%33 = getelementptr inbounds %struct.Main* %32, i32 0, i32 0
	%34 = load %struct.MainVTable** %33
	%35 = getelementptr inbounds %struct.MainVTable* %34, i32 0, i32 1
	%36 = load %struct.IO* (%struct.Main*, i8*)** %35
	%37 = load i8** %31
	%38 = call %struct.IO* %36(%struct.Main* %32, i8* %37)
	store %struct.IO* %38, %struct.IO** %30
	%39 = alloca %struct.IO*
	%40 = alloca i8*
	store i8* getelementptr inbounds ([15 x i8]* @.str4, i32 0, i32 0), i8** %40
; call
	%41 = load %struct.Main** %1
	%42 = getelementptr inbounds %struct.Main* %41, i32 0, i32 0
	%43 = load %struct.MainVTable** %42
	%44 = getelementptr inbounds %struct.MainVTable* %43, i32 0, i32 1
	%45 = load %struct.IO* (%struct.Main*, i8*)** %44
	%46 = load i8** %40
	%47 = call %struct.IO* %45(%struct.Main* %41, i8* %46)
	store %struct.IO* %47, %struct.IO** %39
	%48 = alloca %struct.IO*
	%49 = alloca i8*
	store i8* getelementptr inbounds ([12 x i8]* @.str5, i32 0, i32 0), i8** %49
; call
	%50 = load %struct.Main** %1
	%51 = getelementptr inbounds %struct.Main* %50, i32 0, i32 0
	%52 = load %struct.MainVTable** %51
	%53 = getelementptr inbounds %struct.MainVTable* %52, i32 0, i32 1
	%54 = load %struct.IO* (%struct.Main*, i8*)** %53
	%55 = load i8** %49
	%56 = call %struct.IO* %54(%struct.Main* %50, i8* %55)
	store %struct.IO* %56, %struct.IO** %48
	%57 = alloca %struct.IO*
	%58 = alloca i8*
	store i8* getelementptr inbounds ([13 x i8]* @.str6, i32 0, i32 0), i8** %58
; call
	%59 = load %struct.Main** %1
	%60 = getelementptr inbounds %struct.Main* %59, i32 0, i32 0
	%61 = load %struct.MainVTable** %60
	%62 = getelementptr inbounds %struct.MainVTable* %61, i32 0, i32 1
	%63 = load %struct.IO* (%struct.Main*, i8*)** %62
	%64 = load i8** %58
	%65 = call %struct.IO* %63(%struct.Main* %59, i8* %64)
	store %struct.IO* %65, %struct.IO** %57
	%66 = alloca %struct.IO*
	%67 = alloca i8*
	store i8* getelementptr inbounds ([10 x i8]* @.str7, i32 0, i32 0), i8** %67
; call
	%68 = load %struct.Main** %1
	%69 = getelementptr inbounds %struct.Main* %68, i32 0, i32 0
	%70 = load %struct.MainVTable** %69
	%71 = getelementptr inbounds %struct.MainVTable* %70, i32 0, i32 1
	%72 = load %struct.IO* (%struct.Main*, i8*)** %71
	%73 = load i8** %67
	%74 = call %struct.IO* %72(%struct.Main* %68, i8* %73)
	store %struct.IO* %74, %struct.IO** %66
	%75 = alloca %struct.IO*
	; let
	%76 = alloca i8*
	%77 = alloca i8*
; call
	%78 = load %struct.Main** %1
	%79 = getelementptr inbounds %struct.Main* %78, i32 0, i32 0
	%80 = load %struct.MainVTable** %79
	%81 = getelementptr inbounds %struct.MainVTable* %80, i32 0, i32 5
	%82 = load i8* (%struct.Main*)** %81
	%83 = call i8* %82(%struct.Main* %78)
	store i8* %83, i8** %77
	%84 = load i8** %77
	store i8* %84, i8** %76
	%85 = alloca %struct.IO*
	%86 = alloca %struct.Calculator*
	; assignement
	%87 = alloca %struct.Calculator*
	%88 = alloca %struct.Calculator*
	; condition
	%89 = alloca i1
	; binary operation
	%90 = alloca i8*
	%91 = load i8** %76
	store i8* %91, i8** %90
	%92 = alloca i8*
	store i8* getelementptr inbounds ([2 x i8]* @.str8, i32 0, i32 0), i8** %92
	%93 = load i8** %90
	%94 = load i8** %92
	%95 = call i32 @strcmp(i8* %93, i8* %94)
	%96 = icmp eq i32 0, %95
	store i1 %96, i1* %89
	%97 = load i1* %89
	br i1 %97, label %then_97, label %else_97
	
then_97:
		%98 = alloca %struct.Addition*
		; new
		%99 = call %struct.Addition* @AdditionNew()
		store %struct.Addition* %99, %struct.Addition** %98
;avant bitcast
		%100 = load %struct.Addition** %98
		%101 = bitcast %struct.Addition* %100 to %struct.Calculator*
		store %struct.Calculator* %101, %struct.Calculator** %88
		br label %end_97
	
else_97:
		%102 = alloca %struct.Calculator*
		%103 = alloca %struct.Calculator*
		; condition
		%104 = alloca i1
		; binary operation
		%105 = alloca i8*
		%106 = load i8** %76
		store i8* %106, i8** %105
		%107 = alloca i8*
		store i8* getelementptr inbounds ([2 x i8]* @.str9, i32 0, i32 0), i8** %107
		%108 = load i8** %105
		%109 = load i8** %107
		%110 = call i32 @strcmp(i8* %108, i8* %109)
		%111 = icmp eq i32 0, %110
		store i1 %111, i1* %104
		%112 = load i1* %104
		br i1 %112, label %then_112, label %else_112
		
then_112:
			%113 = alloca %struct.Substraction*
			; new
			%114 = call %struct.Substraction* @SubstractionNew()
			store %struct.Substraction* %114, %struct.Substraction** %113
;avant bitcast
			%115 = load %struct.Substraction** %113
			%116 = bitcast %struct.Substraction* %115 to %struct.Calculator*
			store %struct.Calculator* %116, %struct.Calculator** %103
			br label %end_112
		
else_112:
			%117 = alloca %struct.Division*
			; new
			%118 = call %struct.Division* @DivisionNew()
			store %struct.Division* %118, %struct.Division** %117
			%119 = load %struct.Division** %117
			%120 = bitcast %struct.Division* %119 to %struct.Calculator*
			store %struct.Calculator* %120, %struct.Calculator** %103
			br label %end_112
		
end_112:
		%121 = load %struct.Calculator** %103
		store %struct.Calculator* %121, %struct.Calculator** %102
		%122 = load %struct.Calculator** %102
		store %struct.Calculator* %122, %struct.Calculator** %88
		br label %end_97
	
end_97:
	%123 = load %struct.Calculator** %88
	store %struct.Calculator* %123, %struct.Calculator** %87
	%124 = load %struct.Calculator** %87
;field
	%125 = load %struct.Main** %1
	%126 = getelementptr inbounds %struct.Main* %125, i32 0, i32 1
	store %struct.Calculator* %124, %struct.Calculator** %126
	store %struct.Calculator* %124, %struct.Calculator** %86
	%127 = alloca %struct.IO*
	; let
	%128 = alloca i32
	store i32 0, i32* %128
	%129 = alloca %struct.IO*
	%130 = alloca %struct.IO*
	%131 = alloca i8*
	store i8* getelementptr inbounds ([23 x i8]* @.str10, i32 0, i32 0), i8** %131
; call
	%132 = load %struct.Main** %1
	%133 = getelementptr inbounds %struct.Main* %132, i32 0, i32 0
	%134 = load %struct.MainVTable** %133
	%135 = getelementptr inbounds %struct.MainVTable* %134, i32 0, i32 1
	%136 = load %struct.IO* (%struct.Main*, i8*)** %135
	%137 = load i8** %131
	%138 = call %struct.IO* %136(%struct.Main* %132, i8* %137)
	store %struct.IO* %138, %struct.IO** %130
	%139 = alloca i32
	; assignement
	%140 = alloca i32
; call
	%141 = load %struct.Main** %1
	%142 = getelementptr inbounds %struct.Main* %141, i32 0, i32 0
	%143 = load %struct.MainVTable** %142
	%144 = getelementptr inbounds %struct.MainVTable* %143, i32 0, i32 0
	%145 = load i32 (%struct.Main*)** %144
	%146 = call i32 %145(%struct.Main* %141)
	store i32 %146, i32* %140
	%147 = load i32* %140
	store i32 %147, i32* %128
	store i32 %147, i32* %139
	%148 = alloca %struct.IO*
	; let
	%149 = alloca i32
	store i32 0, i32* %149
	%150 = alloca %struct.IO*
	%151 = alloca %struct.IO*
	%152 = alloca i8*
	store i8* getelementptr inbounds ([24 x i8]* @.str11, i32 0, i32 0), i8** %152
; call
	%153 = load %struct.Main** %1
	%154 = getelementptr inbounds %struct.Main* %153, i32 0, i32 0
	%155 = load %struct.MainVTable** %154
	%156 = getelementptr inbounds %struct.MainVTable* %155, i32 0, i32 1
	%157 = load %struct.IO* (%struct.Main*, i8*)** %156
	%158 = load i8** %152
	%159 = call %struct.IO* %157(%struct.Main* %153, i8* %158)
	store %struct.IO* %159, %struct.IO** %151
	%160 = alloca i32
	; assignement
	%161 = alloca i32
; call
	%162 = load %struct.Main** %1
	%163 = getelementptr inbounds %struct.Main* %162, i32 0, i32 0
	%164 = load %struct.MainVTable** %163
	%165 = getelementptr inbounds %struct.MainVTable* %164, i32 0, i32 0
	%166 = load i32 (%struct.Main*)** %165
	%167 = call i32 %166(%struct.Main* %162)
	store i32 %167, i32* %161
	%168 = load i32* %161
	store i32 %168, i32* %149
	store i32 %168, i32* %160
	%169 = alloca %struct.IO*
	%170 = alloca i8*
	store i8* getelementptr inbounds ([2 x i8]* @.str12, i32 0, i32 0), i8** %170
	%171 = alloca %struct.IO*
	%172 = alloca i32
	%173 = alloca i32
	%174 = load i32* %128
	store i32 %174, i32* %173
	%175 = alloca i32
	%176 = load i32* %149
	store i32 %176, i32* %175
	%177 = alloca %struct.Calculator*
	%178 = load %struct.Main** %1
	%179 = getelementptr inbounds %struct.Main* %178, i32 0, i32 1
	%180 = load %struct.Calculator** %179
	store %struct.Calculator* %180, %struct.Calculator** %177
; call
	%181 = load %struct.Calculator** %177
	%182 = getelementptr inbounds %struct.Calculator* %181, i32 0, i32 0
	%183 = load %struct.CalculatorVTable** %182
	%184 = getelementptr inbounds %struct.CalculatorVTable* %183, i32 0, i32 0
	%185 = load i32 (%struct.Calculator*, i32, i32)** %184
	%186 = load i32* %173
	%187 = load i32* %175
	%188 = call i32 %185(%struct.Calculator* %181, i32 %186, i32 %187)
	store i32 %188, i32* %172
	%189 = alloca %struct.IO*
	%190 = alloca i8*
	store i8* getelementptr inbounds ([10 x i8]* @.str13, i32 0, i32 0), i8** %190
; call
	%191 = load %struct.Main** %1
	%192 = getelementptr inbounds %struct.Main* %191, i32 0, i32 0
	%193 = load %struct.MainVTable** %192
	%194 = getelementptr inbounds %struct.MainVTable* %193, i32 0, i32 1
	%195 = load %struct.IO* (%struct.Main*, i8*)** %194
	%196 = load i8** %190
	%197 = call %struct.IO* %195(%struct.Main* %191, i8* %196)
	store %struct.IO* %197, %struct.IO** %189
; call
	%198 = load %struct.IO** %189
	%199 = getelementptr inbounds %struct.IO* %198, i32 0, i32 0
	%200 = load %struct.IOVTable** %199
	%201 = getelementptr inbounds %struct.IOVTable* %200, i32 0, i32 3
	%202 = load %struct.IO* (%struct.IO*, i32)** %201
	%203 = load i32* %172
	%204 = call %struct.IO* %202(%struct.IO* %198, i32 %203)
	store %struct.IO* %204, %struct.IO** %171
; call
	%205 = load %struct.IO** %171
	%206 = getelementptr inbounds %struct.IO* %205, i32 0, i32 0
	%207 = load %struct.IOVTable** %206
	%208 = getelementptr inbounds %struct.IOVTable* %207, i32 0, i32 1
	%209 = load %struct.IO* (%struct.IO*, i8*)** %208
	%210 = load i8** %170
	%211 = call %struct.IO* %209(%struct.IO* %205, i8* %210)
	store %struct.IO* %211, %struct.IO** %169
	%212 = load %struct.IO** %169
	store %struct.IO* %212, %struct.IO** %150
	%213 = load %struct.IO** %150
	store %struct.IO* %213, %struct.IO** %148
	%214 = load %struct.IO** %148
	store %struct.IO* %214, %struct.IO** %129
	%215 = load %struct.IO** %129
	store %struct.IO* %215, %struct.IO** %127
	%216 = load %struct.IO** %127
	store %struct.IO* %216, %struct.IO** %85
	%217 = load %struct.IO** %85
	store %struct.IO* %217, %struct.IO** %75
	%218 = alloca i32
	store i32 0, i32* %218
	%219 = load i32* %218
	store i32 %219, i32* %2
	%220 = load i32* %2
	ret i32 %220
}

define i32 @Power_operate(%struct.Power* %self, i32 %t1, i32 %t2) #0 {
	%1 = alloca %struct.Power*
	store %struct.Power* %self, %struct.Power** %1
	%2 = alloca i32
	store i32 %t1, i32* %2
	%3 = alloca i32
	store i32 %t2, i32* %3
	%4 = alloca i32
	%5 = alloca i32
	; binary operation
	%6 = alloca i32
	%7 = load i32* %2
	store i32 %7, i32* %6
	%8 = alloca i32
	%9 = load i32* %3
	store i32 %9, i32* %8
	%10 = load i32* %6
	%11 = load i32* %8
	%12 = sitofp i32 %10 to float
	%13 = call float @llvm.powi.f32(float %12, i32 %11)
	%14 = fptosi float %13 to i32
	store i32 %14, i32* %5
	%15 = load i32* %5
	store i32 %15, i32* %4
	%16 = load i32* %4
	ret i32 %16
}

define i32 @Modulo_operate(%struct.Modulo* %self, i32 %t1, i32 %t2) #0 {
	%1 = alloca %struct.Modulo*
	store %struct.Modulo* %self, %struct.Modulo** %1
	%2 = alloca i32
	store i32 %t1, i32* %2
	%3 = alloca i32
	store i32 %t2, i32* %3
	%4 = alloca i32
	%5 = alloca i32
	; condition
	%6 = alloca i1
	; binary operation
	%7 = alloca i32
	%8 = load i32* %3
	store i32 %8, i32* %7
	%9 = alloca i32
	%10 = load i32* %2
	store i32 %10, i32* %9
	%11 = load i32* %7
	%12 = load i32* %9
	%13 = icmp slt i32 %11, %12
	store i1 %13, i1* %6
	%14 = load i1* %6
	br i1 %14, label %then_14, label %else_14
	
then_14:
		%15 = alloca i32
		%16 = alloca i32
		; binary operation
		%17 = alloca i32
		%18 = load i32* %2
		store i32 %18, i32* %17
		%19 = alloca i32
		%20 = load i32* %3
		store i32 %20, i32* %19
		%21 = load i32* %17
		%22 = load i32* %19
		%23 = sub i32 %21, %22
		store i32 %23, i32* %16
		%24 = alloca i32
		%25 = load i32* %3
		store i32 %25, i32* %24
; call
		%26 = load %struct.Modulo** %1
		%27 = getelementptr inbounds %struct.Modulo* %26, i32 0, i32 0
		%28 = load %struct.ModuloVTable** %27
		%29 = getelementptr inbounds %struct.ModuloVTable* %28, i32 0, i32 0
		%30 = load i32 (%struct.Modulo*, i32, i32)** %29
		%31 = load i32* %16
		%32 = load i32* %24
		%33 = call i32 %30(%struct.Modulo* %26, i32 %31, i32 %32)
		store i32 %33, i32* %15
;avant bitcast
		%34 = load i32* %15
		store i32 %34, i32* %5
		br label %end_14
	
else_14:
		%35 = alloca i32
		%36 = load i32* %2
		store i32 %36, i32* %35
		%37 = load i32* %35
		store i32 %37, i32* %5
		br label %end_14
	
end_14:
	%38 = load i32* %5
	store i32 %38, i32* %4
	%39 = load i32* %4
	ret i32 %39
}

define i32 @Division_operate(%struct.Division* %self, i32 %t1, i32 %t2) #0 {
	%1 = alloca %struct.Division*
	store %struct.Division* %self, %struct.Division** %1
	%2 = alloca i32
	store i32 %t1, i32* %2
	%3 = alloca i32
	store i32 %t2, i32* %3
	%4 = alloca i32
	%5 = alloca i32
	; binary operation
	%6 = alloca i32
	%7 = load i32* %2
	store i32 %7, i32* %6
	%8 = alloca i32
	%9 = load i32* %3
	store i32 %9, i32* %8
	%10 = load i32* %6
	%11 = load i32* %8
	%12 = sub i32 %10, %11
	store i32 %12, i32* %5
	%13 = load i32* %5
	store i32 %13, i32* %4
	%14 = load i32* %4
	ret i32 %14
}

define i32 @Calculator_operate(%struct.Calculator* %self, i32 %t1, i32 %t2) #0 {
	%1 = alloca %struct.Calculator*
	store %struct.Calculator* %self, %struct.Calculator** %1
	%2 = alloca i32
	store i32 %t1, i32* %2
	%3 = alloca i32
	store i32 %t2, i32* %3
	%4 = alloca i32
	%5 = alloca i32
	store i32 0, i32* %5
	%6 = load i32* %5
	store i32 %6, i32* %4
	%7 = load i32* %4
	ret i32 %7
}

define i32 @Addition_operate(%struct.Addition* %self, i32 %t1, i32 %t2) #0 {
	%1 = alloca %struct.Addition*
	store %struct.Addition* %self, %struct.Addition** %1
	%2 = alloca i32
	store i32 %t1, i32* %2
	%3 = alloca i32
	store i32 %t2, i32* %3
	%4 = alloca i32
	%5 = alloca i32
	; binary operation
	%6 = alloca i32
	%7 = load i32* %2
	store i32 %7, i32* %6
	%8 = alloca i32
	%9 = load i32* %3
	store i32 %9, i32* %8
	%10 = load i32* %6
	%11 = load i32* %8
	%12 = add nuw i32 %10, %11
	store i32 %12, i32* %5
	%13 = load i32* %5
	store i32 %13, i32* %4
	%14 = load i32* %4
	ret i32 %14
}

define %struct.IO* @IO_print(%struct.IO* %self, i8* %s) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i8*
	store i8* %s, i8** %2
	%3 = alloca %struct.IO*
	%4 = alloca %struct.IO*
	%5 = alloca i8*
	%6 = load i8** %2
	store i8* %6, i8** %5
;call
	%7 = load i8** %5
call void @print(i8* %7)
	%8 = alloca %struct.IO*
	%9 = load %struct.IO** %1
	store %struct.IO* %9, %struct.IO** %8
	%10 = load %struct.IO** %8
	store %struct.IO* %10, %struct.IO** %3
	%11 = load %struct.IO** %3
	ret %struct.IO* %11
}

define %struct.IO* @IO_printBool(%struct.IO* %self, i1 %b) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i1
	store i1 %b, i1* %2
	%3 = alloca %struct.IO*
	%4 = alloca %struct.IO*
	%5 = alloca i1
	%6 = load i1* %2
	store i1 %6, i1* %5
;call
	%7 = load i1* %5
call void @printBool(i1 %7)
	%8 = alloca %struct.IO*
	%9 = load %struct.IO** %1
	store %struct.IO* %9, %struct.IO** %8
	%10 = load %struct.IO** %8
	store %struct.IO* %10, %struct.IO** %3
	%11 = load %struct.IO** %3
	ret %struct.IO* %11
}

define %struct.IO* @IO_printInt32(%struct.IO* %self, i32 %i) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i32
	store i32 %i, i32* %2
	%3 = alloca %struct.IO*
	%4 = alloca %struct.IO*
	%5 = alloca i32
	%6 = load i32* %2
	store i32 %6, i32* %5
;call
	%7 = load i32* %5
call void @printInt32(i32 %7)
	%8 = alloca %struct.IO*
	%9 = load %struct.IO** %1
	store %struct.IO* %9, %struct.IO** %8
	%10 = load %struct.IO** %8
	store %struct.IO* %10, %struct.IO** %3
	%11 = load %struct.IO** %3
	ret %struct.IO* %11
}

define i8* @IO_inputLine(%struct.IO* %self) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i8*
	%3 = alloca i8*
;call
	%4 = call i8* @inputLine()
	store i8* %4, i8** %3
	%5 = load i8** %3
	store i8* %5, i8** %2
	%6 = load i8** %2
	ret i8* %6
}

define i1 @IO_inputBool(%struct.IO* %self) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i1
	%3 = alloca i1
;call
	%4 = call i1 @inputBool()
	store i1 %4, i1* %3
	%5 = load i1* %3
	store i1 %5, i1* %2
	%6 = load i1* %2
	ret i1 %6
}

define i32 @IO_inputInt32(%struct.IO* %self) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i32
	%3 = alloca i32
;call
	%4 = call i32 @inputInt32()
	store i32 %4, i32* %3
	%5 = load i32* %3
	store i32 %5, i32* %2
	%6 = load i32* %2
	ret i32 %6
}

define i32 @Substraction_operate(%struct.Substraction* %self, i32 %t1, i32 %t2) #0 {
	%1 = alloca %struct.Substraction*
	store %struct.Substraction* %self, %struct.Substraction** %1
	%2 = alloca i32
	store i32 %t1, i32* %2
	%3 = alloca i32
	store i32 %t2, i32* %3
	%4 = alloca i32
	%5 = alloca i32
	; binary operation
	%6 = alloca i32
	%7 = load i32* %2
	store i32 %7, i32* %6
	%8 = alloca i32
	%9 = load i32* %3
	store i32 %9, i32* %8
	%10 = load i32* %6
	%11 = load i32* %8
	%12 = sub i32 %10, %11
	store i32 %12, i32* %5
	%13 = load i32* %5
	store i32 %13, i32* %4
	%14 = load i32* %4
	ret i32 %14
}

define i32 @Multiplication_operate(%struct.Multiplication* %self, i32 %t1, i32 %t2) #0 {
	%1 = alloca %struct.Multiplication*
	store %struct.Multiplication* %self, %struct.Multiplication** %1
	%2 = alloca i32
	store i32 %t1, i32* %2
	%3 = alloca i32
	store i32 %t2, i32* %3
	%4 = alloca i32
	%5 = alloca i32
	; binary operation
	%6 = alloca i32
	%7 = load i32* %2
	store i32 %7, i32* %6
	%8 = alloca i32
	%9 = load i32* %3
	store i32 %9, i32* %8
	%10 = load i32* %6
	%11 = load i32* %8
	%12 = sub i32 %10, %11
	store i32 %12, i32* %5
	%13 = load i32* %5
	store i32 %13, i32* %4
	%14 = load i32* %4
	ret i32 %14
}

define i32 @main(){
	%1 = call %struct.Main* @MainNew()
	%2 = getelementptr inbounds %struct.Main* %1, i32 0, i32 0
	%3 = load %struct.MainVTable** %2
	%4 = getelementptr inbounds %struct.MainVTable* %3, i32 0, i32 6
	%5 = load i32 (%struct.Main*)** %4
	%6 = call i32 %5(%struct.Main* %1)
	ret i32 %6
}
