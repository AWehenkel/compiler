declare i1 @inputBool()
declare i32 @inputInt32()
declare i8* @inputLine()
declare void @print(i8*)
declare void @printInt32(i32)
declare void @printBool(i1)
declare i32 @strcmp(i8*, i8*)
declare float @llvm.powi.f32(float, i32)

@.str_empty = private unnamed_addr constant [1 x i8] c"\00", align 1
@.str0 = private unnamed_addr constant [4 x i8] c"OK\0a\00", align 1
@.str1 = private unnamed_addr constant [4 x i8] c"OK\0a\00", align 1
@.str2 = private unnamed_addr constant [4 x i8] c"OK\0a\00", align 1
@.str3 = private unnamed_addr constant [4 x i8] c"KO\0a\00", align 1
@.str4 = private unnamed_addr constant [4 x i8] c"OK\0a\00", align 1
@.str5 = private unnamed_addr constant [4 x i8] c"OK\0a\00", align 1
@.str6 = private unnamed_addr constant [4 x i8] c"KO\0a\00", align 1
@.str7 = private unnamed_addr constant [4 x i8] c"OK\0a\00", align 1
@.str8 = private unnamed_addr constant [4 x i8] c"OK\0a\00", align 1
@.str9 = private unnamed_addr constant [4 x i8] c"KO\0a\00", align 1
@.str10 = private unnamed_addr constant [4 x i8] c"KO\0a\00", align 1
@.str11 = private unnamed_addr constant [4 x i8] c"OK\0a\00", align 1
declare noalias i8* @malloc(i32)

%struct.Main = type {
	%struct.MainVTable*
}

%struct.MainVTable = type {
	i32 (%struct.Main*)*,
	%struct.IO* (%struct.Main*, i8*)*,
	%struct.IO* (%struct.Main*, i1)*,
	%struct.IO* (%struct.Main*, i32)*,
	i1 (%struct.Main*)*,
	i8* (%struct.Main*)*,
	i32 (%struct.Main*)*
}

@MainVTable_inst = global %struct.MainVTable{
	i32 (%struct.Main*)* bitcast (i32 (%struct.IO*)* @IO_inputInt32 to i32 (%struct.Main*)*),
	%struct.IO* (%struct.Main*, i8*)* bitcast (%struct.IO* (%struct.IO*, i8*)* @IO_print to %struct.IO* (%struct.Main*, i8*)*),
	%struct.IO* (%struct.Main*, i1)* bitcast (%struct.IO* (%struct.IO*, i1)* @IO_printBool to %struct.IO* (%struct.Main*, i1)*),
	%struct.IO* (%struct.Main*, i32)* bitcast (%struct.IO* (%struct.IO*, i32)* @IO_printInt32 to %struct.IO* (%struct.Main*, i32)*),
	i1 (%struct.Main*)* bitcast (i1 (%struct.IO*)* @IO_inputBool to i1 (%struct.Main*)*),
	i8* (%struct.Main*)* bitcast (i8* (%struct.IO*)* @IO_inputLine to i8* (%struct.Main*)*),
	i32 (%struct.Main*)* @Main_main
}

define void @MainInit(%struct.Main* %self){
	%1 = bitcast %struct.Main* %self to %struct.IO*
	call void @IOInit(%struct.IO* %1)
	%2 = getelementptr inbounds %struct.Main* %self, i32 0, i32 0
	store %struct.MainVTable* @MainVTable_inst, %struct.MainVTable** %2
	ret void
}

define %struct.Main* @MainNew(){
	%self = alloca %struct.Main*
	%1 = getelementptr %struct.Main* null, i32 1
	%size = ptrtoint %struct.Main* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.Main*
	store %struct.Main* %3, %struct.Main** %self
	%4 = load %struct.Main** %self
	%5 = icmp ne %struct.Main* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @MainInit(%struct.Main* %4)
	br label %null

null:   			; preds = %5
	ret %struct.Main* %4
}

%struct.IO = type {
	%struct.IOVTable*
}

%struct.IOVTable = type {
	i32 (%struct.IO*)*,
	%struct.IO* (%struct.IO*, i8*)*,
	%struct.IO* (%struct.IO*, i1)*,
	%struct.IO* (%struct.IO*, i32)*,
	i1 (%struct.IO*)*,
	i8* (%struct.IO*)*
}

@IOVTable_inst = global %struct.IOVTable{
	i32 (%struct.IO*)* @IO_inputInt32,
	%struct.IO* (%struct.IO*, i8*)* @IO_print,
	%struct.IO* (%struct.IO*, i1)* @IO_printBool,
	%struct.IO* (%struct.IO*, i32)* @IO_printInt32,
	i1 (%struct.IO*)* @IO_inputBool,
	i8* (%struct.IO*)* @IO_inputLine
}

define void @IOInit(%struct.IO* %self){
	%1 = bitcast %struct.IO* %self to %struct.Object*
	call void @ObjectInit(%struct.Object* %1)
	%2 = getelementptr inbounds %struct.IO* %self, i32 0, i32 0
	store %struct.IOVTable* @IOVTable_inst, %struct.IOVTable** %2
	ret void
}

define %struct.IO* @IONew(){
	%self = alloca %struct.IO*
	%1 = getelementptr %struct.IO* null, i32 1
	%size = ptrtoint %struct.IO* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.IO*
	store %struct.IO* %3, %struct.IO** %self
	%4 = load %struct.IO** %self
	%5 = icmp ne %struct.IO* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @IOInit(%struct.IO* %4)
	br label %null

null:   			; preds = %5
	ret %struct.IO* %4
}

%struct.Object = type {
	%struct.ObjectVTable*
}

%struct.ObjectVTable = type {
}

@ObjectVTable_inst = global %struct.ObjectVTable{
}

define void @ObjectInit(%struct.Object* %self){
	%1 = getelementptr inbounds %struct.Object* %self, i32 0, i32 0
	store %struct.ObjectVTable* @ObjectVTable_inst, %struct.ObjectVTable** %1
	ret void
}

define %struct.Object* @ObjectNew(){
	%self = alloca %struct.Object*
	%1 = getelementptr %struct.Object* null, i32 1
	%size = ptrtoint %struct.Object* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.Object*
	store %struct.Object* %3, %struct.Object** %self
	%4 = load %struct.Object** %self
	%5 = icmp ne %struct.Object* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @ObjectInit(%struct.Object* %4)
	br label %null

null:   			; preds = %5
	ret %struct.Object* %4
}

define %struct.IO* @IO_print(%struct.IO* %self, i8* %s) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i8*
	store i8* %s, i8** %2
	%3 = alloca %struct.IO*
	%4 = alloca %struct.IO*
	%5 = alloca i8*
	%6 = load i8** %2
	store i8* %6, i8** %5
;call
	%7 = load i8** %5
call void @print(i8* %7)
	%8 = alloca %struct.IO*
	%9 = load %struct.IO** %1
	store %struct.IO* %9, %struct.IO** %8
	%10 = load %struct.IO** %8
	store %struct.IO* %10, %struct.IO** %3
	%11 = load %struct.IO** %3
	ret %struct.IO* %11
}

define %struct.IO* @IO_printBool(%struct.IO* %self, i1 %b) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i1
	store i1 %b, i1* %2
	%3 = alloca %struct.IO*
	%4 = alloca %struct.IO*
	%5 = alloca i1
	%6 = load i1* %2
	store i1 %6, i1* %5
;call
	%7 = load i1* %5
call void @printBool(i1 %7)
	%8 = alloca %struct.IO*
	%9 = load %struct.IO** %1
	store %struct.IO* %9, %struct.IO** %8
	%10 = load %struct.IO** %8
	store %struct.IO* %10, %struct.IO** %3
	%11 = load %struct.IO** %3
	ret %struct.IO* %11
}

define %struct.IO* @IO_printInt32(%struct.IO* %self, i32 %i) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i32
	store i32 %i, i32* %2
	%3 = alloca %struct.IO*
	%4 = alloca %struct.IO*
	%5 = alloca i32
	%6 = load i32* %2
	store i32 %6, i32* %5
;call
	%7 = load i32* %5
call void @printInt32(i32 %7)
	%8 = alloca %struct.IO*
	%9 = load %struct.IO** %1
	store %struct.IO* %9, %struct.IO** %8
	%10 = load %struct.IO** %8
	store %struct.IO* %10, %struct.IO** %3
	%11 = load %struct.IO** %3
	ret %struct.IO* %11
}

define i8* @IO_inputLine(%struct.IO* %self) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i8*
	%3 = alloca i8*
;call
	%4 = call i8* @inputLine()
	store i8* %4, i8** %3
	%5 = load i8** %3
	store i8* %5, i8** %2
	%6 = load i8** %2
	ret i8* %6
}

define i1 @IO_inputBool(%struct.IO* %self) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i1
	%3 = alloca i1
;call
	%4 = call i1 @inputBool()
	store i1 %4, i1* %3
	%5 = load i1* %3
	store i1 %5, i1* %2
	%6 = load i1* %2
	ret i1 %6
}

define i32 @IO_inputInt32(%struct.IO* %self) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i32
	%3 = alloca i32
;call
	%4 = call i32 @inputInt32()
	store i32 %4, i32* %3
	%5 = load i32* %3
	store i32 %5, i32* %2
	%6 = load i32* %2
	ret i32 %6
}

define i32 @Main_main(%struct.Main* %self) #0 {
	%1 = alloca %struct.Main*
	store %struct.Main* %self, %struct.Main** %1
	%2 = alloca i32
	%3 = alloca %struct.IO*
	; condition
	%4 = alloca i1
	; binary operation
; blabla	; condition
	%5 = alloca i1
	%6 = alloca %struct.IO*
	%7 = alloca i8*
	store i8* getelementptr inbounds ([4 x i8]* @.str0, i32 0, i32 0), i8** %7
; call
	%8 = load %struct.Main** %1
	%9 = getelementptr inbounds %struct.Main* %8, i32 0, i32 0
	%10 = load %struct.MainVTable** %9
	%11 = getelementptr inbounds %struct.MainVTable* %10, i32 0, i32 1
	%12 = load %struct.IO* (%struct.Main*, i8*)** %11
	%13 = load i8** %7
	%14 = call %struct.IO* %12(%struct.Main* %8, i8* %13)
	store %struct.IO* %14, %struct.IO** %6
	%15 = alloca i1
	store i1 true, i1* %15
	%16 = load i1* %15
	store i1 %16, i1* %5
	%17 = load i1* %5
	br i1 %17, label %then_17, label %else_17
	
then_17:
		%18 = alloca i1
		%19 = alloca %struct.IO*
		%20 = alloca i8*
		store i8* getelementptr inbounds ([4 x i8]* @.str1, i32 0, i32 0), i8** %20
; call
		%21 = load %struct.Main** %1
		%22 = getelementptr inbounds %struct.Main* %21, i32 0, i32 0
		%23 = load %struct.MainVTable** %22
		%24 = getelementptr inbounds %struct.MainVTable* %23, i32 0, i32 1
		%25 = load %struct.IO* (%struct.Main*, i8*)** %24
		%26 = load i8** %20
		%27 = call %struct.IO* %25(%struct.Main* %21, i8* %26)
		store %struct.IO* %27, %struct.IO** %19
		%28 = alloca i1
		store i1 true, i1* %28
		%29 = load i1* %28
		store i1 %29, i1* %18
		%30 = load i1* %18
		store i1 %30, i1* %4
		br label %end_17
	
else_17:
		%31 = alloca i1
		store i1 false, i1* %31
		%32 = load i1* %31
		store i1 %32, i1* %4
		br label %end_17
	
end_17:
	%33 = load i1* %4
	br i1 %33, label %then_33, label %else_33
	
then_33:
		%34 = alloca %struct.IO*
		%35 = alloca i8*
		store i8* getelementptr inbounds ([4 x i8]* @.str2, i32 0, i32 0), i8** %35
; call
		%36 = load %struct.Main** %1
		%37 = getelementptr inbounds %struct.Main* %36, i32 0, i32 0
		%38 = load %struct.MainVTable** %37
		%39 = getelementptr inbounds %struct.MainVTable* %38, i32 0, i32 1
		%40 = load %struct.IO* (%struct.Main*, i8*)** %39
		%41 = load i8** %35
		%42 = call %struct.IO* %40(%struct.Main* %36, i8* %41)
		store %struct.IO* %42, %struct.IO** %34
		%43 = load %struct.IO** %34
		store %struct.IO* %43, %struct.IO** %3
		br label %end_33
	
else_33:
		%44 = alloca %struct.IO*
		%45 = alloca i8*
		store i8* getelementptr inbounds ([4 x i8]* @.str3, i32 0, i32 0), i8** %45
; call
		%46 = load %struct.Main** %1
		%47 = getelementptr inbounds %struct.Main* %46, i32 0, i32 0
		%48 = load %struct.MainVTable** %47
		%49 = getelementptr inbounds %struct.MainVTable* %48, i32 0, i32 1
		%50 = load %struct.IO* (%struct.Main*, i8*)** %49
		%51 = load i8** %45
		%52 = call %struct.IO* %50(%struct.Main* %46, i8* %51)
		store %struct.IO* %52, %struct.IO** %44
		%53 = load %struct.IO** %44
		store %struct.IO* %53, %struct.IO** %3
		br label %end_33
	
end_33:
	%54 = alloca %struct.IO*
	; condition
	%55 = alloca i1
	; binary operation
; blabla	; condition
	%56 = alloca i1
	%57 = alloca %struct.IO*
	%58 = alloca i8*
	store i8* getelementptr inbounds ([4 x i8]* @.str4, i32 0, i32 0), i8** %58
; call
	%59 = load %struct.Main** %1
	%60 = getelementptr inbounds %struct.Main* %59, i32 0, i32 0
	%61 = load %struct.MainVTable** %60
	%62 = getelementptr inbounds %struct.MainVTable* %61, i32 0, i32 1
	%63 = load %struct.IO* (%struct.Main*, i8*)** %62
	%64 = load i8** %58
	%65 = call %struct.IO* %63(%struct.Main* %59, i8* %64)
	store %struct.IO* %65, %struct.IO** %57
	%66 = alloca i1
	store i1 true, i1* %66
	%67 = load i1* %66
	store i1 %67, i1* %56
	%68 = load i1* %56
	br i1 %68, label %then_68, label %else_68
	
then_68:
		%69 = alloca i1
		%70 = alloca %struct.IO*
		%71 = alloca i8*
		store i8* getelementptr inbounds ([4 x i8]* @.str5, i32 0, i32 0), i8** %71
; call
		%72 = load %struct.Main** %1
		%73 = getelementptr inbounds %struct.Main* %72, i32 0, i32 0
		%74 = load %struct.MainVTable** %73
		%75 = getelementptr inbounds %struct.MainVTable* %74, i32 0, i32 1
		%76 = load %struct.IO* (%struct.Main*, i8*)** %75
		%77 = load i8** %71
		%78 = call %struct.IO* %76(%struct.Main* %72, i8* %77)
		store %struct.IO* %78, %struct.IO** %70
		%79 = alloca i1
		store i1 false, i1* %79
		%80 = load i1* %79
		store i1 %80, i1* %69
		%81 = load i1* %69
		store i1 %81, i1* %55
		br label %end_68
	
else_68:
		%82 = alloca i1
		store i1 false, i1* %82
		%83 = load i1* %82
		store i1 %83, i1* %55
		br label %end_68
	
end_68:
	%84 = load i1* %55
	br i1 %84, label %then_84, label %else_84
	
then_84:
		%85 = alloca %struct.IO*
		%86 = alloca i8*
		store i8* getelementptr inbounds ([4 x i8]* @.str6, i32 0, i32 0), i8** %86
; call
		%87 = load %struct.Main** %1
		%88 = getelementptr inbounds %struct.Main* %87, i32 0, i32 0
		%89 = load %struct.MainVTable** %88
		%90 = getelementptr inbounds %struct.MainVTable* %89, i32 0, i32 1
		%91 = load %struct.IO* (%struct.Main*, i8*)** %90
		%92 = load i8** %86
		%93 = call %struct.IO* %91(%struct.Main* %87, i8* %92)
		store %struct.IO* %93, %struct.IO** %85
		%94 = load %struct.IO** %85
		store %struct.IO* %94, %struct.IO** %54
		br label %end_84
	
else_84:
		%95 = alloca %struct.IO*
		%96 = alloca i8*
		store i8* getelementptr inbounds ([4 x i8]* @.str7, i32 0, i32 0), i8** %96
; call
		%97 = load %struct.Main** %1
		%98 = getelementptr inbounds %struct.Main* %97, i32 0, i32 0
		%99 = load %struct.MainVTable** %98
		%100 = getelementptr inbounds %struct.MainVTable* %99, i32 0, i32 1
		%101 = load %struct.IO* (%struct.Main*, i8*)** %100
		%102 = load i8** %96
		%103 = call %struct.IO* %101(%struct.Main* %97, i8* %102)
		store %struct.IO* %103, %struct.IO** %95
		%104 = load %struct.IO** %95
		store %struct.IO* %104, %struct.IO** %54
		br label %end_84
	
end_84:
	%105 = alloca %struct.IO*
	; condition
	%106 = alloca i1
	; binary operation
; blabla	; condition
	%107 = alloca i1
	%108 = alloca %struct.IO*
	%109 = alloca i8*
	store i8* getelementptr inbounds ([4 x i8]* @.str8, i32 0, i32 0), i8** %109
; call
	%110 = load %struct.Main** %1
	%111 = getelementptr inbounds %struct.Main* %110, i32 0, i32 0
	%112 = load %struct.MainVTable** %111
	%113 = getelementptr inbounds %struct.MainVTable* %112, i32 0, i32 1
	%114 = load %struct.IO* (%struct.Main*, i8*)** %113
	%115 = load i8** %109
	%116 = call %struct.IO* %114(%struct.Main* %110, i8* %115)
	store %struct.IO* %116, %struct.IO** %108
	%117 = alloca i1
	store i1 false, i1* %117
	%118 = load i1* %117
	store i1 %118, i1* %107
	%119 = load i1* %107
	br i1 %119, label %then_119, label %else_119
	
then_119:
		%120 = alloca i1
		%121 = alloca %struct.IO*
		%122 = alloca i8*
		store i8* getelementptr inbounds ([4 x i8]* @.str9, i32 0, i32 0), i8** %122
; call
		%123 = load %struct.Main** %1
		%124 = getelementptr inbounds %struct.Main* %123, i32 0, i32 0
		%125 = load %struct.MainVTable** %124
		%126 = getelementptr inbounds %struct.MainVTable* %125, i32 0, i32 1
		%127 = load %struct.IO* (%struct.Main*, i8*)** %126
		%128 = load i8** %122
		%129 = call %struct.IO* %127(%struct.Main* %123, i8* %128)
		store %struct.IO* %129, %struct.IO** %121
		%130 = alloca i1
		store i1 true, i1* %130
		%131 = load i1* %130
		store i1 %131, i1* %120
		%132 = load i1* %120
		store i1 %132, i1* %106
		br label %end_119
	
else_119:
		%133 = alloca i1
		store i1 false, i1* %133
		%134 = load i1* %133
		store i1 %134, i1* %106
		br label %end_119
	
end_119:
	%135 = load i1* %106
	br i1 %135, label %then_135, label %else_135
	
then_135:
		%136 = alloca %struct.IO*
		%137 = alloca i8*
		store i8* getelementptr inbounds ([4 x i8]* @.str10, i32 0, i32 0), i8** %137
; call
		%138 = load %struct.Main** %1
		%139 = getelementptr inbounds %struct.Main* %138, i32 0, i32 0
		%140 = load %struct.MainVTable** %139
		%141 = getelementptr inbounds %struct.MainVTable* %140, i32 0, i32 1
		%142 = load %struct.IO* (%struct.Main*, i8*)** %141
		%143 = load i8** %137
		%144 = call %struct.IO* %142(%struct.Main* %138, i8* %143)
		store %struct.IO* %144, %struct.IO** %136
		%145 = load %struct.IO** %136
		store %struct.IO* %145, %struct.IO** %105
		br label %end_135
	
else_135:
		%146 = alloca %struct.IO*
		%147 = alloca i8*
		store i8* getelementptr inbounds ([4 x i8]* @.str11, i32 0, i32 0), i8** %147
; call
		%148 = load %struct.Main** %1
		%149 = getelementptr inbounds %struct.Main* %148, i32 0, i32 0
		%150 = load %struct.MainVTable** %149
		%151 = getelementptr inbounds %struct.MainVTable* %150, i32 0, i32 1
		%152 = load %struct.IO* (%struct.Main*, i8*)** %151
		%153 = load i8** %147
		%154 = call %struct.IO* %152(%struct.Main* %148, i8* %153)
		store %struct.IO* %154, %struct.IO** %146
		%155 = load %struct.IO** %146
		store %struct.IO* %155, %struct.IO** %105
		br label %end_135
	
end_135:
	%156 = alloca i32
	store i32 0, i32* %156
	%157 = load i32* %156
	store i32 %157, i32* %2
	%158 = load i32* %2
	ret i32 %158
}

define i32 @main(){
	%1 = call %struct.Main* @MainNew()
	%2 = getelementptr inbounds %struct.Main* %1, i32 0, i32 0
	%3 = load %struct.MainVTable** %2
	%4 = getelementptr inbounds %struct.MainVTable* %3, i32 0, i32 6
	%5 = load i32 (%struct.Main*)** %4
	%6 = call i32 %5(%struct.Main* %1)
	ret i32 %6
}
