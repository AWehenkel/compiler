Terminals unused in grammar

   T_ERROR


State 144 conflicts: 11 shift/reduce
State 146 conflicts: 10 shift/reduce
State 158 conflicts: 10 shift/reduce
State 162 conflicts: 10 shift/reduce


Grammar

    0 $accept: start $end

    1 start: START_LEXICAL Input
    2      | START_SYNTAX program

    3 Input: %empty
    4      | Input T_AND
    5      | Input T_BOOL
    6      | Input T_CLASS
    7      | Input T_DO
    8      | Input T_ELSE
    9      | Input T_EXTENDS
   10      | Input T_FALSE
   11      | Input T_IF
   12      | Input T_IN
   13      | Input T_INT32
   14      | Input T_ISNULL
   15      | Input T_LET
   16      | Input T_NEW
   17      | Input T_NOT
   18      | Input T_STRING
   19      | Input T_THEN
   20      | Input T_TRUE
   21      | Input T_UNIT
   22      | Input T_WHILE
   23      | Input T_OBJ_ID
   24      | Input T_INT_LIT
   25      | Input T_TYPE_ID
   26      | Input T_STRING_LIT
   27      | Input T_L_BRACE
   28      | Input T_R_BRACE
   29      | Input T_R_PAR
   30      | Input T_L_PAR
   31      | Input T_COLON
   32      | Input T_SEMI_COLON
   33      | Input T_COMMA
   34      | Input T_PLUS
   35      | Input T_MINUS
   36      | Input T_TIMES
   37      | Input T_DIV
   38      | Input T_POW
   39      | Input T_DOT
   40      | Input T_EQUAL
   41      | Input T_LOWER
   42      | Input T_LEQ
   43      | Input T_ASSIGN
   44      | Input T_COMMENTS

   45 program: class
   46        | program class

   47 class: T_CLASS T_TYPE_ID extend T_L_BRACE class-body T_R_BRACE

   48 extend: %empty
   49       | T_EXTENDS T_TYPE_ID

   50 class-body: %empty
   51           | class-body field
   52           | class-body method

   53 field: T_OBJ_ID T_COLON type assign T_SEMI_COLON

   54 assign: %empty
   55       | T_ASSIGN expr

   56 method: T_OBJ_ID T_L_PAR formals T_R_PAR T_COLON type block

   57 type: T_TYPE_ID
   58     | T_INT32
   59     | T_BOOL
   60     | T_STRING
   61     | T_UNIT

   62 formals: %empty
   63        | formal virgul-formals

   64 virgul-formals: %empty
   65               | T_COMMA formal virgul-formals

   66 formal: T_OBJ_ID T_COLON type

   67 block: T_L_BRACE expr sc-expr T_R_BRACE

   68 sc-expr: %empty
   69        | T_SEMI_COLON expr sc-expr

   70 expr: T_IF expr T_THEN expr
   71     | T_IF expr T_THEN expr T_ELSE expr
   72     | T_WHILE expr T_DO expr
   73     | T_LET T_OBJ_ID T_COLON type assign T_IN expr
   74     | T_OBJ_ID T_ASSIGN expr
   75     | T_NOT expr
   76     | T_MINUS expr
   77     | T_ISNULL expr
   78     | expr T_PLUS expr
   79     | expr T_AND expr
   80     | expr T_EQUAL expr
   81     | expr T_LEQ expr
   82     | expr T_LOWER expr
   83     | expr T_MINUS expr
   84     | expr T_TIMES expr
   85     | expr T_DIV expr
   86     | expr T_POW expr
   87     | T_OBJ_ID T_L_PAR args T_R_PAR
   88     | expr T_DOT T_OBJ_ID T_L_PAR args T_R_PAR
   89     | T_NEW T_TYPE_ID
   90     | T_OBJ_ID
   91     | literal
   92     | T_L_PAR T_R_PAR
   93     | T_L_PAR expr T_R_PAR
   94     | block

   95 args: %empty
   96     | expr comma-arg

   97 comma-arg: %empty
   98          | T_COMMA expr comma-arg

   99 literal: T_INT_LIT
  100        | T_STRING_LIT
  101        | boolean-literal

  102 boolean-literal: T_TRUE
  103                | T_FALSE


Terminals, with rules where they appear

$end (0) 0
error (256)
T_AND (258) 4 79
T_BOOL (259) 5 59
T_CLASS (260) 6 47
T_DO (261) 7 72
T_ELSE (262) 8 71
T_EXTENDS (263) 9 49
T_FALSE (264) 10 103
T_IF (265) 11 70 71
T_IN (266) 12 73
T_INT32 (267) 13 58
T_ISNULL (268) 14 77
T_LET (269) 15 73
T_NEW (270) 16 89
T_NOT (271) 17 75
T_STRING (272) 18 60
T_THEN (273) 19 70 71
T_TRUE (274) 20 102
T_UNIT (275) 21 61
T_WHILE (276) 22 72
T_OBJ_ID (277) 23 53 56 66 73 74 87 88 90
T_INT_LIT (278) 24 99
T_TYPE_ID (279) 25 47 49 57 89
T_STRING_LIT (280) 26 100
T_L_BRACE (281) 27 47 67
T_R_BRACE (282) 28 47 67
T_R_PAR (283) 29 56 87 88 92 93
T_L_PAR (284) 30 56 87 88 92 93
T_COLON (285) 31 53 56 66 73
T_SEMI_COLON (286) 32 53 69
T_COMMA (287) 33 65 98
T_PLUS (288) 34 78
T_MINUS (289) 35 76 83
T_TIMES (290) 36 84
T_DIV (291) 37 85
T_POW (292) 38 86
T_DOT (293) 39 88
T_EQUAL (294) 40 80
T_LOWER (295) 41 82
T_LEQ (296) 42 81
T_ASSIGN (297) 43 55 74
T_COMMENTS (298) 44
START_SYNTAX (299) 2
START_LEXICAL (300) 1
T_ERROR (301)


Nonterminals, with rules where they appear

$accept (47)
    on left: 0
start (48)
    on left: 1 2, on right: 0
Input (49)
    on left: 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
    24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44,
    on right: 1 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
    23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43
    44
program (50)
    on left: 45 46, on right: 2 46
class (51)
    on left: 47, on right: 45 46
extend (52)
    on left: 48 49, on right: 47
class-body (53)
    on left: 50 51 52, on right: 47 51 52
field (54)
    on left: 53, on right: 51
assign (55)
    on left: 54 55, on right: 53 73
method (56)
    on left: 56, on right: 52
type (57)
    on left: 57 58 59 60 61, on right: 53 56 66 73
formals (58)
    on left: 62 63, on right: 56
virgul-formals (59)
    on left: 64 65, on right: 63 65
formal (60)
    on left: 66, on right: 63 65
block (61)
    on left: 67, on right: 56 94
sc-expr (62)
    on left: 68 69, on right: 67 69
expr (63)
    on left: 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87
    88 89 90 91 92 93 94, on right: 55 67 69 70 71 72 73 74 75 76 77
    78 79 80 81 82 83 84 85 86 88 93 96 98
args (64)
    on left: 95 96, on right: 87 88
comma-arg (65)
    on left: 97 98, on right: 96 98
literal (66)
    on left: 99 100 101, on right: 91
boolean-literal (67)
    on left: 102 103, on right: 101


State 0

    0 $accept: . start $end

    START_SYNTAX   shift, and go to state 1
    START_LEXICAL  shift, and go to state 2

    start  go to state 3


State 1

    2 start: START_SYNTAX . program

    T_CLASS  shift, and go to state 4

    program  go to state 5
    class    go to state 6


State 2

    1 start: START_LEXICAL . Input

    $default  reduce using rule 3 (Input)

    Input  go to state 7


State 3

    0 $accept: start . $end

    $end  shift, and go to state 8


State 4

   47 class: T_CLASS . T_TYPE_ID extend T_L_BRACE class-body T_R_BRACE

    T_TYPE_ID  shift, and go to state 9


State 5

    2 start: START_SYNTAX program .
   46 program: program . class

    T_CLASS  shift, and go to state 4

    $default  reduce using rule 2 (start)

    class  go to state 10


State 6

   45 program: class .

    $default  reduce using rule 45 (program)


State 7

    1 start: START_LEXICAL Input .
    4 Input: Input . T_AND
    5      | Input . T_BOOL
    6      | Input . T_CLASS
    7      | Input . T_DO
    8      | Input . T_ELSE
    9      | Input . T_EXTENDS
   10      | Input . T_FALSE
   11      | Input . T_IF
   12      | Input . T_IN
   13      | Input . T_INT32
   14      | Input . T_ISNULL
   15      | Input . T_LET
   16      | Input . T_NEW
   17      | Input . T_NOT
   18      | Input . T_STRING
   19      | Input . T_THEN
   20      | Input . T_TRUE
   21      | Input . T_UNIT
   22      | Input . T_WHILE
   23      | Input . T_OBJ_ID
   24      | Input . T_INT_LIT
   25      | Input . T_TYPE_ID
   26      | Input . T_STRING_LIT
   27      | Input . T_L_BRACE
   28      | Input . T_R_BRACE
   29      | Input . T_R_PAR
   30      | Input . T_L_PAR
   31      | Input . T_COLON
   32      | Input . T_SEMI_COLON
   33      | Input . T_COMMA
   34      | Input . T_PLUS
   35      | Input . T_MINUS
   36      | Input . T_TIMES
   37      | Input . T_DIV
   38      | Input . T_POW
   39      | Input . T_DOT
   40      | Input . T_EQUAL
   41      | Input . T_LOWER
   42      | Input . T_LEQ
   43      | Input . T_ASSIGN
   44      | Input . T_COMMENTS

    T_AND         shift, and go to state 11
    T_BOOL        shift, and go to state 12
    T_CLASS       shift, and go to state 13
    T_DO          shift, and go to state 14
    T_ELSE        shift, and go to state 15
    T_EXTENDS     shift, and go to state 16
    T_FALSE       shift, and go to state 17
    T_IF          shift, and go to state 18
    T_IN          shift, and go to state 19
    T_INT32       shift, and go to state 20
    T_ISNULL      shift, and go to state 21
    T_LET         shift, and go to state 22
    T_NEW         shift, and go to state 23
    T_NOT         shift, and go to state 24
    T_STRING      shift, and go to state 25
    T_THEN        shift, and go to state 26
    T_TRUE        shift, and go to state 27
    T_UNIT        shift, and go to state 28
    T_WHILE       shift, and go to state 29
    T_OBJ_ID      shift, and go to state 30
    T_INT_LIT     shift, and go to state 31
    T_TYPE_ID     shift, and go to state 32
    T_STRING_LIT  shift, and go to state 33
    T_L_BRACE     shift, and go to state 34
    T_R_BRACE     shift, and go to state 35
    T_R_PAR       shift, and go to state 36
    T_L_PAR       shift, and go to state 37
    T_COLON       shift, and go to state 38
    T_SEMI_COLON  shift, and go to state 39
    T_COMMA       shift, and go to state 40
    T_PLUS        shift, and go to state 41
    T_MINUS       shift, and go to state 42
    T_TIMES       shift, and go to state 43
    T_DIV         shift, and go to state 44
    T_POW         shift, and go to state 45
    T_DOT         shift, and go to state 46
    T_EQUAL       shift, and go to state 47
    T_LOWER       shift, and go to state 48
    T_LEQ         shift, and go to state 49
    T_ASSIGN      shift, and go to state 50
    T_COMMENTS    shift, and go to state 51

    $default  reduce using rule 1 (start)


State 8

    0 $accept: start $end .

    $default  accept


State 9

   47 class: T_CLASS T_TYPE_ID . extend T_L_BRACE class-body T_R_BRACE

    T_EXTENDS  shift, and go to state 52

    $default  reduce using rule 48 (extend)

    extend  go to state 53


State 10

   46 program: program class .

    $default  reduce using rule 46 (program)


State 11

    4 Input: Input T_AND .

    $default  reduce using rule 4 (Input)


State 12

    5 Input: Input T_BOOL .

    $default  reduce using rule 5 (Input)


State 13

    6 Input: Input T_CLASS .

    $default  reduce using rule 6 (Input)


State 14

    7 Input: Input T_DO .

    $default  reduce using rule 7 (Input)


State 15

    8 Input: Input T_ELSE .

    $default  reduce using rule 8 (Input)


State 16

    9 Input: Input T_EXTENDS .

    $default  reduce using rule 9 (Input)


State 17

   10 Input: Input T_FALSE .

    $default  reduce using rule 10 (Input)


State 18

   11 Input: Input T_IF .

    $default  reduce using rule 11 (Input)


State 19

   12 Input: Input T_IN .

    $default  reduce using rule 12 (Input)


State 20

   13 Input: Input T_INT32 .

    $default  reduce using rule 13 (Input)


State 21

   14 Input: Input T_ISNULL .

    $default  reduce using rule 14 (Input)


State 22

   15 Input: Input T_LET .

    $default  reduce using rule 15 (Input)


State 23

   16 Input: Input T_NEW .

    $default  reduce using rule 16 (Input)


State 24

   17 Input: Input T_NOT .

    $default  reduce using rule 17 (Input)


State 25

   18 Input: Input T_STRING .

    $default  reduce using rule 18 (Input)


State 26

   19 Input: Input T_THEN .

    $default  reduce using rule 19 (Input)


State 27

   20 Input: Input T_TRUE .

    $default  reduce using rule 20 (Input)


State 28

   21 Input: Input T_UNIT .

    $default  reduce using rule 21 (Input)


State 29

   22 Input: Input T_WHILE .

    $default  reduce using rule 22 (Input)


State 30

   23 Input: Input T_OBJ_ID .

    $default  reduce using rule 23 (Input)


State 31

   24 Input: Input T_INT_LIT .

    $default  reduce using rule 24 (Input)


State 32

   25 Input: Input T_TYPE_ID .

    $default  reduce using rule 25 (Input)


State 33

   26 Input: Input T_STRING_LIT .

    $default  reduce using rule 26 (Input)


State 34

   27 Input: Input T_L_BRACE .

    $default  reduce using rule 27 (Input)


State 35

   28 Input: Input T_R_BRACE .

    $default  reduce using rule 28 (Input)


State 36

   29 Input: Input T_R_PAR .

    $default  reduce using rule 29 (Input)


State 37

   30 Input: Input T_L_PAR .

    $default  reduce using rule 30 (Input)


State 38

   31 Input: Input T_COLON .

    $default  reduce using rule 31 (Input)


State 39

   32 Input: Input T_SEMI_COLON .

    $default  reduce using rule 32 (Input)


State 40

   33 Input: Input T_COMMA .

    $default  reduce using rule 33 (Input)


State 41

   34 Input: Input T_PLUS .

    $default  reduce using rule 34 (Input)


State 42

   35 Input: Input T_MINUS .

    $default  reduce using rule 35 (Input)


State 43

   36 Input: Input T_TIMES .

    $default  reduce using rule 36 (Input)


State 44

   37 Input: Input T_DIV .

    $default  reduce using rule 37 (Input)


State 45

   38 Input: Input T_POW .

    $default  reduce using rule 38 (Input)


State 46

   39 Input: Input T_DOT .

    $default  reduce using rule 39 (Input)


State 47

   40 Input: Input T_EQUAL .

    $default  reduce using rule 40 (Input)


State 48

   41 Input: Input T_LOWER .

    $default  reduce using rule 41 (Input)


State 49

   42 Input: Input T_LEQ .

    $default  reduce using rule 42 (Input)


State 50

   43 Input: Input T_ASSIGN .

    $default  reduce using rule 43 (Input)


State 51

   44 Input: Input T_COMMENTS .

    $default  reduce using rule 44 (Input)


State 52

   49 extend: T_EXTENDS . T_TYPE_ID

    T_TYPE_ID  shift, and go to state 54


State 53

   47 class: T_CLASS T_TYPE_ID extend . T_L_BRACE class-body T_R_BRACE

    T_L_BRACE  shift, and go to state 55


State 54

   49 extend: T_EXTENDS T_TYPE_ID .

    $default  reduce using rule 49 (extend)


State 55

   47 class: T_CLASS T_TYPE_ID extend T_L_BRACE . class-body T_R_BRACE

    $default  reduce using rule 50 (class-body)

    class-body  go to state 56


State 56

   47 class: T_CLASS T_TYPE_ID extend T_L_BRACE class-body . T_R_BRACE
   51 class-body: class-body . field
   52           | class-body . method

    T_OBJ_ID   shift, and go to state 57
    T_R_BRACE  shift, and go to state 58

    field   go to state 59
    method  go to state 60


State 57

   53 field: T_OBJ_ID . T_COLON type assign T_SEMI_COLON
   56 method: T_OBJ_ID . T_L_PAR formals T_R_PAR T_COLON type block

    T_L_PAR  shift, and go to state 61
    T_COLON  shift, and go to state 62


State 58

   47 class: T_CLASS T_TYPE_ID extend T_L_BRACE class-body T_R_BRACE .

    $default  reduce using rule 47 (class)


State 59

   51 class-body: class-body field .

    $default  reduce using rule 51 (class-body)


State 60

   52 class-body: class-body method .

    $default  reduce using rule 52 (class-body)


State 61

   56 method: T_OBJ_ID T_L_PAR . formals T_R_PAR T_COLON type block

    T_OBJ_ID  shift, and go to state 63

    $default  reduce using rule 62 (formals)

    formals  go to state 64
    formal   go to state 65


State 62

   53 field: T_OBJ_ID T_COLON . type assign T_SEMI_COLON

    T_BOOL     shift, and go to state 66
    T_INT32    shift, and go to state 67
    T_STRING   shift, and go to state 68
    T_UNIT     shift, and go to state 69
    T_TYPE_ID  shift, and go to state 70

    type  go to state 71


State 63

   66 formal: T_OBJ_ID . T_COLON type

    T_COLON  shift, and go to state 72


State 64

   56 method: T_OBJ_ID T_L_PAR formals . T_R_PAR T_COLON type block

    T_R_PAR  shift, and go to state 73


State 65

   63 formals: formal . virgul-formals

    T_COMMA  shift, and go to state 74

    $default  reduce using rule 64 (virgul-formals)

    virgul-formals  go to state 75


State 66

   59 type: T_BOOL .

    $default  reduce using rule 59 (type)


State 67

   58 type: T_INT32 .

    $default  reduce using rule 58 (type)


State 68

   60 type: T_STRING .

    $default  reduce using rule 60 (type)


State 69

   61 type: T_UNIT .

    $default  reduce using rule 61 (type)


State 70

   57 type: T_TYPE_ID .

    $default  reduce using rule 57 (type)


State 71

   53 field: T_OBJ_ID T_COLON type . assign T_SEMI_COLON

    T_ASSIGN  shift, and go to state 76

    $default  reduce using rule 54 (assign)

    assign  go to state 77


State 72

   66 formal: T_OBJ_ID T_COLON . type

    T_BOOL     shift, and go to state 66
    T_INT32    shift, and go to state 67
    T_STRING   shift, and go to state 68
    T_UNIT     shift, and go to state 69
    T_TYPE_ID  shift, and go to state 70

    type  go to state 78


State 73

   56 method: T_OBJ_ID T_L_PAR formals T_R_PAR . T_COLON type block

    T_COLON  shift, and go to state 79


State 74

   65 virgul-formals: T_COMMA . formal virgul-formals

    T_OBJ_ID  shift, and go to state 63

    formal  go to state 80


State 75

   63 formals: formal virgul-formals .

    $default  reduce using rule 63 (formals)


State 76

   55 assign: T_ASSIGN . expr

    T_FALSE       shift, and go to state 81
    T_IF          shift, and go to state 82
    T_ISNULL      shift, and go to state 83
    T_LET         shift, and go to state 84
    T_NEW         shift, and go to state 85
    T_NOT         shift, and go to state 86
    T_TRUE        shift, and go to state 87
    T_WHILE       shift, and go to state 88
    T_OBJ_ID      shift, and go to state 89
    T_INT_LIT     shift, and go to state 90
    T_STRING_LIT  shift, and go to state 91
    T_L_BRACE     shift, and go to state 92
    T_L_PAR       shift, and go to state 93
    T_MINUS       shift, and go to state 94

    block            go to state 95
    expr             go to state 96
    literal          go to state 97
    boolean-literal  go to state 98


State 77

   53 field: T_OBJ_ID T_COLON type assign . T_SEMI_COLON

    T_SEMI_COLON  shift, and go to state 99


State 78

   66 formal: T_OBJ_ID T_COLON type .

    $default  reduce using rule 66 (formal)


State 79

   56 method: T_OBJ_ID T_L_PAR formals T_R_PAR T_COLON . type block

    T_BOOL     shift, and go to state 66
    T_INT32    shift, and go to state 67
    T_STRING   shift, and go to state 68
    T_UNIT     shift, and go to state 69
    T_TYPE_ID  shift, and go to state 70

    type  go to state 100


State 80

   65 virgul-formals: T_COMMA formal . virgul-formals

    T_COMMA  shift, and go to state 74

    $default  reduce using rule 64 (virgul-formals)

    virgul-formals  go to state 101


State 81

  103 boolean-literal: T_FALSE .

    $default  reduce using rule 103 (boolean-literal)


State 82

   70 expr: T_IF . expr T_THEN expr
   71     | T_IF . expr T_THEN expr T_ELSE expr

    T_FALSE       shift, and go to state 81
    T_IF          shift, and go to state 82
    T_ISNULL      shift, and go to state 83
    T_LET         shift, and go to state 84
    T_NEW         shift, and go to state 85
    T_NOT         shift, and go to state 86
    T_TRUE        shift, and go to state 87
    T_WHILE       shift, and go to state 88
    T_OBJ_ID      shift, and go to state 89
    T_INT_LIT     shift, and go to state 90
    T_STRING_LIT  shift, and go to state 91
    T_L_BRACE     shift, and go to state 92
    T_L_PAR       shift, and go to state 93
    T_MINUS       shift, and go to state 94

    block            go to state 95
    expr             go to state 102
    literal          go to state 97
    boolean-literal  go to state 98


State 83

   77 expr: T_ISNULL . expr

    T_FALSE       shift, and go to state 81
    T_IF          shift, and go to state 82
    T_ISNULL      shift, and go to state 83
    T_LET         shift, and go to state 84
    T_NEW         shift, and go to state 85
    T_NOT         shift, and go to state 86
    T_TRUE        shift, and go to state 87
    T_WHILE       shift, and go to state 88
    T_OBJ_ID      shift, and go to state 89
    T_INT_LIT     shift, and go to state 90
    T_STRING_LIT  shift, and go to state 91
    T_L_BRACE     shift, and go to state 92
    T_L_PAR       shift, and go to state 93
    T_MINUS       shift, and go to state 94

    block            go to state 95
    expr             go to state 103
    literal          go to state 97
    boolean-literal  go to state 98


State 84

   73 expr: T_LET . T_OBJ_ID T_COLON type assign T_IN expr

    T_OBJ_ID  shift, and go to state 104


State 85

   89 expr: T_NEW . T_TYPE_ID

    T_TYPE_ID  shift, and go to state 105


State 86

   75 expr: T_NOT . expr

    T_FALSE       shift, and go to state 81
    T_IF          shift, and go to state 82
    T_ISNULL      shift, and go to state 83
    T_LET         shift, and go to state 84
    T_NEW         shift, and go to state 85
    T_NOT         shift, and go to state 86
    T_TRUE        shift, and go to state 87
    T_WHILE       shift, and go to state 88
    T_OBJ_ID      shift, and go to state 89
    T_INT_LIT     shift, and go to state 90
    T_STRING_LIT  shift, and go to state 91
    T_L_BRACE     shift, and go to state 92
    T_L_PAR       shift, and go to state 93
    T_MINUS       shift, and go to state 94

    block            go to state 95
    expr             go to state 106
    literal          go to state 97
    boolean-literal  go to state 98


State 87

  102 boolean-literal: T_TRUE .

    $default  reduce using rule 102 (boolean-literal)


State 88

   72 expr: T_WHILE . expr T_DO expr

    T_FALSE       shift, and go to state 81
    T_IF          shift, and go to state 82
    T_ISNULL      shift, and go to state 83
    T_LET         shift, and go to state 84
    T_NEW         shift, and go to state 85
    T_NOT         shift, and go to state 86
    T_TRUE        shift, and go to state 87
    T_WHILE       shift, and go to state 88
    T_OBJ_ID      shift, and go to state 89
    T_INT_LIT     shift, and go to state 90
    T_STRING_LIT  shift, and go to state 91
    T_L_BRACE     shift, and go to state 92
    T_L_PAR       shift, and go to state 93
    T_MINUS       shift, and go to state 94

    block            go to state 95
    expr             go to state 107
    literal          go to state 97
    boolean-literal  go to state 98


State 89

   74 expr: T_OBJ_ID . T_ASSIGN expr
   87     | T_OBJ_ID . T_L_PAR args T_R_PAR
   90     | T_OBJ_ID .

    T_L_PAR   shift, and go to state 108
    T_ASSIGN  shift, and go to state 109

    $default  reduce using rule 90 (expr)


State 90

   99 literal: T_INT_LIT .

    $default  reduce using rule 99 (literal)


State 91

  100 literal: T_STRING_LIT .

    $default  reduce using rule 100 (literal)


State 92

   67 block: T_L_BRACE . expr sc-expr T_R_BRACE

    T_FALSE       shift, and go to state 81
    T_IF          shift, and go to state 82
    T_ISNULL      shift, and go to state 83
    T_LET         shift, and go to state 84
    T_NEW         shift, and go to state 85
    T_NOT         shift, and go to state 86
    T_TRUE        shift, and go to state 87
    T_WHILE       shift, and go to state 88
    T_OBJ_ID      shift, and go to state 89
    T_INT_LIT     shift, and go to state 90
    T_STRING_LIT  shift, and go to state 91
    T_L_BRACE     shift, and go to state 92
    T_L_PAR       shift, and go to state 93
    T_MINUS       shift, and go to state 94

    block            go to state 95
    expr             go to state 110
    literal          go to state 97
    boolean-literal  go to state 98


State 93

   92 expr: T_L_PAR . T_R_PAR
   93     | T_L_PAR . expr T_R_PAR

    T_FALSE       shift, and go to state 81
    T_IF          shift, and go to state 82
    T_ISNULL      shift, and go to state 83
    T_LET         shift, and go to state 84
    T_NEW         shift, and go to state 85
    T_NOT         shift, and go to state 86
    T_TRUE        shift, and go to state 87
    T_WHILE       shift, and go to state 88
    T_OBJ_ID      shift, and go to state 89
    T_INT_LIT     shift, and go to state 90
    T_STRING_LIT  shift, and go to state 91
    T_L_BRACE     shift, and go to state 92
    T_R_PAR       shift, and go to state 111
    T_L_PAR       shift, and go to state 93
    T_MINUS       shift, and go to state 94

    block            go to state 95
    expr             go to state 112
    literal          go to state 97
    boolean-literal  go to state 98


State 94

   76 expr: T_MINUS . expr

    T_FALSE       shift, and go to state 81
    T_IF          shift, and go to state 82
    T_ISNULL      shift, and go to state 83
    T_LET         shift, and go to state 84
    T_NEW         shift, and go to state 85
    T_NOT         shift, and go to state 86
    T_TRUE        shift, and go to state 87
    T_WHILE       shift, and go to state 88
    T_OBJ_ID      shift, and go to state 89
    T_INT_LIT     shift, and go to state 90
    T_STRING_LIT  shift, and go to state 91
    T_L_BRACE     shift, and go to state 92
    T_L_PAR       shift, and go to state 93
    T_MINUS       shift, and go to state 94

    block            go to state 95
    expr             go to state 113
    literal          go to state 97
    boolean-literal  go to state 98


State 95

   94 expr: block .

    $default  reduce using rule 94 (expr)


State 96

   55 assign: T_ASSIGN expr .
   78 expr: expr . T_PLUS expr
   79     | expr . T_AND expr
   80     | expr . T_EQUAL expr
   81     | expr . T_LEQ expr
   82     | expr . T_LOWER expr
   83     | expr . T_MINUS expr
   84     | expr . T_TIMES expr
   85     | expr . T_DIV expr
   86     | expr . T_POW expr
   88     | expr . T_DOT T_OBJ_ID T_L_PAR args T_R_PAR

    T_AND    shift, and go to state 114
    T_PLUS   shift, and go to state 115
    T_MINUS  shift, and go to state 116
    T_TIMES  shift, and go to state 117
    T_DIV    shift, and go to state 118
    T_POW    shift, and go to state 119
    T_DOT    shift, and go to state 120
    T_EQUAL  shift, and go to state 121
    T_LOWER  shift, and go to state 122
    T_LEQ    shift, and go to state 123

    $default  reduce using rule 55 (assign)


State 97

   91 expr: literal .

    $default  reduce using rule 91 (expr)


State 98

  101 literal: boolean-literal .

    $default  reduce using rule 101 (literal)


State 99

   53 field: T_OBJ_ID T_COLON type assign T_SEMI_COLON .

    $default  reduce using rule 53 (field)


State 100

   56 method: T_OBJ_ID T_L_PAR formals T_R_PAR T_COLON type . block

    T_L_BRACE  shift, and go to state 92

    block  go to state 124


State 101

   65 virgul-formals: T_COMMA formal virgul-formals .

    $default  reduce using rule 65 (virgul-formals)


State 102

   70 expr: T_IF expr . T_THEN expr
   71     | T_IF expr . T_THEN expr T_ELSE expr
   78     | expr . T_PLUS expr
   79     | expr . T_AND expr
   80     | expr . T_EQUAL expr
   81     | expr . T_LEQ expr
   82     | expr . T_LOWER expr
   83     | expr . T_MINUS expr
   84     | expr . T_TIMES expr
   85     | expr . T_DIV expr
   86     | expr . T_POW expr
   88     | expr . T_DOT T_OBJ_ID T_L_PAR args T_R_PAR

    T_AND    shift, and go to state 114
    T_THEN   shift, and go to state 125
    T_PLUS   shift, and go to state 115
    T_MINUS  shift, and go to state 116
    T_TIMES  shift, and go to state 117
    T_DIV    shift, and go to state 118
    T_POW    shift, and go to state 119
    T_DOT    shift, and go to state 120
    T_EQUAL  shift, and go to state 121
    T_LOWER  shift, and go to state 122
    T_LEQ    shift, and go to state 123


State 103

   77 expr: T_ISNULL expr .
   78     | expr . T_PLUS expr
   79     | expr . T_AND expr
   80     | expr . T_EQUAL expr
   81     | expr . T_LEQ expr
   82     | expr . T_LOWER expr
   83     | expr . T_MINUS expr
   84     | expr . T_TIMES expr
   85     | expr . T_DIV expr
   86     | expr . T_POW expr
   88     | expr . T_DOT T_OBJ_ID T_L_PAR args T_R_PAR

    T_POW  shift, and go to state 119
    T_DOT  shift, and go to state 120

    $default  reduce using rule 77 (expr)


State 104

   73 expr: T_LET T_OBJ_ID . T_COLON type assign T_IN expr

    T_COLON  shift, and go to state 126


State 105

   89 expr: T_NEW T_TYPE_ID .

    $default  reduce using rule 89 (expr)


State 106

   75 expr: T_NOT expr .
   78     | expr . T_PLUS expr
   79     | expr . T_AND expr
   80     | expr . T_EQUAL expr
   81     | expr . T_LEQ expr
   82     | expr . T_LOWER expr
   83     | expr . T_MINUS expr
   84     | expr . T_TIMES expr
   85     | expr . T_DIV expr
   86     | expr . T_POW expr
   88     | expr . T_DOT T_OBJ_ID T_L_PAR args T_R_PAR

    T_PLUS   shift, and go to state 115
    T_MINUS  shift, and go to state 116
    T_TIMES  shift, and go to state 117
    T_DIV    shift, and go to state 118
    T_POW    shift, and go to state 119
    T_DOT    shift, and go to state 120
    T_EQUAL  shift, and go to state 121
    T_LOWER  shift, and go to state 122
    T_LEQ    shift, and go to state 123

    $default  reduce using rule 75 (expr)


State 107

   72 expr: T_WHILE expr . T_DO expr
   78     | expr . T_PLUS expr
   79     | expr . T_AND expr
   80     | expr . T_EQUAL expr
   81     | expr . T_LEQ expr
   82     | expr . T_LOWER expr
   83     | expr . T_MINUS expr
   84     | expr . T_TIMES expr
   85     | expr . T_DIV expr
   86     | expr . T_POW expr
   88     | expr . T_DOT T_OBJ_ID T_L_PAR args T_R_PAR

    T_AND    shift, and go to state 114
    T_DO     shift, and go to state 127
    T_PLUS   shift, and go to state 115
    T_MINUS  shift, and go to state 116
    T_TIMES  shift, and go to state 117
    T_DIV    shift, and go to state 118
    T_POW    shift, and go to state 119
    T_DOT    shift, and go to state 120
    T_EQUAL  shift, and go to state 121
    T_LOWER  shift, and go to state 122
    T_LEQ    shift, and go to state 123


State 108

   87 expr: T_OBJ_ID T_L_PAR . args T_R_PAR

    T_FALSE       shift, and go to state 81
    T_IF          shift, and go to state 82
    T_ISNULL      shift, and go to state 83
    T_LET         shift, and go to state 84
    T_NEW         shift, and go to state 85
    T_NOT         shift, and go to state 86
    T_TRUE        shift, and go to state 87
    T_WHILE       shift, and go to state 88
    T_OBJ_ID      shift, and go to state 89
    T_INT_LIT     shift, and go to state 90
    T_STRING_LIT  shift, and go to state 91
    T_L_BRACE     shift, and go to state 92
    T_L_PAR       shift, and go to state 93
    T_MINUS       shift, and go to state 94

    $default  reduce using rule 95 (args)

    block            go to state 95
    expr             go to state 128
    args             go to state 129
    literal          go to state 97
    boolean-literal  go to state 98


State 109

   74 expr: T_OBJ_ID T_ASSIGN . expr

    T_FALSE       shift, and go to state 81
    T_IF          shift, and go to state 82
    T_ISNULL      shift, and go to state 83
    T_LET         shift, and go to state 84
    T_NEW         shift, and go to state 85
    T_NOT         shift, and go to state 86
    T_TRUE        shift, and go to state 87
    T_WHILE       shift, and go to state 88
    T_OBJ_ID      shift, and go to state 89
    T_INT_LIT     shift, and go to state 90
    T_STRING_LIT  shift, and go to state 91
    T_L_BRACE     shift, and go to state 92
    T_L_PAR       shift, and go to state 93
    T_MINUS       shift, and go to state 94

    block            go to state 95
    expr             go to state 130
    literal          go to state 97
    boolean-literal  go to state 98


State 110

   67 block: T_L_BRACE expr . sc-expr T_R_BRACE
   78 expr: expr . T_PLUS expr
   79     | expr . T_AND expr
   80     | expr . T_EQUAL expr
   81     | expr . T_LEQ expr
   82     | expr . T_LOWER expr
   83     | expr . T_MINUS expr
   84     | expr . T_TIMES expr
   85     | expr . T_DIV expr
   86     | expr . T_POW expr
   88     | expr . T_DOT T_OBJ_ID T_L_PAR args T_R_PAR

    T_AND         shift, and go to state 114
    T_SEMI_COLON  shift, and go to state 131
    T_PLUS        shift, and go to state 115
    T_MINUS       shift, and go to state 116
    T_TIMES       shift, and go to state 117
    T_DIV         shift, and go to state 118
    T_POW         shift, and go to state 119
    T_DOT         shift, and go to state 120
    T_EQUAL       shift, and go to state 121
    T_LOWER       shift, and go to state 122
    T_LEQ         shift, and go to state 123

    $default  reduce using rule 68 (sc-expr)

    sc-expr  go to state 132


State 111

   92 expr: T_L_PAR T_R_PAR .

    $default  reduce using rule 92 (expr)


State 112

   78 expr: expr . T_PLUS expr
   79     | expr . T_AND expr
   80     | expr . T_EQUAL expr
   81     | expr . T_LEQ expr
   82     | expr . T_LOWER expr
   83     | expr . T_MINUS expr
   84     | expr . T_TIMES expr
   85     | expr . T_DIV expr
   86     | expr . T_POW expr
   88     | expr . T_DOT T_OBJ_ID T_L_PAR args T_R_PAR
   93     | T_L_PAR expr . T_R_PAR

    T_AND    shift, and go to state 114
    T_R_PAR  shift, and go to state 133
    T_PLUS   shift, and go to state 115
    T_MINUS  shift, and go to state 116
    T_TIMES  shift, and go to state 117
    T_DIV    shift, and go to state 118
    T_POW    shift, and go to state 119
    T_DOT    shift, and go to state 120
    T_EQUAL  shift, and go to state 121
    T_LOWER  shift, and go to state 122
    T_LEQ    shift, and go to state 123


State 113

   76 expr: T_MINUS expr .
   78     | expr . T_PLUS expr
   79     | expr . T_AND expr
   80     | expr . T_EQUAL expr
   81     | expr . T_LEQ expr
   82     | expr . T_LOWER expr
   83     | expr . T_MINUS expr
   84     | expr . T_TIMES expr
   85     | expr . T_DIV expr
   86     | expr . T_POW expr
   88     | expr . T_DOT T_OBJ_ID T_L_PAR args T_R_PAR

    T_TIMES  shift, and go to state 117
    T_DIV    shift, and go to state 118
    T_POW    shift, and go to state 119
    T_DOT    shift, and go to state 120

    $default  reduce using rule 76 (expr)


State 114

   79 expr: expr T_AND . expr

    T_FALSE       shift, and go to state 81
    T_IF          shift, and go to state 82
    T_ISNULL      shift, and go to state 83
    T_LET         shift, and go to state 84
    T_NEW         shift, and go to state 85
    T_NOT         shift, and go to state 86
    T_TRUE        shift, and go to state 87
    T_WHILE       shift, and go to state 88
    T_OBJ_ID      shift, and go to state 89
    T_INT_LIT     shift, and go to state 90
    T_STRING_LIT  shift, and go to state 91
    T_L_BRACE     shift, and go to state 92
    T_L_PAR       shift, and go to state 93
    T_MINUS       shift, and go to state 94

    block            go to state 95
    expr             go to state 134
    literal          go to state 97
    boolean-literal  go to state 98


State 115

   78 expr: expr T_PLUS . expr

    T_FALSE       shift, and go to state 81
    T_IF          shift, and go to state 82
    T_ISNULL      shift, and go to state 83
    T_LET         shift, and go to state 84
    T_NEW         shift, and go to state 85
    T_NOT         shift, and go to state 86
    T_TRUE        shift, and go to state 87
    T_WHILE       shift, and go to state 88
    T_OBJ_ID      shift, and go to state 89
    T_INT_LIT     shift, and go to state 90
    T_STRING_LIT  shift, and go to state 91
    T_L_BRACE     shift, and go to state 92
    T_L_PAR       shift, and go to state 93
    T_MINUS       shift, and go to state 94

    block            go to state 95
    expr             go to state 135
    literal          go to state 97
    boolean-literal  go to state 98


State 116

   83 expr: expr T_MINUS . expr

    T_FALSE       shift, and go to state 81
    T_IF          shift, and go to state 82
    T_ISNULL      shift, and go to state 83
    T_LET         shift, and go to state 84
    T_NEW         shift, and go to state 85
    T_NOT         shift, and go to state 86
    T_TRUE        shift, and go to state 87
    T_WHILE       shift, and go to state 88
    T_OBJ_ID      shift, and go to state 89
    T_INT_LIT     shift, and go to state 90
    T_STRING_LIT  shift, and go to state 91
    T_L_BRACE     shift, and go to state 92
    T_L_PAR       shift, and go to state 93
    T_MINUS       shift, and go to state 94

    block            go to state 95
    expr             go to state 136
    literal          go to state 97
    boolean-literal  go to state 98


State 117

   84 expr: expr T_TIMES . expr

    T_FALSE       shift, and go to state 81
    T_IF          shift, and go to state 82
    T_ISNULL      shift, and go to state 83
    T_LET         shift, and go to state 84
    T_NEW         shift, and go to state 85
    T_NOT         shift, and go to state 86
    T_TRUE        shift, and go to state 87
    T_WHILE       shift, and go to state 88
    T_OBJ_ID      shift, and go to state 89
    T_INT_LIT     shift, and go to state 90
    T_STRING_LIT  shift, and go to state 91
    T_L_BRACE     shift, and go to state 92
    T_L_PAR       shift, and go to state 93
    T_MINUS       shift, and go to state 94

    block            go to state 95
    expr             go to state 137
    literal          go to state 97
    boolean-literal  go to state 98


State 118

   85 expr: expr T_DIV . expr

    T_FALSE       shift, and go to state 81
    T_IF          shift, and go to state 82
    T_ISNULL      shift, and go to state 83
    T_LET         shift, and go to state 84
    T_NEW         shift, and go to state 85
    T_NOT         shift, and go to state 86
    T_TRUE        shift, and go to state 87
    T_WHILE       shift, and go to state 88
    T_OBJ_ID      shift, and go to state 89
    T_INT_LIT     shift, and go to state 90
    T_STRING_LIT  shift, and go to state 91
    T_L_BRACE     shift, and go to state 92
    T_L_PAR       shift, and go to state 93
    T_MINUS       shift, and go to state 94

    block            go to state 95
    expr             go to state 138
    literal          go to state 97
    boolean-literal  go to state 98


State 119

   86 expr: expr T_POW . expr

    T_FALSE       shift, and go to state 81
    T_IF          shift, and go to state 82
    T_ISNULL      shift, and go to state 83
    T_LET         shift, and go to state 84
    T_NEW         shift, and go to state 85
    T_NOT         shift, and go to state 86
    T_TRUE        shift, and go to state 87
    T_WHILE       shift, and go to state 88
    T_OBJ_ID      shift, and go to state 89
    T_INT_LIT     shift, and go to state 90
    T_STRING_LIT  shift, and go to state 91
    T_L_BRACE     shift, and go to state 92
    T_L_PAR       shift, and go to state 93
    T_MINUS       shift, and go to state 94

    block            go to state 95
    expr             go to state 139
    literal          go to state 97
    boolean-literal  go to state 98


State 120

   88 expr: expr T_DOT . T_OBJ_ID T_L_PAR args T_R_PAR

    T_OBJ_ID  shift, and go to state 140


State 121

   80 expr: expr T_EQUAL . expr

    T_FALSE       shift, and go to state 81
    T_IF          shift, and go to state 82
    T_ISNULL      shift, and go to state 83
    T_LET         shift, and go to state 84
    T_NEW         shift, and go to state 85
    T_NOT         shift, and go to state 86
    T_TRUE        shift, and go to state 87
    T_WHILE       shift, and go to state 88
    T_OBJ_ID      shift, and go to state 89
    T_INT_LIT     shift, and go to state 90
    T_STRING_LIT  shift, and go to state 91
    T_L_BRACE     shift, and go to state 92
    T_L_PAR       shift, and go to state 93
    T_MINUS       shift, and go to state 94

    block            go to state 95
    expr             go to state 141
    literal          go to state 97
    boolean-literal  go to state 98


State 122

   82 expr: expr T_LOWER . expr

    T_FALSE       shift, and go to state 81
    T_IF          shift, and go to state 82
    T_ISNULL      shift, and go to state 83
    T_LET         shift, and go to state 84
    T_NEW         shift, and go to state 85
    T_NOT         shift, and go to state 86
    T_TRUE        shift, and go to state 87
    T_WHILE       shift, and go to state 88
    T_OBJ_ID      shift, and go to state 89
    T_INT_LIT     shift, and go to state 90
    T_STRING_LIT  shift, and go to state 91
    T_L_BRACE     shift, and go to state 92
    T_L_PAR       shift, and go to state 93
    T_MINUS       shift, and go to state 94

    block            go to state 95
    expr             go to state 142
    literal          go to state 97
    boolean-literal  go to state 98


State 123

   81 expr: expr T_LEQ . expr

    T_FALSE       shift, and go to state 81
    T_IF          shift, and go to state 82
    T_ISNULL      shift, and go to state 83
    T_LET         shift, and go to state 84
    T_NEW         shift, and go to state 85
    T_NOT         shift, and go to state 86
    T_TRUE        shift, and go to state 87
    T_WHILE       shift, and go to state 88
    T_OBJ_ID      shift, and go to state 89
    T_INT_LIT     shift, and go to state 90
    T_STRING_LIT  shift, and go to state 91
    T_L_BRACE     shift, and go to state 92
    T_L_PAR       shift, and go to state 93
    T_MINUS       shift, and go to state 94

    block            go to state 95
    expr             go to state 143
    literal          go to state 97
    boolean-literal  go to state 98


State 124

   56 method: T_OBJ_ID T_L_PAR formals T_R_PAR T_COLON type block .

    $default  reduce using rule 56 (method)


State 125

   70 expr: T_IF expr T_THEN . expr
   71     | T_IF expr T_THEN . expr T_ELSE expr

    T_FALSE       shift, and go to state 81
    T_IF          shift, and go to state 82
    T_ISNULL      shift, and go to state 83
    T_LET         shift, and go to state 84
    T_NEW         shift, and go to state 85
    T_NOT         shift, and go to state 86
    T_TRUE        shift, and go to state 87
    T_WHILE       shift, and go to state 88
    T_OBJ_ID      shift, and go to state 89
    T_INT_LIT     shift, and go to state 90
    T_STRING_LIT  shift, and go to state 91
    T_L_BRACE     shift, and go to state 92
    T_L_PAR       shift, and go to state 93
    T_MINUS       shift, and go to state 94

    block            go to state 95
    expr             go to state 144
    literal          go to state 97
    boolean-literal  go to state 98


State 126

   73 expr: T_LET T_OBJ_ID T_COLON . type assign T_IN expr

    T_BOOL     shift, and go to state 66
    T_INT32    shift, and go to state 67
    T_STRING   shift, and go to state 68
    T_UNIT     shift, and go to state 69
    T_TYPE_ID  shift, and go to state 70

    type  go to state 145


State 127

   72 expr: T_WHILE expr T_DO . expr

    T_FALSE       shift, and go to state 81
    T_IF          shift, and go to state 82
    T_ISNULL      shift, and go to state 83
    T_LET         shift, and go to state 84
    T_NEW         shift, and go to state 85
    T_NOT         shift, and go to state 86
    T_TRUE        shift, and go to state 87
    T_WHILE       shift, and go to state 88
    T_OBJ_ID      shift, and go to state 89
    T_INT_LIT     shift, and go to state 90
    T_STRING_LIT  shift, and go to state 91
    T_L_BRACE     shift, and go to state 92
    T_L_PAR       shift, and go to state 93
    T_MINUS       shift, and go to state 94

    block            go to state 95
    expr             go to state 146
    literal          go to state 97
    boolean-literal  go to state 98


State 128

   78 expr: expr . T_PLUS expr
   79     | expr . T_AND expr
   80     | expr . T_EQUAL expr
   81     | expr . T_LEQ expr
   82     | expr . T_LOWER expr
   83     | expr . T_MINUS expr
   84     | expr . T_TIMES expr
   85     | expr . T_DIV expr
   86     | expr . T_POW expr
   88     | expr . T_DOT T_OBJ_ID T_L_PAR args T_R_PAR
   96 args: expr . comma-arg

    T_AND    shift, and go to state 114
    T_COMMA  shift, and go to state 147
    T_PLUS   shift, and go to state 115
    T_MINUS  shift, and go to state 116
    T_TIMES  shift, and go to state 117
    T_DIV    shift, and go to state 118
    T_POW    shift, and go to state 119
    T_DOT    shift, and go to state 120
    T_EQUAL  shift, and go to state 121
    T_LOWER  shift, and go to state 122
    T_LEQ    shift, and go to state 123

    $default  reduce using rule 97 (comma-arg)

    comma-arg  go to state 148


State 129

   87 expr: T_OBJ_ID T_L_PAR args . T_R_PAR

    T_R_PAR  shift, and go to state 149


State 130

   74 expr: T_OBJ_ID T_ASSIGN expr .
   78     | expr . T_PLUS expr
   79     | expr . T_AND expr
   80     | expr . T_EQUAL expr
   81     | expr . T_LEQ expr
   82     | expr . T_LOWER expr
   83     | expr . T_MINUS expr
   84     | expr . T_TIMES expr
   85     | expr . T_DIV expr
   86     | expr . T_POW expr
   88     | expr . T_DOT T_OBJ_ID T_L_PAR args T_R_PAR

    T_AND    shift, and go to state 114
    T_PLUS   shift, and go to state 115
    T_MINUS  shift, and go to state 116
    T_TIMES  shift, and go to state 117
    T_DIV    shift, and go to state 118
    T_POW    shift, and go to state 119
    T_DOT    shift, and go to state 120
    T_EQUAL  shift, and go to state 121
    T_LOWER  shift, and go to state 122
    T_LEQ    shift, and go to state 123

    $default  reduce using rule 74 (expr)


State 131

   69 sc-expr: T_SEMI_COLON . expr sc-expr

    T_FALSE       shift, and go to state 81
    T_IF          shift, and go to state 82
    T_ISNULL      shift, and go to state 83
    T_LET         shift, and go to state 84
    T_NEW         shift, and go to state 85
    T_NOT         shift, and go to state 86
    T_TRUE        shift, and go to state 87
    T_WHILE       shift, and go to state 88
    T_OBJ_ID      shift, and go to state 89
    T_INT_LIT     shift, and go to state 90
    T_STRING_LIT  shift, and go to state 91
    T_L_BRACE     shift, and go to state 92
    T_L_PAR       shift, and go to state 93
    T_MINUS       shift, and go to state 94

    block            go to state 95
    expr             go to state 150
    literal          go to state 97
    boolean-literal  go to state 98


State 132

   67 block: T_L_BRACE expr sc-expr . T_R_BRACE

    T_R_BRACE  shift, and go to state 151


State 133

   93 expr: T_L_PAR expr T_R_PAR .

    $default  reduce using rule 93 (expr)


State 134

   78 expr: expr . T_PLUS expr
   79     | expr . T_AND expr
   79     | expr T_AND expr .
   80     | expr . T_EQUAL expr
   81     | expr . T_LEQ expr
   82     | expr . T_LOWER expr
   83     | expr . T_MINUS expr
   84     | expr . T_TIMES expr
   85     | expr . T_DIV expr
   86     | expr . T_POW expr
   88     | expr . T_DOT T_OBJ_ID T_L_PAR args T_R_PAR

    T_PLUS   shift, and go to state 115
    T_MINUS  shift, and go to state 116
    T_TIMES  shift, and go to state 117
    T_DIV    shift, and go to state 118
    T_POW    shift, and go to state 119
    T_DOT    shift, and go to state 120
    T_EQUAL  shift, and go to state 121
    T_LOWER  shift, and go to state 122
    T_LEQ    shift, and go to state 123

    $default  reduce using rule 79 (expr)


State 135

   78 expr: expr . T_PLUS expr
   78     | expr T_PLUS expr .
   79     | expr . T_AND expr
   80     | expr . T_EQUAL expr
   81     | expr . T_LEQ expr
   82     | expr . T_LOWER expr
   83     | expr . T_MINUS expr
   84     | expr . T_TIMES expr
   85     | expr . T_DIV expr
   86     | expr . T_POW expr
   88     | expr . T_DOT T_OBJ_ID T_L_PAR args T_R_PAR

    T_TIMES  shift, and go to state 117
    T_DIV    shift, and go to state 118
    T_POW    shift, and go to state 119
    T_DOT    shift, and go to state 120

    $default  reduce using rule 78 (expr)


State 136

   78 expr: expr . T_PLUS expr
   79     | expr . T_AND expr
   80     | expr . T_EQUAL expr
   81     | expr . T_LEQ expr
   82     | expr . T_LOWER expr
   83     | expr . T_MINUS expr
   83     | expr T_MINUS expr .
   84     | expr . T_TIMES expr
   85     | expr . T_DIV expr
   86     | expr . T_POW expr
   88     | expr . T_DOT T_OBJ_ID T_L_PAR args T_R_PAR

    T_TIMES  shift, and go to state 117
    T_DIV    shift, and go to state 118
    T_POW    shift, and go to state 119
    T_DOT    shift, and go to state 120

    $default  reduce using rule 83 (expr)


State 137

   78 expr: expr . T_PLUS expr
   79     | expr . T_AND expr
   80     | expr . T_EQUAL expr
   81     | expr . T_LEQ expr
   82     | expr . T_LOWER expr
   83     | expr . T_MINUS expr
   84     | expr . T_TIMES expr
   84     | expr T_TIMES expr .
   85     | expr . T_DIV expr
   86     | expr . T_POW expr
   88     | expr . T_DOT T_OBJ_ID T_L_PAR args T_R_PAR

    T_POW  shift, and go to state 119
    T_DOT  shift, and go to state 120

    $default  reduce using rule 84 (expr)


State 138

   78 expr: expr . T_PLUS expr
   79     | expr . T_AND expr
   80     | expr . T_EQUAL expr
   81     | expr . T_LEQ expr
   82     | expr . T_LOWER expr
   83     | expr . T_MINUS expr
   84     | expr . T_TIMES expr
   85     | expr . T_DIV expr
   85     | expr T_DIV expr .
   86     | expr . T_POW expr
   88     | expr . T_DOT T_OBJ_ID T_L_PAR args T_R_PAR

    T_POW  shift, and go to state 119
    T_DOT  shift, and go to state 120

    $default  reduce using rule 85 (expr)


State 139

   78 expr: expr . T_PLUS expr
   79     | expr . T_AND expr
   80     | expr . T_EQUAL expr
   81     | expr . T_LEQ expr
   82     | expr . T_LOWER expr
   83     | expr . T_MINUS expr
   84     | expr . T_TIMES expr
   85     | expr . T_DIV expr
   86     | expr . T_POW expr
   86     | expr T_POW expr .
   88     | expr . T_DOT T_OBJ_ID T_L_PAR args T_R_PAR

    T_POW  shift, and go to state 119
    T_DOT  shift, and go to state 120

    $default  reduce using rule 86 (expr)


State 140

   88 expr: expr T_DOT T_OBJ_ID . T_L_PAR args T_R_PAR

    T_L_PAR  shift, and go to state 152


State 141

   78 expr: expr . T_PLUS expr
   79     | expr . T_AND expr
   80     | expr . T_EQUAL expr
   80     | expr T_EQUAL expr .
   81     | expr . T_LEQ expr
   82     | expr . T_LOWER expr
   83     | expr . T_MINUS expr
   84     | expr . T_TIMES expr
   85     | expr . T_DIV expr
   86     | expr . T_POW expr
   88     | expr . T_DOT T_OBJ_ID T_L_PAR args T_R_PAR

    T_PLUS   shift, and go to state 115
    T_MINUS  shift, and go to state 116
    T_TIMES  shift, and go to state 117
    T_DIV    shift, and go to state 118
    T_POW    shift, and go to state 119
    T_DOT    shift, and go to state 120

    T_EQUAL  error (nonassociative)
    T_LOWER  error (nonassociative)
    T_LEQ    error (nonassociative)

    $default  reduce using rule 80 (expr)


State 142

   78 expr: expr . T_PLUS expr
   79     | expr . T_AND expr
   80     | expr . T_EQUAL expr
   81     | expr . T_LEQ expr
   82     | expr . T_LOWER expr
   82     | expr T_LOWER expr .
   83     | expr . T_MINUS expr
   84     | expr . T_TIMES expr
   85     | expr . T_DIV expr
   86     | expr . T_POW expr
   88     | expr . T_DOT T_OBJ_ID T_L_PAR args T_R_PAR

    T_PLUS   shift, and go to state 115
    T_MINUS  shift, and go to state 116
    T_TIMES  shift, and go to state 117
    T_DIV    shift, and go to state 118
    T_POW    shift, and go to state 119
    T_DOT    shift, and go to state 120

    T_EQUAL  error (nonassociative)
    T_LOWER  error (nonassociative)
    T_LEQ    error (nonassociative)

    $default  reduce using rule 82 (expr)


State 143

   78 expr: expr . T_PLUS expr
   79     | expr . T_AND expr
   80     | expr . T_EQUAL expr
   81     | expr . T_LEQ expr
   81     | expr T_LEQ expr .
   82     | expr . T_LOWER expr
   83     | expr . T_MINUS expr
   84     | expr . T_TIMES expr
   85     | expr . T_DIV expr
   86     | expr . T_POW expr
   88     | expr . T_DOT T_OBJ_ID T_L_PAR args T_R_PAR

    T_PLUS   shift, and go to state 115
    T_MINUS  shift, and go to state 116
    T_TIMES  shift, and go to state 117
    T_DIV    shift, and go to state 118
    T_POW    shift, and go to state 119
    T_DOT    shift, and go to state 120

    T_EQUAL  error (nonassociative)
    T_LOWER  error (nonassociative)
    T_LEQ    error (nonassociative)

    $default  reduce using rule 81 (expr)


State 144

   70 expr: T_IF expr T_THEN expr .
   71     | T_IF expr T_THEN expr . T_ELSE expr
   78     | expr . T_PLUS expr
   79     | expr . T_AND expr
   80     | expr . T_EQUAL expr
   81     | expr . T_LEQ expr
   82     | expr . T_LOWER expr
   83     | expr . T_MINUS expr
   84     | expr . T_TIMES expr
   85     | expr . T_DIV expr
   86     | expr . T_POW expr
   88     | expr . T_DOT T_OBJ_ID T_L_PAR args T_R_PAR

    T_AND    shift, and go to state 114
    T_ELSE   shift, and go to state 153
    T_PLUS   shift, and go to state 115
    T_MINUS  shift, and go to state 116
    T_TIMES  shift, and go to state 117
    T_DIV    shift, and go to state 118
    T_POW    shift, and go to state 119
    T_DOT    shift, and go to state 120
    T_EQUAL  shift, and go to state 121
    T_LOWER  shift, and go to state 122
    T_LEQ    shift, and go to state 123

    T_AND     [reduce using rule 70 (expr)]
    T_ELSE    [reduce using rule 70 (expr)]
    T_PLUS    [reduce using rule 70 (expr)]
    T_MINUS   [reduce using rule 70 (expr)]
    T_TIMES   [reduce using rule 70 (expr)]
    T_DIV     [reduce using rule 70 (expr)]
    T_POW     [reduce using rule 70 (expr)]
    T_DOT     [reduce using rule 70 (expr)]
    T_EQUAL   [reduce using rule 70 (expr)]
    T_LOWER   [reduce using rule 70 (expr)]
    T_LEQ     [reduce using rule 70 (expr)]
    $default  reduce using rule 70 (expr)


State 145

   73 expr: T_LET T_OBJ_ID T_COLON type . assign T_IN expr

    T_ASSIGN  shift, and go to state 76

    $default  reduce using rule 54 (assign)

    assign  go to state 154


State 146

   72 expr: T_WHILE expr T_DO expr .
   78     | expr . T_PLUS expr
   79     | expr . T_AND expr
   80     | expr . T_EQUAL expr
   81     | expr . T_LEQ expr
   82     | expr . T_LOWER expr
   83     | expr . T_MINUS expr
   84     | expr . T_TIMES expr
   85     | expr . T_DIV expr
   86     | expr . T_POW expr
   88     | expr . T_DOT T_OBJ_ID T_L_PAR args T_R_PAR

    T_AND    shift, and go to state 114
    T_PLUS   shift, and go to state 115
    T_MINUS  shift, and go to state 116
    T_TIMES  shift, and go to state 117
    T_DIV    shift, and go to state 118
    T_POW    shift, and go to state 119
    T_DOT    shift, and go to state 120
    T_EQUAL  shift, and go to state 121
    T_LOWER  shift, and go to state 122
    T_LEQ    shift, and go to state 123

    T_AND     [reduce using rule 72 (expr)]
    T_PLUS    [reduce using rule 72 (expr)]
    T_MINUS   [reduce using rule 72 (expr)]
    T_TIMES   [reduce using rule 72 (expr)]
    T_DIV     [reduce using rule 72 (expr)]
    T_POW     [reduce using rule 72 (expr)]
    T_DOT     [reduce using rule 72 (expr)]
    T_EQUAL   [reduce using rule 72 (expr)]
    T_LOWER   [reduce using rule 72 (expr)]
    T_LEQ     [reduce using rule 72 (expr)]
    $default  reduce using rule 72 (expr)


State 147

   98 comma-arg: T_COMMA . expr comma-arg

    T_FALSE       shift, and go to state 81
    T_IF          shift, and go to state 82
    T_ISNULL      shift, and go to state 83
    T_LET         shift, and go to state 84
    T_NEW         shift, and go to state 85
    T_NOT         shift, and go to state 86
    T_TRUE        shift, and go to state 87
    T_WHILE       shift, and go to state 88
    T_OBJ_ID      shift, and go to state 89
    T_INT_LIT     shift, and go to state 90
    T_STRING_LIT  shift, and go to state 91
    T_L_BRACE     shift, and go to state 92
    T_L_PAR       shift, and go to state 93
    T_MINUS       shift, and go to state 94

    block            go to state 95
    expr             go to state 155
    literal          go to state 97
    boolean-literal  go to state 98


State 148

   96 args: expr comma-arg .

    $default  reduce using rule 96 (args)


State 149

   87 expr: T_OBJ_ID T_L_PAR args T_R_PAR .

    $default  reduce using rule 87 (expr)


State 150

   69 sc-expr: T_SEMI_COLON expr . sc-expr
   78 expr: expr . T_PLUS expr
   79     | expr . T_AND expr
   80     | expr . T_EQUAL expr
   81     | expr . T_LEQ expr
   82     | expr . T_LOWER expr
   83     | expr . T_MINUS expr
   84     | expr . T_TIMES expr
   85     | expr . T_DIV expr
   86     | expr . T_POW expr
   88     | expr . T_DOT T_OBJ_ID T_L_PAR args T_R_PAR

    T_AND         shift, and go to state 114
    T_SEMI_COLON  shift, and go to state 131
    T_PLUS        shift, and go to state 115
    T_MINUS       shift, and go to state 116
    T_TIMES       shift, and go to state 117
    T_DIV         shift, and go to state 118
    T_POW         shift, and go to state 119
    T_DOT         shift, and go to state 120
    T_EQUAL       shift, and go to state 121
    T_LOWER       shift, and go to state 122
    T_LEQ         shift, and go to state 123

    $default  reduce using rule 68 (sc-expr)

    sc-expr  go to state 156


State 151

   67 block: T_L_BRACE expr sc-expr T_R_BRACE .

    $default  reduce using rule 67 (block)


State 152

   88 expr: expr T_DOT T_OBJ_ID T_L_PAR . args T_R_PAR

    T_FALSE       shift, and go to state 81
    T_IF          shift, and go to state 82
    T_ISNULL      shift, and go to state 83
    T_LET         shift, and go to state 84
    T_NEW         shift, and go to state 85
    T_NOT         shift, and go to state 86
    T_TRUE        shift, and go to state 87
    T_WHILE       shift, and go to state 88
    T_OBJ_ID      shift, and go to state 89
    T_INT_LIT     shift, and go to state 90
    T_STRING_LIT  shift, and go to state 91
    T_L_BRACE     shift, and go to state 92
    T_L_PAR       shift, and go to state 93
    T_MINUS       shift, and go to state 94

    $default  reduce using rule 95 (args)

    block            go to state 95
    expr             go to state 128
    args             go to state 157
    literal          go to state 97
    boolean-literal  go to state 98


State 153

   71 expr: T_IF expr T_THEN expr T_ELSE . expr

    T_FALSE       shift, and go to state 81
    T_IF          shift, and go to state 82
    T_ISNULL      shift, and go to state 83
    T_LET         shift, and go to state 84
    T_NEW         shift, and go to state 85
    T_NOT         shift, and go to state 86
    T_TRUE        shift, and go to state 87
    T_WHILE       shift, and go to state 88
    T_OBJ_ID      shift, and go to state 89
    T_INT_LIT     shift, and go to state 90
    T_STRING_LIT  shift, and go to state 91
    T_L_BRACE     shift, and go to state 92
    T_L_PAR       shift, and go to state 93
    T_MINUS       shift, and go to state 94

    block            go to state 95
    expr             go to state 158
    literal          go to state 97
    boolean-literal  go to state 98


State 154

   73 expr: T_LET T_OBJ_ID T_COLON type assign . T_IN expr

    T_IN  shift, and go to state 159


State 155

   78 expr: expr . T_PLUS expr
   79     | expr . T_AND expr
   80     | expr . T_EQUAL expr
   81     | expr . T_LEQ expr
   82     | expr . T_LOWER expr
   83     | expr . T_MINUS expr
   84     | expr . T_TIMES expr
   85     | expr . T_DIV expr
   86     | expr . T_POW expr
   88     | expr . T_DOT T_OBJ_ID T_L_PAR args T_R_PAR
   98 comma-arg: T_COMMA expr . comma-arg

    T_AND    shift, and go to state 114
    T_COMMA  shift, and go to state 147
    T_PLUS   shift, and go to state 115
    T_MINUS  shift, and go to state 116
    T_TIMES  shift, and go to state 117
    T_DIV    shift, and go to state 118
    T_POW    shift, and go to state 119
    T_DOT    shift, and go to state 120
    T_EQUAL  shift, and go to state 121
    T_LOWER  shift, and go to state 122
    T_LEQ    shift, and go to state 123

    $default  reduce using rule 97 (comma-arg)

    comma-arg  go to state 160


State 156

   69 sc-expr: T_SEMI_COLON expr sc-expr .

    $default  reduce using rule 69 (sc-expr)


State 157

   88 expr: expr T_DOT T_OBJ_ID T_L_PAR args . T_R_PAR

    T_R_PAR  shift, and go to state 161


State 158

   71 expr: T_IF expr T_THEN expr T_ELSE expr .
   78     | expr . T_PLUS expr
   79     | expr . T_AND expr
   80     | expr . T_EQUAL expr
   81     | expr . T_LEQ expr
   82     | expr . T_LOWER expr
   83     | expr . T_MINUS expr
   84     | expr . T_TIMES expr
   85     | expr . T_DIV expr
   86     | expr . T_POW expr
   88     | expr . T_DOT T_OBJ_ID T_L_PAR args T_R_PAR

    T_AND    shift, and go to state 114
    T_PLUS   shift, and go to state 115
    T_MINUS  shift, and go to state 116
    T_TIMES  shift, and go to state 117
    T_DIV    shift, and go to state 118
    T_POW    shift, and go to state 119
    T_DOT    shift, and go to state 120
    T_EQUAL  shift, and go to state 121
    T_LOWER  shift, and go to state 122
    T_LEQ    shift, and go to state 123

    T_AND     [reduce using rule 71 (expr)]
    T_PLUS    [reduce using rule 71 (expr)]
    T_MINUS   [reduce using rule 71 (expr)]
    T_TIMES   [reduce using rule 71 (expr)]
    T_DIV     [reduce using rule 71 (expr)]
    T_POW     [reduce using rule 71 (expr)]
    T_DOT     [reduce using rule 71 (expr)]
    T_EQUAL   [reduce using rule 71 (expr)]
    T_LOWER   [reduce using rule 71 (expr)]
    T_LEQ     [reduce using rule 71 (expr)]
    $default  reduce using rule 71 (expr)


State 159

   73 expr: T_LET T_OBJ_ID T_COLON type assign T_IN . expr

    T_FALSE       shift, and go to state 81
    T_IF          shift, and go to state 82
    T_ISNULL      shift, and go to state 83
    T_LET         shift, and go to state 84
    T_NEW         shift, and go to state 85
    T_NOT         shift, and go to state 86
    T_TRUE        shift, and go to state 87
    T_WHILE       shift, and go to state 88
    T_OBJ_ID      shift, and go to state 89
    T_INT_LIT     shift, and go to state 90
    T_STRING_LIT  shift, and go to state 91
    T_L_BRACE     shift, and go to state 92
    T_L_PAR       shift, and go to state 93
    T_MINUS       shift, and go to state 94

    block            go to state 95
    expr             go to state 162
    literal          go to state 97
    boolean-literal  go to state 98


State 160

   98 comma-arg: T_COMMA expr comma-arg .

    $default  reduce using rule 98 (comma-arg)


State 161

   88 expr: expr T_DOT T_OBJ_ID T_L_PAR args T_R_PAR .

    $default  reduce using rule 88 (expr)


State 162

   73 expr: T_LET T_OBJ_ID T_COLON type assign T_IN expr .
   78     | expr . T_PLUS expr
   79     | expr . T_AND expr
   80     | expr . T_EQUAL expr
   81     | expr . T_LEQ expr
   82     | expr . T_LOWER expr
   83     | expr . T_MINUS expr
   84     | expr . T_TIMES expr
   85     | expr . T_DIV expr
   86     | expr . T_POW expr
   88     | expr . T_DOT T_OBJ_ID T_L_PAR args T_R_PAR

    T_AND    shift, and go to state 114
    T_PLUS   shift, and go to state 115
    T_MINUS  shift, and go to state 116
    T_TIMES  shift, and go to state 117
    T_DIV    shift, and go to state 118
    T_POW    shift, and go to state 119
    T_DOT    shift, and go to state 120
    T_EQUAL  shift, and go to state 121
    T_LOWER  shift, and go to state 122
    T_LEQ    shift, and go to state 123

    T_AND     [reduce using rule 73 (expr)]
    T_PLUS    [reduce using rule 73 (expr)]
    T_MINUS   [reduce using rule 73 (expr)]
    T_TIMES   [reduce using rule 73 (expr)]
    T_DIV     [reduce using rule 73 (expr)]
    T_POW     [reduce using rule 73 (expr)]
    T_DOT     [reduce using rule 73 (expr)]
    T_EQUAL   [reduce using rule 73 (expr)]
    T_LOWER   [reduce using rule 73 (expr)]
    T_LEQ     [reduce using rule 73 (expr)]
    $default  reduce using rule 73 (expr)
