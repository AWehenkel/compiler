declare i1 @inputBool()
declare i32 @inputInt32()
declare i8* @inputLine()
declare void @print(i8*)
declare void @printInt32(i32)
declare void @printBool(i1)
declare i32 @strcmp(i8*, i8*)
declare float @llvm.powi.f32(float, i32)

@.str_empty = private unnamed_addr constant [1 x i8] c"\00", align 1
@.str0 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@.str1 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@.str2 = private unnamed_addr constant [17 x i8] c"List has length\0a\00", align 1
@.str3 = private unnamed_addr constant [2 x i8] c"\0a\00", align 1
@.str4 = private unnamed_addr constant [2 x i8] c"\0a\00", align 1
@.str5 = private unnamed_addr constant [2 x i8] c"\0a\00", align 1
@.str6 = private unnamed_addr constant [2 x i8] c"\0a\00", align 1
@.str7 = private unnamed_addr constant [3 x i8] c"ok\00", align 1
@.str8 = private unnamed_addr constant [3 x i8] c"ko\00", align 1
@.str9 = private unnamed_addr constant [11 x i8] c"Ca marche\0a\00", align 1
@.str10 = private unnamed_addr constant [2 x i8] c"\0a\00", align 1
@.str11 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str12 = private unnamed_addr constant [2 x i8] c"\0a\00", align 1
@.str13 = private unnamed_addr constant [7 x i8] c"coucou\00", align 1
declare noalias i8* @malloc(i32)

%struct.List = type {
	%struct.ListVTable*
}

%struct.ListVTable = type {
	i32 (%struct.List*)*,
	i1 (%struct.List*)*
}

@ListVTable_inst = global %struct.ListVTable{
	i32 (%struct.List*)* @List_length,
	i1 (%struct.List*)* @List_isNil
}

define void @ListInit(%struct.List* %self){
	%1 = bitcast %struct.List* %self to %struct.Object*
	call void @ObjectInit(%struct.Object* %1)
	%2 = getelementptr inbounds %struct.List* %self, i32 0, i32 0
	store %struct.ListVTable* @ListVTable_inst, %struct.ListVTable** %2
	ret void
}

define %struct.List* @ListNew(){
	%self = alloca %struct.List*
	%1 = getelementptr %struct.List* null, i32 1
	%size = ptrtoint %struct.List* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.List*
	store %struct.List* %3, %struct.List** %self
	%4 = load %struct.List** %self
	%5 = icmp ne %struct.List* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @ListInit(%struct.List* %4)
	br label %null

null:   			; preds = %5
	ret %struct.List* %4
}

%struct.Nil = type {
	%struct.NilVTable*
}

%struct.NilVTable = type {
	i32 (%struct.Nil*)*,
	i1 (%struct.Nil*)*
}

@NilVTable_inst = global %struct.NilVTable{
	i32 (%struct.Nil*)* bitcast (i32 (%struct.List*)* @List_length to i32 (%struct.Nil*)*),
	i1 (%struct.Nil*)* bitcast (i1 (%struct.List*)* @List_isNil to i1 (%struct.Nil*)*)
}

define void @NilInit(%struct.Nil* %self){
	%1 = bitcast %struct.Nil* %self to %struct.List*
	call void @ListInit(%struct.List* %1)
	%2 = getelementptr inbounds %struct.Nil* %self, i32 0, i32 0
	store %struct.NilVTable* @NilVTable_inst, %struct.NilVTable** %2
	ret void
}

define %struct.Nil* @NilNew(){
	%self = alloca %struct.Nil*
	%1 = getelementptr %struct.Nil* null, i32 1
	%size = ptrtoint %struct.Nil* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.Nil*
	store %struct.Nil* %3, %struct.Nil** %self
	%4 = load %struct.Nil** %self
	%5 = icmp ne %struct.Nil* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @NilInit(%struct.Nil* %4)
	br label %null

null:   			; preds = %5
	ret %struct.Nil* %4
}

%struct.Cons = type {
	%struct.ConsVTable*,
	%struct.List*,
	i32
}

%struct.ConsVTable = type {
	i32 (%struct.Cons*)*,
	i1 (%struct.Cons*)*,
	i32 (%struct.Cons*)*,
	%struct.Cons* (%struct.Cons*, i32, %struct.List*)*
}

@ConsVTable_inst = global %struct.ConsVTable{
	i32 (%struct.Cons*)* @Cons_length,
	i1 (%struct.Cons*)* @Cons_isNil,
	i32 (%struct.Cons*)* @Cons_head,
	%struct.Cons* (%struct.Cons*, i32, %struct.List*)* @Cons_init
}

define void @ConsInit(%struct.Cons* %self){
	%1 = bitcast %struct.Cons* %self to %struct.List*
	call void @ListInit(%struct.List* %1)
	%tail = getelementptr inbounds %struct.Cons* %self, i32 0, i32 1
	%2 = alloca %struct.Nil*
	; new
	%3 = call %struct.Nil* @NilNew()
	store %struct.Nil* %3, %struct.Nil** %2
	%4 = load %struct.Nil** %2
	%5 = bitcast %struct.Nil* %4 to %struct.List*
	store %struct.List* %5, %struct.List** %tail
	%head = getelementptr inbounds %struct.Cons* %self, i32 0, i32 2
	store i32 0, i32* %head
	%6 = getelementptr inbounds %struct.Cons* %self, i32 0, i32 0
	store %struct.ConsVTable* @ConsVTable_inst, %struct.ConsVTable** %6
	ret void
}

define %struct.Cons* @ConsNew(){
	%self = alloca %struct.Cons*
	%1 = getelementptr %struct.Cons* null, i32 1
	%size = ptrtoint %struct.Cons* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.Cons*
	store %struct.Cons* %3, %struct.Cons** %self
	%4 = load %struct.Cons** %self
	%5 = icmp ne %struct.Cons* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @ConsInit(%struct.Cons* %4)
	br label %null

null:   			; preds = %5
	ret %struct.Cons* %4
}

%struct.Main = type {
	%struct.MainVTable*,
	i32
}

%struct.MainVTable = type {
	i32 (%struct.Main*)*,
	%struct.IO* (%struct.Main*, i8*)*,
	%struct.IO* (%struct.Main*, i1)*,
	%struct.IO* (%struct.Main*, i32)*,
	i1 (%struct.Main*)*,
	i8* (%struct.Main*)*,
	i1 (%struct.Main*)*,
	i32 (%struct.Main*)*
}

@MainVTable_inst = global %struct.MainVTable{
	i32 (%struct.Main*)* bitcast (i32 (%struct.IO*)* @IO_inputInt32 to i32 (%struct.Main*)*),
	%struct.IO* (%struct.Main*, i8*)* bitcast (%struct.IO* (%struct.IO*, i8*)* @IO_print to %struct.IO* (%struct.Main*, i8*)*),
	%struct.IO* (%struct.Main*, i1)* bitcast (%struct.IO* (%struct.IO*, i1)* @IO_printBool to %struct.IO* (%struct.Main*, i1)*),
	%struct.IO* (%struct.Main*, i32)* bitcast (%struct.IO* (%struct.IO*, i32)* @IO_printInt32 to %struct.IO* (%struct.Main*, i32)*),
	i1 (%struct.Main*)* bitcast (i1 (%struct.IO*)* @IO_inputBool to i1 (%struct.Main*)*),
	i8* (%struct.Main*)* bitcast (i8* (%struct.IO*)* @IO_inputLine to i8* (%struct.Main*)*),
	i1 (%struct.Main*)* @Main_test,
	i32 (%struct.Main*)* @Main_main
}

define void @MainInit(%struct.Main* %self){
	%1 = bitcast %struct.Main* %self to %struct.IO*
	call void @IOInit(%struct.IO* %1)
	%test = getelementptr inbounds %struct.Main* %self, i32 0, i32 1
	%2 = alloca i32
	store i32 7, i32* %2
	%3 = load i32* %2
	store i32 %3, i32* %test
	%4 = getelementptr inbounds %struct.Main* %self, i32 0, i32 0
	store %struct.MainVTable* @MainVTable_inst, %struct.MainVTable** %4
	ret void
}

define %struct.Main* @MainNew(){
	%self = alloca %struct.Main*
	%1 = getelementptr %struct.Main* null, i32 1
	%size = ptrtoint %struct.Main* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.Main*
	store %struct.Main* %3, %struct.Main** %self
	%4 = load %struct.Main** %self
	%5 = icmp ne %struct.Main* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @MainInit(%struct.Main* %4)
	br label %null

null:   			; preds = %5
	ret %struct.Main* %4
}

%struct.IO = type {
	%struct.IOVTable*
}

%struct.IOVTable = type {
	i32 (%struct.IO*)*,
	%struct.IO* (%struct.IO*, i8*)*,
	%struct.IO* (%struct.IO*, i1)*,
	%struct.IO* (%struct.IO*, i32)*,
	i1 (%struct.IO*)*,
	i8* (%struct.IO*)*
}

@IOVTable_inst = global %struct.IOVTable{
	i32 (%struct.IO*)* @IO_inputInt32,
	%struct.IO* (%struct.IO*, i8*)* @IO_print,
	%struct.IO* (%struct.IO*, i1)* @IO_printBool,
	%struct.IO* (%struct.IO*, i32)* @IO_printInt32,
	i1 (%struct.IO*)* @IO_inputBool,
	i8* (%struct.IO*)* @IO_inputLine
}

define void @IOInit(%struct.IO* %self){
	%1 = bitcast %struct.IO* %self to %struct.Object*
	call void @ObjectInit(%struct.Object* %1)
	%2 = getelementptr inbounds %struct.IO* %self, i32 0, i32 0
	store %struct.IOVTable* @IOVTable_inst, %struct.IOVTable** %2
	ret void
}

define %struct.IO* @IONew(){
	%self = alloca %struct.IO*
	%1 = getelementptr %struct.IO* null, i32 1
	%size = ptrtoint %struct.IO* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.IO*
	store %struct.IO* %3, %struct.IO** %self
	%4 = load %struct.IO** %self
	%5 = icmp ne %struct.IO* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @IOInit(%struct.IO* %4)
	br label %null

null:   			; preds = %5
	ret %struct.IO* %4
}

%struct.Object = type {
	%struct.ObjectVTable*
}

%struct.ObjectVTable = type {
}

@ObjectVTable_inst = global %struct.ObjectVTable{
}

define void @ObjectInit(%struct.Object* %self){
	%1 = getelementptr inbounds %struct.Object* %self, i32 0, i32 0
	store %struct.ObjectVTable* @ObjectVTable_inst, %struct.ObjectVTable** %1
	ret void
}

define %struct.Object* @ObjectNew(){
	%self = alloca %struct.Object*
	%1 = getelementptr %struct.Object* null, i32 1
	%size = ptrtoint %struct.Object* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.Object*
	store %struct.Object* %3, %struct.Object** %self
	%4 = load %struct.Object** %self
	%5 = icmp ne %struct.Object* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @ObjectInit(%struct.Object* %4)
	br label %null

null:   			; preds = %5
	ret %struct.Object* %4
}

define %struct.IO* @IO_print(%struct.IO* %self, i8* %s) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i8*
	store i8* %s, i8** %2
	%3 = alloca %struct.IO*
	%4 = alloca %struct.IO*
	%5 = alloca i8*
	%6 = load i8** %2
	store i8* %6, i8** %5
;call
	%7 = load i8** %5
call void @print(i8* %7)
	%8 = alloca %struct.IO*
	%9 = load %struct.IO** %1
	store %struct.IO* %9, %struct.IO** %8
	%10 = load %struct.IO** %8
	store %struct.IO* %10, %struct.IO** %3
	%11 = load %struct.IO** %3
	ret %struct.IO* %11
}

define %struct.IO* @IO_printBool(%struct.IO* %self, i1 %b) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i1
	store i1 %b, i1* %2
	%3 = alloca %struct.IO*
	%4 = alloca %struct.IO*
	%5 = alloca i1
	%6 = load i1* %2
	store i1 %6, i1* %5
;call
	%7 = load i1* %5
call void @printBool(i1 %7)
	%8 = alloca %struct.IO*
	%9 = load %struct.IO** %1
	store %struct.IO* %9, %struct.IO** %8
	%10 = load %struct.IO** %8
	store %struct.IO* %10, %struct.IO** %3
	%11 = load %struct.IO** %3
	ret %struct.IO* %11
}

define %struct.IO* @IO_printInt32(%struct.IO* %self, i32 %i) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i32
	store i32 %i, i32* %2
	%3 = alloca %struct.IO*
	%4 = alloca %struct.IO*
	%5 = alloca i32
	%6 = load i32* %2
	store i32 %6, i32* %5
;call
	%7 = load i32* %5
call void @printInt32(i32 %7)
	%8 = alloca %struct.IO*
	%9 = load %struct.IO** %1
	store %struct.IO* %9, %struct.IO** %8
	%10 = load %struct.IO** %8
	store %struct.IO* %10, %struct.IO** %3
	%11 = load %struct.IO** %3
	ret %struct.IO* %11
}

define i8* @IO_inputLine(%struct.IO* %self) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i8*
	%3 = alloca i8*
;call
	%4 = call i8* @inputLine()
	store i8* %4, i8** %3
	%5 = load i8** %3
	store i8* %5, i8** %2
	%6 = load i8** %2
	ret i8* %6
}

define i1 @IO_inputBool(%struct.IO* %self) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i1
	%3 = alloca i1
;call
	%4 = call i1 @inputBool()
	store i1 %4, i1* %3
	%5 = load i1* %3
	store i1 %5, i1* %2
	%6 = load i1* %2
	ret i1 %6
}

define i32 @IO_inputInt32(%struct.IO* %self) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i32
	%3 = alloca i32
;call
	%4 = call i32 @inputInt32()
	store i32 %4, i32* %3
	%5 = load i32* %3
	store i32 %5, i32* %2
	%6 = load i32* %2
	ret i32 %6
}

define i1 @List_isNil(%struct.List* %self) #0 {
	%1 = alloca %struct.List*
	store %struct.List* %self, %struct.List** %1
	%2 = alloca i1
	%3 = alloca i1
	store i1 true, i1* %3
	%4 = load i1* %3
	store i1 %4, i1* %2
	%5 = load i1* %2
	ret i1 %5
}

define i32 @List_length(%struct.List* %self) #0 {
	%1 = alloca %struct.List*
	store %struct.List* %self, %struct.List** %1
	%2 = alloca i32
	%3 = alloca i32
	store i32 0, i32* %3
	%4 = load i32* %3
	store i32 %4, i32* %2
	%5 = load i32* %2
	ret i32 %5
}

define %struct.Cons* @Cons_init(%struct.Cons* %self, i32 %hd, %struct.List* %tl) #0 {
	%1 = alloca %struct.Cons*
	store %struct.Cons* %self, %struct.Cons** %1
	%2 = alloca i32
	store i32 %hd, i32* %2
	%3 = alloca %struct.List*
	store %struct.List* %tl, %struct.List** %3
	%4 = alloca %struct.Cons*
	%5 = alloca i32
	; assignement
	%6 = alloca i32
	%7 = load i32* %2
	store i32 %7, i32* %6
	%8 = load i32* %6
;field
	%9 = load %struct.Cons** %1
	%10 = getelementptr inbounds %struct.Cons* %9, i32 0, i32 2
	store i32 %8, i32* %10
	store i32 %8, i32* %5
	%11 = alloca %struct.List*
	; assignement
	%12 = alloca %struct.List*
	%13 = load %struct.List** %3
	store %struct.List* %13, %struct.List** %12
	%14 = load %struct.List** %12
;field
	%15 = load %struct.Cons** %1
	%16 = getelementptr inbounds %struct.Cons* %15, i32 0, i32 1
	store %struct.List* %14, %struct.List** %16
	store %struct.List* %14, %struct.List** %11
	%17 = alloca %struct.Cons*
	%18 = load %struct.Cons** %1
	store %struct.Cons* %18, %struct.Cons** %17
	%19 = load %struct.Cons** %17
	store %struct.Cons* %19, %struct.Cons** %4
	%20 = load %struct.Cons** %4
	ret %struct.Cons* %20
}

define i32 @Cons_head(%struct.Cons* %self) #0 {
	%1 = alloca %struct.Cons*
	store %struct.Cons* %self, %struct.Cons** %1
	%2 = alloca i32
	%3 = alloca i32
	%4 = load %struct.Cons** %1
	%5 = getelementptr inbounds %struct.Cons* %4, i32 0, i32 2
	%6 = load i32* %5
	store i32 %6, i32* %3
	%7 = load i32* %3
	store i32 %7, i32* %2
	%8 = load i32* %2
	ret i32 %8
}

define i1 @Cons_isNil(%struct.Cons* %self) #0 {
	%1 = alloca %struct.Cons*
	store %struct.Cons* %self, %struct.Cons** %1
	%2 = alloca i1
	%3 = alloca i1
	store i1 false, i1* %3
	%4 = load i1* %3
	store i1 %4, i1* %2
	%5 = load i1* %2
	ret i1 %5
}

define i32 @Cons_length(%struct.Cons* %self) #0 {
	%1 = alloca %struct.Cons*
	store %struct.Cons* %self, %struct.Cons** %1
	%2 = alloca i32
	%3 = alloca i32
	; condition
	%4 = alloca i1
	; unary
	%5 = alloca i1
	; binary operation
	%6 = alloca i8*
	store i8* getelementptr inbounds ([2 x i8]* @.str0, i32 0, i32 0), i8** %6
	%7 = alloca i8*
	store i8* getelementptr inbounds ([2 x i8]* @.str1, i32 0, i32 0), i8** %7
	%8 = load i8** %6
	%9 = load i8** %7
	%10 = call i32 @strcmp(i8* %8, i8* %9)
	%11 = icmp eq i32 0, %10
	store i1 %11, i1* %5
	%12 = load i1* %5
	%13 = add i1 %12, 1
	store i1 %13, i1* %4
	%14 = load i1* %4
	br i1 %14, label %then_14, label %else_14
	
then_14:
		%15 = alloca i32
		; binary operation
		%16 = alloca i32
		store i32 1, i32* %16
		%17 = alloca i32
		%18 = alloca %struct.List*
		%19 = load %struct.Cons** %1
		%20 = getelementptr inbounds %struct.Cons* %19, i32 0, i32 1
		%21 = load %struct.List** %20
		store %struct.List* %21, %struct.List** %18
; call
		%22 = load %struct.List** %18
		%23 = getelementptr inbounds %struct.List* %22, i32 0, i32 0
		%24 = load %struct.ListVTable** %23
		%25 = getelementptr inbounds %struct.ListVTable* %24, i32 0, i32 0
		%26 = load i32 (%struct.List*)** %25
		%27 = call i32 %26(%struct.List* %22)
		store i32 %27, i32* %17
		%28 = load i32* %16
		%29 = load i32* %17
		%30 = add nuw i32 %28, %29
		store i32 %30, i32* %15
;avant bitcast
		%31 = load i32* %15
		store i32 %31, i32* %3
		br label %end_14
	
else_14:
		%32 = alloca i32
		store i32 1, i32* %32
		%33 = load i32* %32
		store i32 %33, i32* %3
		br label %end_14
	
end_14:
	%34 = load i32* %3
	store i32 %34, i32* %2
	%35 = load i32* %2
	ret i32 %35
}

define i32 @Main_main(%struct.Main* %self) #0 {
	%1 = alloca %struct.Main*
	store %struct.Main* %self, %struct.Main** %1
	%2 = alloca i32
	%3 = alloca i32
	; let
	%4 = alloca %struct.List*
	store %struct.List* null, %struct.List** %4
	%5 = alloca i32
	%6 = alloca %struct.IO*
	%7 = alloca i8*
	store i8* getelementptr inbounds ([17 x i8]* @.str2, i32 0, i32 0), i8** %7
; call
	%8 = load %struct.Main** %1
	%9 = getelementptr inbounds %struct.Main* %8, i32 0, i32 0
	%10 = load %struct.MainVTable** %9
	%11 = getelementptr inbounds %struct.MainVTable* %10, i32 0, i32 1
	%12 = load %struct.IO* (%struct.Main*, i8*)** %11
	%13 = load i8** %7
	%14 = call %struct.IO* %12(%struct.Main* %8, i8* %13)
	store %struct.IO* %14, %struct.IO** %6
	%15 = alloca %struct.IO*
	%16 = alloca i8*
	store i8* getelementptr inbounds ([2 x i8]* @.str3, i32 0, i32 0), i8** %16
	%17 = alloca %struct.IO*
	%18 = alloca i32
	store i32 1, i32* %18
; call
	%19 = load %struct.Main** %1
	%20 = getelementptr inbounds %struct.Main* %19, i32 0, i32 0
	%21 = load %struct.MainVTable** %20
	%22 = getelementptr inbounds %struct.MainVTable* %21, i32 0, i32 3
	%23 = load %struct.IO* (%struct.Main*, i32)** %22
	%24 = load i32* %18
	%25 = call %struct.IO* %23(%struct.Main* %19, i32 %24)
	store %struct.IO* %25, %struct.IO** %17
; call
	%26 = load %struct.IO** %17
	%27 = getelementptr inbounds %struct.IO* %26, i32 0, i32 0
	%28 = load %struct.IOVTable** %27
	%29 = getelementptr inbounds %struct.IOVTable* %28, i32 0, i32 1
	%30 = load %struct.IO* (%struct.IO*, i8*)** %29
	%31 = load i8** %16
	%32 = call %struct.IO* %30(%struct.IO* %26, i8* %31)
	store %struct.IO* %32, %struct.IO** %15
	%33 = alloca %struct.IO*
	%34 = alloca i8*
	store i8* getelementptr inbounds ([2 x i8]* @.str4, i32 0, i32 0), i8** %34
	%35 = alloca %struct.IO*
	%36 = alloca i32
	store i32 1, i32* %36
; call
	%37 = load %struct.Main** %1
	%38 = getelementptr inbounds %struct.Main* %37, i32 0, i32 0
	%39 = load %struct.MainVTable** %38
	%40 = getelementptr inbounds %struct.MainVTable* %39, i32 0, i32 3
	%41 = load %struct.IO* (%struct.Main*, i32)** %40
	%42 = load i32* %36
	%43 = call %struct.IO* %41(%struct.Main* %37, i32 %42)
	store %struct.IO* %43, %struct.IO** %35
; call
	%44 = load %struct.IO** %35
	%45 = getelementptr inbounds %struct.IO* %44, i32 0, i32 0
	%46 = load %struct.IOVTable** %45
	%47 = getelementptr inbounds %struct.IOVTable* %46, i32 0, i32 1
	%48 = load %struct.IO* (%struct.IO*, i8*)** %47
	%49 = load i8** %34
	%50 = call %struct.IO* %48(%struct.IO* %44, i8* %49)
	store %struct.IO* %50, %struct.IO** %33
	%51 = alloca %struct.IO*
	%52 = alloca i8*
	store i8* getelementptr inbounds ([2 x i8]* @.str5, i32 0, i32 0), i8** %52
	%53 = alloca %struct.IO*
	%54 = alloca i32
	; assignement
	%55 = alloca i32
	; binary operation
	%56 = alloca i32
	%57 = load %struct.Main** %1
	%58 = getelementptr inbounds %struct.Main* %57, i32 0, i32 1
	%59 = load i32* %58
	store i32 %59, i32* %56
	%60 = alloca i32
	store i32 1, i32* %60
	%61 = load i32* %56
	%62 = load i32* %60
	%63 = add nuw i32 %61, %62
	store i32 %63, i32* %55
	%64 = load i32* %55
;field
	%65 = load %struct.Main** %1
	%66 = getelementptr inbounds %struct.Main* %65, i32 0, i32 1
	store i32 %64, i32* %66
	store i32 %64, i32* %54
; call
	%67 = load %struct.Main** %1
	%68 = getelementptr inbounds %struct.Main* %67, i32 0, i32 0
	%69 = load %struct.MainVTable** %68
	%70 = getelementptr inbounds %struct.MainVTable* %69, i32 0, i32 3
	%71 = load %struct.IO* (%struct.Main*, i32)** %70
	%72 = load i32* %54
	%73 = call %struct.IO* %71(%struct.Main* %67, i32 %72)
	store %struct.IO* %73, %struct.IO** %53
; call
	%74 = load %struct.IO** %53
	%75 = getelementptr inbounds %struct.IO* %74, i32 0, i32 0
	%76 = load %struct.IOVTable** %75
	%77 = getelementptr inbounds %struct.IOVTable* %76, i32 0, i32 1
	%78 = load %struct.IO* (%struct.IO*, i8*)** %77
	%79 = load i8** %52
	%80 = call %struct.IO* %78(%struct.IO* %74, i8* %79)
	store %struct.IO* %80, %struct.IO** %51
	%81 = alloca %struct.IO*
	%82 = alloca i8*
	store i8* getelementptr inbounds ([2 x i8]* @.str6, i32 0, i32 0), i8** %82
	%83 = alloca %struct.IO*
	%84 = alloca i32
	%85 = load %struct.Main** %1
	%86 = getelementptr inbounds %struct.Main* %85, i32 0, i32 1
	%87 = load i32* %86
	store i32 %87, i32* %84
; call
	%88 = load %struct.Main** %1
	%89 = getelementptr inbounds %struct.Main* %88, i32 0, i32 0
	%90 = load %struct.MainVTable** %89
	%91 = getelementptr inbounds %struct.MainVTable* %90, i32 0, i32 3
	%92 = load %struct.IO* (%struct.Main*, i32)** %91
	%93 = load i32* %84
	%94 = call %struct.IO* %92(%struct.Main* %88, i32 %93)
	store %struct.IO* %94, %struct.IO** %83
; call
	%95 = load %struct.IO** %83
	%96 = getelementptr inbounds %struct.IO* %95, i32 0, i32 0
	%97 = load %struct.IOVTable** %96
	%98 = getelementptr inbounds %struct.IOVTable* %97, i32 0, i32 1
	%99 = load %struct.IO* (%struct.IO*, i8*)** %98
	%100 = load i8** %82
	%101 = call %struct.IO* %99(%struct.IO* %95, i8* %100)
	store %struct.IO* %101, %struct.IO** %81
	%102 = alloca %struct.List*
	; assignement
	%103 = alloca %struct.Cons*
	; new
	%104 = call %struct.Cons* @ConsNew()
	store %struct.Cons* %104, %struct.Cons** %103
	%105 = load %struct.Cons** %103
	%106 = bitcast %struct.Cons* %105 to %struct.List*
	store %struct.List* %106, %struct.List** %4
	store %struct.List* %106, %struct.List** %102
	%107 = alloca i1
; call
	%108 = load %struct.Main** %1
	%109 = getelementptr inbounds %struct.Main* %108, i32 0, i32 0
	%110 = load %struct.MainVTable** %109
	%111 = getelementptr inbounds %struct.MainVTable* %110, i32 0, i32 6
	%112 = load i1 (%struct.Main*)** %111
	%113 = call i1 %112(%struct.Main* %108)
	store i1 %113, i1* %107
	%114 = alloca i1
	; condition
	%115 = alloca i1
	; binary operation
	; condition
	%116 = alloca i1
	%117 = alloca %struct.IO*
	%118 = alloca i8*
	store i8* getelementptr inbounds ([3 x i8]* @.str7, i32 0, i32 0), i8** %118
; call
	%119 = load %struct.Main** %1
	%120 = getelementptr inbounds %struct.Main* %119, i32 0, i32 0
	%121 = load %struct.MainVTable** %120
	%122 = getelementptr inbounds %struct.MainVTable* %121, i32 0, i32 1
	%123 = load %struct.IO* (%struct.Main*, i8*)** %122
	%124 = load i8** %118
	%125 = call %struct.IO* %123(%struct.Main* %119, i8* %124)
	store %struct.IO* %125, %struct.IO** %117
	%126 = alloca i1
	store i1 true, i1* %126
	%127 = load i1* %126
	store i1 %127, i1* %116
	%128 = load i1* %116
	br i1 %128, label %then_128, label %else_128
	
then_128:
		%129 = alloca i1
		store i1 true, i1* %129
;avant bitcast
		%130 = load i1* %129
		store i1 %130, i1* %115
		br label %end_128
	
else_128:
		%131 = alloca i1
		%132 = alloca %struct.IO*
		%133 = alloca i8*
		store i8* getelementptr inbounds ([3 x i8]* @.str8, i32 0, i32 0), i8** %133
; call
		%134 = load %struct.Main** %1
		%135 = getelementptr inbounds %struct.Main* %134, i32 0, i32 0
		%136 = load %struct.MainVTable** %135
		%137 = getelementptr inbounds %struct.MainVTable* %136, i32 0, i32 1
		%138 = load %struct.IO* (%struct.Main*, i8*)** %137
		%139 = load i8** %133
		%140 = call %struct.IO* %138(%struct.Main* %134, i8* %139)
		store %struct.IO* %140, %struct.IO** %132
		%141 = alloca i1
		store i1 true, i1* %141
		%142 = load i1* %141
		store i1 %142, i1* %131
		%143 = load i1* %131
		store i1 %143, i1* %115
		br label %end_128
	
end_128:
	%144 = load i1* %115
	br i1 %144, label %then_144, label %end_144
	
then_144:
		%145 = alloca %struct.IO*
		%146 = alloca i8*
		store i8* getelementptr inbounds ([11 x i8]* @.str9, i32 0, i32 0), i8** %146
; call
		%147 = load %struct.Main** %1
		%148 = getelementptr inbounds %struct.Main* %147, i32 0, i32 0
		%149 = load %struct.MainVTable** %148
		%150 = getelementptr inbounds %struct.MainVTable* %149, i32 0, i32 1
		%151 = load %struct.IO* (%struct.Main*, i8*)** %150
		%152 = load i8** %146
		%153 = call %struct.IO* %151(%struct.Main* %147, i8* %152)
		store %struct.IO* %153, %struct.IO** %145
		store i1 0, i1* %114
		br label %end_144
	
end_144:
	%154 = alloca %struct.IO*
	%155 = alloca i32
	%156 = alloca %struct.List*
	%157 = load %struct.List** %4
	store %struct.List* %157, %struct.List** %156
; call
	%158 = load %struct.List** %156
	%159 = getelementptr inbounds %struct.List* %158, i32 0, i32 0
	%160 = load %struct.ListVTable** %159
	%161 = getelementptr inbounds %struct.ListVTable* %160, i32 0, i32 0
	%162 = load i32 (%struct.List*)** %161
	%163 = call i32 %162(%struct.List* %158)
	store i32 %163, i32* %155
; call
	%164 = load %struct.Main** %1
	%165 = getelementptr inbounds %struct.Main* %164, i32 0, i32 0
	%166 = load %struct.MainVTable** %165
	%167 = getelementptr inbounds %struct.MainVTable* %166, i32 0, i32 3
	%168 = load %struct.IO* (%struct.Main*, i32)** %167
	%169 = load i32* %155
	%170 = call %struct.IO* %168(%struct.Main* %164, i32 %169)
	store %struct.IO* %170, %struct.IO** %154
	%171 = alloca %struct.IO*
	%172 = alloca i8*
	store i8* getelementptr inbounds ([2 x i8]* @.str10, i32 0, i32 0), i8** %172
; call
	%173 = load %struct.Main** %1
	%174 = getelementptr inbounds %struct.Main* %173, i32 0, i32 0
	%175 = load %struct.MainVTable** %174
	%176 = getelementptr inbounds %struct.MainVTable* %175, i32 0, i32 1
	%177 = load %struct.IO* (%struct.Main*, i8*)** %176
	%178 = load i8** %172
	%179 = call %struct.IO* %177(%struct.Main* %173, i8* %178)
	store %struct.IO* %179, %struct.IO** %171
	%180 = alloca i1
	; let
	%181 = alloca i32
	%182 = alloca i32
	store i32 10, i32* %182
	%183 = load i32* %182
	store i32 %183, i32* %181
	%184 = alloca i1
	%185 = alloca i1
	%186 = alloca i32
	; while
	br label %loop_1

loop_1:
	%187 = alloca i1
	; binary operation
	%188 = alloca i32
	store i32 0, i32* %188
	%189 = alloca i32
	%190 = load i32* %181
	store i32 %190, i32* %189
	%191 = load i32* %188
	%192 = load i32* %189
	%193 = icmp slt i32 %191, %192
	store i1 %193, i1* %187
	%194 = load i1* %187
	br i1 %194, label %do_1, label %end_1

do_1:
	%195 = alloca %struct.IO*
	%196 = alloca i32
	%197 = load i32* %181
	store i32 %197, i32* %196
; call
	%198 = load %struct.Main** %1
	%199 = getelementptr inbounds %struct.Main* %198, i32 0, i32 0
	%200 = load %struct.MainVTable** %199
	%201 = getelementptr inbounds %struct.MainVTable* %200, i32 0, i32 3
	%202 = load %struct.IO* (%struct.Main*, i32)** %201
	%203 = load i32* %196
	%204 = call %struct.IO* %202(%struct.Main* %198, i32 %203)
	store %struct.IO* %204, %struct.IO** %195
	%205 = alloca %struct.IO*
	%206 = alloca i8*
	store i8* getelementptr inbounds ([2 x i8]* @.str11, i32 0, i32 0), i8** %206
; call
	%207 = load %struct.Main** %1
	%208 = getelementptr inbounds %struct.Main* %207, i32 0, i32 0
	%209 = load %struct.MainVTable** %208
	%210 = getelementptr inbounds %struct.MainVTable* %209, i32 0, i32 1
	%211 = load %struct.IO* (%struct.Main*, i8*)** %210
	%212 = load i8** %206
	%213 = call %struct.IO* %211(%struct.Main* %207, i8* %212)
	store %struct.IO* %213, %struct.IO** %205
	%214 = alloca i32
	; assignement
	%215 = alloca i32
	; binary operation
	%216 = alloca i32
	%217 = load i32* %181
	store i32 %217, i32* %216
	%218 = alloca i32
	store i32 1, i32* %218
	%219 = load i32* %216
	%220 = load i32* %218
	%221 = sub i32 %219, %220
	store i32 %221, i32* %215
	%222 = load i32* %215
	store i32 %222, i32* %181
	store i32 %222, i32* %214
	%223 = load i32* %214
	store i32 %223, i32* %186
	br label %loop_1

end_1:
	%224 = load i1* %185
	store i1 %224, i1* %184
	%225 = load i1* %184
	store i1 %225, i1* %180
	%226 = alloca %struct.IO*
	%227 = alloca i8*
	store i8* getelementptr inbounds ([2 x i8]* @.str12, i32 0, i32 0), i8** %227
; call
	%228 = load %struct.Main** %1
	%229 = getelementptr inbounds %struct.Main* %228, i32 0, i32 0
	%230 = load %struct.MainVTable** %229
	%231 = getelementptr inbounds %struct.MainVTable* %230, i32 0, i32 1
	%232 = load %struct.IO* (%struct.Main*, i8*)** %231
	%233 = load i8** %227
	%234 = call %struct.IO* %232(%struct.Main* %228, i8* %233)
	store %struct.IO* %234, %struct.IO** %226
	%235 = alloca i8*
	store i8* getelementptr inbounds ([7 x i8]* @.str13, i32 0, i32 0), i8** %235
	%236 = alloca %struct.Cons*
	; new
	%237 = call %struct.Cons* @ConsNew()
	store %struct.Cons* %237, %struct.Cons** %236
	%238 = alloca i32
	store i32 0, i32* %238
	%239 = load i32* %238
	store i32 %239, i32* %5
	%240 = load i32* %5
	store i32 %240, i32* %3
	%241 = load i32* %3
	store i32 %241, i32* %2
	%242 = load i32* %2
	ret i32 %242
}

define i1 @Main_test(%struct.Main* %self) #0 {
	%1 = alloca %struct.Main*
	store %struct.Main* %self, %struct.Main** %1
	%2 = alloca i1
	%3 = alloca i1
	store i1 0, i1* %3
	%4 = load i1* %3
	store i1 %4, i1* %2
	%5 = load i1* %2
	ret i1 %5
}

define i32 @main(){
	%1 = call %struct.Main* @MainNew()
	%2 = getelementptr inbounds %struct.Main* %1, i32 0, i32 0
	%3 = load %struct.MainVTable** %2
	%4 = getelementptr inbounds %struct.MainVTable* %3, i32 0, i32 7
	%5 = load i32 (%struct.Main*)** %4
	%6 = call i32 %5(%struct.Main* %1)
	ret i32 %6
}
