declare i1 @inputBool()
declare i32 @inputInt32()
declare i8* @inputLine()
declare void @print(i8*)
declare void @printInt32(i32)
declare void @printBool(i1)
@.str0 = private unnamed_addr constant [17 x i8] c"List has length\0a\00", align 1
@.str1 = private unnamed_addr constant [2 x i8] c"\0a\00", align 1
declare noalias i8* @malloc(i32)

%struct.List = type {
	%struct.ListVTable*
}

%struct.ListVTable = type {
	i32 (%struct.List*)*,
	i1 (%struct.List*)*
}

@ListVTable_inst = global %struct.ListVTable{
	i32 (%struct.List*)* @List_length,
	i1 (%struct.List*)* @List_isNil
}

define void @ListInit(%struct.List* %self){
	%1 = bitcast %struct.List* %self to %struct.Object*
	call void @ObjectInit(%struct.Object* %1)
	%2 = getelementptr inbounds %struct.List* %self, i32 0, i32 0
	store %struct.ListVTable* @ListVTable_inst, %struct.ListVTable** %2
	ret void
}

define %struct.List* @ListNew(){
	%self = alloca %struct.List*
	%1 = getelementptr %struct.List* null, i32 1
	%size = ptrtoint %struct.List* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.List*
	store %struct.List* %3, %struct.List** %self
	%4 = load %struct.List** %self
	%5 = icmp ne %struct.List* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @ListInit(%struct.List* %4)
	br label %null

null:   			; preds = %5
	ret %struct.List* %4
}

%struct.Nil = type {
	%struct.NilVTable*
}

%struct.NilVTable = type {
	i32 (%struct.Nil*)*,
	i1 (%struct.Nil*)*
}

@NilVTable_inst = global %struct.NilVTable{
	i32 (%struct.Nil*)* bitcast (i32 (%struct.List*)* @List_length to i32 (%struct.Nil*)*),
	i1 (%struct.Nil*)* bitcast (i1 (%struct.List*)* @List_isNil to i1 (%struct.Nil*)*)
}

define void @NilInit(%struct.Nil* %self){
	%1 = bitcast %struct.Nil* %self to %struct.List*
	call void @ListInit(%struct.List* %1)
	%2 = getelementptr inbounds %struct.Nil* %self, i32 0, i32 0
	store %struct.NilVTable* @NilVTable_inst, %struct.NilVTable** %2
	ret void
}

define %struct.Nil* @NilNew(){
	%self = alloca %struct.Nil*
	%1 = getelementptr %struct.Nil* null, i32 1
	%size = ptrtoint %struct.Nil* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.Nil*
	store %struct.Nil* %3, %struct.Nil** %self
	%4 = load %struct.Nil** %self
	%5 = icmp ne %struct.Nil* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @NilInit(%struct.Nil* %4)
	br label %null

null:   			; preds = %5
	ret %struct.Nil* %4
}

%struct.Cons = type {
	%struct.ConsVTable*,
	%struct.List*,
	i32
}

%struct.ConsVTable = type {
	i32 (%struct.Cons*)*,
	i1 (%struct.Cons*)*,
	i32 (%struct.Cons*)*,
	%struct.Cons* (%struct.Cons*, i32, %struct.List*)*
}

@ConsVTable_inst = global %struct.ConsVTable{
	i32 (%struct.Cons*)* @Cons_length,
	i1 (%struct.Cons*)* @Cons_isNil,
	i32 (%struct.Cons*)* @Cons_head,
	%struct.Cons* (%struct.Cons*, i32, %struct.List*)* @Cons_init
}

define void @ConsInit(%struct.Cons* %self){
	%1 = bitcast %struct.Cons* %self to %struct.List*
	call void @ListInit(%struct.List* %1)
	%tail = getelementptr inbounds %struct.Cons* %self, i32 0, i32 1
	store %struct.List* null, %struct.List** %tail
	%head = getelementptr inbounds %struct.Cons* %self, i32 0, i32 2
	store i32 0, i32* %head
	%2 = getelementptr inbounds %struct.Cons* %self, i32 0, i32 0
	store %struct.ConsVTable* @ConsVTable_inst, %struct.ConsVTable** %2
	ret void
}

define %struct.Cons* @ConsNew(){
	%self = alloca %struct.Cons*
	%1 = getelementptr %struct.Cons* null, i32 1
	%size = ptrtoint %struct.Cons* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.Cons*
	store %struct.Cons* %3, %struct.Cons** %self
	%4 = load %struct.Cons** %self
	%5 = icmp ne %struct.Cons* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @ConsInit(%struct.Cons* %4)
	br label %null

null:   			; preds = %5
	ret %struct.Cons* %4
}

%struct.Main = type {
	%struct.MainVTable*
}

%struct.MainVTable = type {
	i32 (%struct.Main*)*,
	%struct.IO* (%struct.Main*, i8*)*,
	%struct.IO* (%struct.Main*, i1)*,
	%struct.IO* (%struct.Main*, i32)*,
	i1 (%struct.Main*)*,
	i8* (%struct.Main*)*,
	i32 (%struct.Main*)*
}

@MainVTable_inst = global %struct.MainVTable{
	i32 (%struct.Main*)* bitcast (i32 (%struct.IO*)* @IO_inputInt32 to i32 (%struct.Main*)*),
	%struct.IO* (%struct.Main*, i8*)* bitcast (%struct.IO* (%struct.IO*, i8*)* @IO_print to %struct.IO* (%struct.Main*, i8*)*),
	%struct.IO* (%struct.Main*, i1)* bitcast (%struct.IO* (%struct.IO*, i1)* @IO_printBool to %struct.IO* (%struct.Main*, i1)*),
	%struct.IO* (%struct.Main*, i32)* bitcast (%struct.IO* (%struct.IO*, i32)* @IO_printInt32 to %struct.IO* (%struct.Main*, i32)*),
	i1 (%struct.Main*)* bitcast (i1 (%struct.IO*)* @IO_inputBool to i1 (%struct.Main*)*),
	i8* (%struct.Main*)* bitcast (i8* (%struct.IO*)* @IO_inputLine to i8* (%struct.Main*)*),
	i32 (%struct.Main*)* @Main_main
}

define void @MainInit(%struct.Main* %self){
	%1 = bitcast %struct.Main* %self to %struct.IO*
	call void @IOInit(%struct.IO* %1)
	%2 = getelementptr inbounds %struct.Main* %self, i32 0, i32 0
	store %struct.MainVTable* @MainVTable_inst, %struct.MainVTable** %2
	ret void
}

define %struct.Main* @MainNew(){
	%self = alloca %struct.Main*
	%1 = getelementptr %struct.Main* null, i32 1
	%size = ptrtoint %struct.Main* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.Main*
	store %struct.Main* %3, %struct.Main** %self
	%4 = load %struct.Main** %self
	%5 = icmp ne %struct.Main* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @MainInit(%struct.Main* %4)
	br label %null

null:   			; preds = %5
	ret %struct.Main* %4
}

%struct.IO = type {
	%struct.IOVTable*
}

%struct.IOVTable = type {
	i32 (%struct.IO*)*,
	%struct.IO* (%struct.IO*, i8*)*,
	%struct.IO* (%struct.IO*, i1)*,
	%struct.IO* (%struct.IO*, i32)*,
	i1 (%struct.IO*)*,
	i8* (%struct.IO*)*
}

@IOVTable_inst = global %struct.IOVTable{
	i32 (%struct.IO*)* @IO_inputInt32,
	%struct.IO* (%struct.IO*, i8*)* @IO_print,
	%struct.IO* (%struct.IO*, i1)* @IO_printBool,
	%struct.IO* (%struct.IO*, i32)* @IO_printInt32,
	i1 (%struct.IO*)* @IO_inputBool,
	i8* (%struct.IO*)* @IO_inputLine
}

define void @IOInit(%struct.IO* %self){
	%1 = bitcast %struct.IO* %self to %struct.Object*
	call void @ObjectInit(%struct.Object* %1)
	%2 = getelementptr inbounds %struct.IO* %self, i32 0, i32 0
	store %struct.IOVTable* @IOVTable_inst, %struct.IOVTable** %2
	ret void
}

define %struct.IO* @IONew(){
	%self = alloca %struct.IO*
	%1 = getelementptr %struct.IO* null, i32 1
	%size = ptrtoint %struct.IO* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.IO*
	store %struct.IO* %3, %struct.IO** %self
	%4 = load %struct.IO** %self
	%5 = icmp ne %struct.IO* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @IOInit(%struct.IO* %4)
	br label %null

null:   			; preds = %5
	ret %struct.IO* %4
}

%struct.Object = type {
	%struct.ObjectVTable*
}

%struct.ObjectVTable = type {
}

@ObjectVTable_inst = global %struct.ObjectVTable{
}

define void @ObjectInit(%struct.Object* %self){
	%1 = getelementptr inbounds %struct.Object* %self, i32 0, i32 0
	store %struct.ObjectVTable* @ObjectVTable_inst, %struct.ObjectVTable** %1
	ret void
}

define %struct.Object* @ObjectNew(){
	%self = alloca %struct.Object*
	%1 = getelementptr %struct.Object* null, i32 1
	%size = ptrtoint %struct.Object* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.Object*
	store %struct.Object* %3, %struct.Object** %self
	%4 = load %struct.Object** %self
	%5 = icmp ne %struct.Object* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @ObjectInit(%struct.Object* %4)
	br label %null

null:   			; preds = %5
	ret %struct.Object* %4
}

define %struct.IO* @IO_print(%struct.IO* %self, i8* %s) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i8*
	store i8* %s, i8** %2
	%3 = alloca %struct.IO*
	%4 = alloca %struct.IO*
	%5 = alloca i8*
	%6 = load i8** %2
	store i8* %6, i8** %5
;call
	%7 = load i8** %5
call void @print(i8* %7)
	%8 = alloca %struct.IO*
	%9 = load %struct.IO** %1
	store %struct.IO* %9, %struct.IO** %8
	%10 = load %struct.IO** %8
	store %struct.IO* %10, %struct.IO** %3
	%11 = load %struct.IO** %3
	ret %struct.IO* %11
}

define %struct.IO* @IO_printBool(%struct.IO* %self, i1 %b) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i1
	store i1 %b, i1* %2
	%3 = alloca %struct.IO*
	%4 = alloca %struct.IO*
	%5 = alloca i1
	%6 = load i1* %2
	store i1 %6, i1* %5
;call
	%7 = load i1* %5
call void @printBool(i1 %7)
	%8 = alloca %struct.IO*
	%9 = load %struct.IO** %1
	store %struct.IO* %9, %struct.IO** %8
	%10 = load %struct.IO** %8
	store %struct.IO* %10, %struct.IO** %3
	%11 = load %struct.IO** %3
	ret %struct.IO* %11
}

define %struct.IO* @IO_printInt32(%struct.IO* %self, i32 %i) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i32
	store i32 %i, i32* %2
	%3 = alloca %struct.IO*
	%4 = alloca %struct.IO*
	%5 = alloca i32
	%6 = load i32* %2
	store i32 %6, i32* %5
;call
	%7 = load i32* %5
call void @printInt32(i32 %7)
	%8 = alloca %struct.IO*
	%9 = load %struct.IO** %1
	store %struct.IO* %9, %struct.IO** %8
	%10 = load %struct.IO** %8
	store %struct.IO* %10, %struct.IO** %3
	%11 = load %struct.IO** %3
	ret %struct.IO* %11
}

define i8* @IO_inputLine(%struct.IO* %self) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i8*
	%3 = alloca i8*
;call
	%4 = call i8* @inputLine()
	store i8* %4, i8** %3
	%5 = load i8** %3
	store i8* %5, i8** %2
	%6 = load i8** %2
	ret i8* %6
}

define i1 @IO_inputBool(%struct.IO* %self) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i1
	%3 = alloca i1
;call
	%4 = call i1 @inputBool()
	store i1 %4, i1* %3
	%5 = load i1* %3
	store i1 %5, i1* %2
	%6 = load i1* %2
	ret i1 %6
}

define i32 @IO_inputInt32(%struct.IO* %self) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i32
	%3 = alloca i32
;call
	%4 = call i32 @inputInt32()
	store i32 %4, i32* %3
	%5 = load i32* %3
	store i32 %5, i32* %2
	%6 = load i32* %2
	ret i32 %6
}

define i1 @List_isNil(%struct.List* %self) #0 {
	%1 = alloca %struct.List*
	store %struct.List* %self, %struct.List** %1
	%2 = alloca i1
	%3 = alloca i1
	store i1 true, i1* %3
	%4 = load i1* %3
	store i1 %4, i1* %2
	%5 = load i1* %2
	ret i1 %5
}

define i32 @List_length(%struct.List* %self) #0 {
	%1 = alloca %struct.List*
	store %struct.List* %self, %struct.List** %1
	%2 = alloca i32
	%3 = alloca i32
	store i32 0, i32* %3
	%4 = load i32* %3
	store i32 %4, i32* %2
	%5 = load i32* %2
	ret i32 %5
}

define %struct.Cons* @Cons_init(%struct.Cons* %self, i32 %hd, %struct.List* %tl) #0 {
	%1 = alloca %struct.Cons*
	store %struct.Cons* %self, %struct.Cons** %1
	%2 = alloca i32
	store i32 %hd, i32* %2
	%3 = alloca %struct.List*
	store %struct.List* %tl, %struct.List** %3
	%4 = alloca %struct.Cons*
	%5 = alloca i32
	; assignement
	%6 = alloca i32
;before_visit
	%7 = load i32* %2
	store i32 %7, i32* %6
;after_visit
	%8 = load i32* %6
;field
	%9 = load %struct.Cons** %1
	%10 = getelementptr inbounds %struct.Cons* %9, i32 0, i32 2
	store i32 %8, i32* %10
	store i32 %8, i32* %5
	%11 = alloca %struct.List*
	; assignement
	%12 = alloca %struct.List*
;before_visit
	%13 = load %struct.List** %3
	store %struct.List* %13, %struct.List** %12
;after_visit
	%14 = load %struct.List** %12
;field
	%15 = load %struct.Cons** %1
	%16 = getelementptr inbounds %struct.Cons* %15, i32 0, i32 1
	store %struct.List* %14, %struct.List** %16
	store %struct.List* %14, %struct.List** %11
	%17 = alloca %struct.Cons*
	%18 = load %struct.Cons** %1
	store %struct.Cons* %18, %struct.Cons** %17
	%19 = load %struct.Cons** %17
	store %struct.Cons* %19, %struct.Cons** %4
	%20 = load %struct.Cons** %4
	ret %struct.Cons* %20
}

define i32 @Cons_head(%struct.Cons* %self) #0 {
	%1 = alloca %struct.Cons*
	store %struct.Cons* %self, %struct.Cons** %1
	%2 = alloca i32
	%3 = alloca i32
	%4 = load %struct.Cons** %1
	%5 = getelementptr inbounds %struct.Cons* %4, i32 0, i32 2
	%6 = load i32* %5
	store i32 %6, i32* %3
	%7 = load i32* %3
	store i32 %7, i32* %2
	%8 = load i32* %2
	ret i32 %8
}

define i1 @Cons_isNil(%struct.Cons* %self) #0 {
	%1 = alloca %struct.Cons*
	store %struct.Cons* %self, %struct.Cons** %1
	%2 = alloca i1
	%3 = alloca i1
	store i1 false, i1* %3
	%4 = load i1* %3
	store i1 %4, i1* %2
	%5 = load i1* %2
	ret i1 %5
}

define i32 @Cons_length(%struct.Cons* %self) #0 {
	%1 = alloca %struct.Cons*
	store %struct.Cons* %self, %struct.Cons** %1
	%2 = alloca i32
	%3 = alloca i32
	store i32 1, i32* %3
	%4 = load i32* %3
	store i32 %4, i32* %2
	%5 = load i32* %2
	ret i32 %5
}

define i32 @Main_main(%struct.Main* %self) #0 {
	%1 = alloca %struct.Main*
	store %struct.Main* %self, %struct.Main** %1
	%2 = alloca i32
	%3 = alloca i32
	; let
	%4 = alloca %struct.List*
	%5 = alloca i32
	%6 = alloca %struct.IO*
	%7 = alloca i8*
	store i8* getelementptr inbounds ([17 x i8]* @.str0, i32 0, i32 0), i8** %7
; call
	%8 = load %struct.Main** %1
	%9 = getelementptr inbounds %struct.Main* %8, i32 0, i32 0
	%10 = load %struct.MainVTable** %9
	%11 = getelementptr inbounds %struct.MainVTable* %10, i32 0, i32 1
	%12 = load %struct.IO* (%struct.Main*, i8*)** %11
	%13 = load i8** %7
	%14 = call %struct.IO* %12(%struct.Main* %8, i8* %13)
	store %struct.IO* %14, %struct.IO** %6
	%15 = alloca %struct.List*
	; assignement
	%16 = alloca %struct.Cons*
;before_visit
	; new
	%17 = call %struct.Cons* @ConsNew()
	store %struct.Cons* %17, %struct.Cons** %16
;after_visit
	%18 = load %struct.Cons** %16
	%19 = bitcast %struct.Cons* %18 to %struct.List*
	store %struct.List* %19, %struct.List** %4
	store %struct.List* %19, %struct.List** %15
	%20 = alloca %struct.IO*
	%21 = alloca i32
	%22 = alloca %struct.List*
	%23 = load %struct.List** %4
	store %struct.List* %23, %struct.List** %22
; call
	%24 = load %struct.List** %22
	%25 = getelementptr inbounds %struct.List* %24, i32 0, i32 0
	%26 = load %struct.ListVTable** %25
	%27 = getelementptr inbounds %struct.ListVTable* %26, i32 0, i32 0
	%28 = load i32 (%struct.List*)** %27
	%29 = call i32 %28(%struct.List* %24)
	store i32 %29, i32* %21
; call
	%30 = load %struct.Main** %1
	%31 = getelementptr inbounds %struct.Main* %30, i32 0, i32 0
	%32 = load %struct.MainVTable** %31
	%33 = getelementptr inbounds %struct.MainVTable* %32, i32 0, i32 3
	%34 = load %struct.IO* (%struct.Main*, i32)** %33
	%35 = load i32* %21
	%36 = call %struct.IO* %34(%struct.Main* %30, i32 %35)
	store %struct.IO* %36, %struct.IO** %20
	%37 = alloca %struct.IO*
	%38 = alloca i8*
	store i8* getelementptr inbounds ([2 x i8]* @.str1, i32 0, i32 0), i8** %38
; call
	%39 = load %struct.Main** %1
	%40 = getelementptr inbounds %struct.Main* %39, i32 0, i32 0
	%41 = load %struct.MainVTable** %40
	%42 = getelementptr inbounds %struct.MainVTable* %41, i32 0, i32 1
	%43 = load %struct.IO* (%struct.Main*, i8*)** %42
	%44 = load i8** %38
	%45 = call %struct.IO* %43(%struct.Main* %39, i8* %44)
	store %struct.IO* %45, %struct.IO** %37
	%46 = alloca i1
	%47 = alloca %struct.Cons*
	; new
	%48 = call %struct.Cons* @ConsNew()
	store %struct.Cons* %48, %struct.Cons** %47
	%49 = alloca i32
	store i32 0, i32* %49
	%50 = load i32* %49
	store i32 %50, i32* %5
	%51 = load i32* %5
	store i32 %51, i32* %3
	%52 = load i32* %3
	store i32 %52, i32* %2
	%53 = load i32* %2
	ret i32 %53
}

define i32 @main(){
%1 = call %struct.Main* @MainNew()
%2 = getelementptr inbounds %struct.Main* %1, i32 0, i32 0
%3 = load %struct.MainVTable** %2
%4 = getelementptr inbounds %struct.MainVTable* %3, i32 0, i32 6
%5 = load i32 (%struct.Main*)** %4
%6 = call i32 %5(%struct.Main* %1)
ret i32 %6
}
