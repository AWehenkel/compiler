declare i1 @inputBool()
declare i32 @inputInt32()
declare i8* @inputLine()
declare void @print(i8*)
declare void @printInt32(i32)
declare void @printBool(i1)
declare i32 @strcmp(i8*, i8*)
declare float @llvm.powi.f32(float, i32)

@.str_empty = private unnamed_addr constant [1 x i8] c"\00", align 1
@.str0 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@.str1 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@.str2 = private unnamed_addr constant [17 x i8] c"List has length\0a\00", align 1
@.str3 = private unnamed_addr constant [11 x i8] c"Ca marche\0a\00", align 1
@.str4 = private unnamed_addr constant [2 x i8] c"\0a\00", align 1
@.str5 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str6 = private unnamed_addr constant [2 x i8] c"\0a\00", align 1
@.str7 = private unnamed_addr constant [7 x i8] c"coucou\00", align 1
declare noalias i8* @malloc(i32)

%struct.List = type {
	%struct.ListVTable*
}

%struct.ListVTable = type {
	i32 (%struct.List*)*,
	i1 (%struct.List*)*
}

@ListVTable_inst = global %struct.ListVTable{
	i32 (%struct.List*)* @List_length,
	i1 (%struct.List*)* @List_isNil
}

define void @ListInit(%struct.List* %self){
	%1 = bitcast %struct.List* %self to %struct.Object*
	call void @ObjectInit(%struct.Object* %1)
	%2 = getelementptr inbounds %struct.List* %self, i32 0, i32 0
	store %struct.ListVTable* @ListVTable_inst, %struct.ListVTable** %2
	ret void
}

define %struct.List* @ListNew(){
	%self = alloca %struct.List*
	%1 = getelementptr %struct.List* null, i32 1
	%size = ptrtoint %struct.List* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.List*
	store %struct.List* %3, %struct.List** %self
	%4 = load %struct.List** %self
	%5 = icmp ne %struct.List* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @ListInit(%struct.List* %4)
	br label %null

null:   			; preds = %5
	ret %struct.List* %4
}

%struct.Nil = type {
	%struct.NilVTable*
}

%struct.NilVTable = type {
	i32 (%struct.Nil*)*,
	i1 (%struct.Nil*)*
}

@NilVTable_inst = global %struct.NilVTable{
	i32 (%struct.Nil*)* bitcast (i32 (%struct.List*)* @List_length to i32 (%struct.Nil*)*),
	i1 (%struct.Nil*)* bitcast (i1 (%struct.List*)* @List_isNil to i1 (%struct.Nil*)*)
}

define void @NilInit(%struct.Nil* %self){
	%1 = bitcast %struct.Nil* %self to %struct.List*
	call void @ListInit(%struct.List* %1)
	%2 = getelementptr inbounds %struct.Nil* %self, i32 0, i32 0
	store %struct.NilVTable* @NilVTable_inst, %struct.NilVTable** %2
	ret void
}

define %struct.Nil* @NilNew(){
	%self = alloca %struct.Nil*
	%1 = getelementptr %struct.Nil* null, i32 1
	%size = ptrtoint %struct.Nil* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.Nil*
	store %struct.Nil* %3, %struct.Nil** %self
	%4 = load %struct.Nil** %self
	%5 = icmp ne %struct.Nil* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @NilInit(%struct.Nil* %4)
	br label %null

null:   			; preds = %5
	ret %struct.Nil* %4
}

%struct.Cons = type {
	%struct.ConsVTable*,
	%struct.List*,
	i32
}

%struct.ConsVTable = type {
	i32 (%struct.Cons*)*,
	i1 (%struct.Cons*)*,
	i32 (%struct.Cons*)*,
	%struct.Cons* (%struct.Cons*, i32, %struct.List*)*
}

@ConsVTable_inst = global %struct.ConsVTable{
	i32 (%struct.Cons*)* @Cons_length,
	i1 (%struct.Cons*)* @Cons_isNil,
	i32 (%struct.Cons*)* @Cons_head,
	%struct.Cons* (%struct.Cons*, i32, %struct.List*)* @Cons_init
}

define void @ConsInit(%struct.Cons* %self){
	%1 = bitcast %struct.Cons* %self to %struct.List*
	call void @ListInit(%struct.List* %1)
	%tail = getelementptr inbounds %struct.Cons* %self, i32 0, i32 1
	%2 = alloca %struct.Nil*
	; new
	%3 = call %struct.Nil* @NilNew()
	store %struct.Nil* %3, %struct.Nil** %2
	%4 = load %struct.Nil** %2
	%5 = bitcast %struct.Nil* %4 to %struct.List*
	store %struct.List* %5, %struct.List** %tail
	%head = getelementptr inbounds %struct.Cons* %self, i32 0, i32 2
	store i32 0, i32* %head
	%6 = getelementptr inbounds %struct.Cons* %self, i32 0, i32 0
	store %struct.ConsVTable* @ConsVTable_inst, %struct.ConsVTable** %6
	ret void
}

define %struct.Cons* @ConsNew(){
	%self = alloca %struct.Cons*
	%1 = getelementptr %struct.Cons* null, i32 1
	%size = ptrtoint %struct.Cons* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.Cons*
	store %struct.Cons* %3, %struct.Cons** %self
	%4 = load %struct.Cons** %self
	%5 = icmp ne %struct.Cons* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @ConsInit(%struct.Cons* %4)
	br label %null

null:   			; preds = %5
	ret %struct.Cons* %4
}

%struct.Main = type {
	%struct.MainVTable*
}

%struct.MainVTable = type {
	i32 (%struct.Main*)*,
	%struct.IO* (%struct.Main*, i8*)*,
	%struct.IO* (%struct.Main*, i1)*,
	%struct.IO* (%struct.Main*, i32)*,
	i1 (%struct.Main*)*,
	i8* (%struct.Main*)*,
	i1 (%struct.Main*)*,
	i32 (%struct.Main*)*
}

@MainVTable_inst = global %struct.MainVTable{
	i32 (%struct.Main*)* bitcast (i32 (%struct.IO*)* @IO_inputInt32 to i32 (%struct.Main*)*),
	%struct.IO* (%struct.Main*, i8*)* bitcast (%struct.IO* (%struct.IO*, i8*)* @IO_print to %struct.IO* (%struct.Main*, i8*)*),
	%struct.IO* (%struct.Main*, i1)* bitcast (%struct.IO* (%struct.IO*, i1)* @IO_printBool to %struct.IO* (%struct.Main*, i1)*),
	%struct.IO* (%struct.Main*, i32)* bitcast (%struct.IO* (%struct.IO*, i32)* @IO_printInt32 to %struct.IO* (%struct.Main*, i32)*),
	i1 (%struct.Main*)* bitcast (i1 (%struct.IO*)* @IO_inputBool to i1 (%struct.Main*)*),
	i8* (%struct.Main*)* bitcast (i8* (%struct.IO*)* @IO_inputLine to i8* (%struct.Main*)*),
	i1 (%struct.Main*)* @Main_test,
	i32 (%struct.Main*)* @Main_main
}

define void @MainInit(%struct.Main* %self){
	%1 = bitcast %struct.Main* %self to %struct.IO*
	call void @IOInit(%struct.IO* %1)
	%2 = getelementptr inbounds %struct.Main* %self, i32 0, i32 0
	store %struct.MainVTable* @MainVTable_inst, %struct.MainVTable** %2
	ret void
}

define %struct.Main* @MainNew(){
	%self = alloca %struct.Main*
	%1 = getelementptr %struct.Main* null, i32 1
	%size = ptrtoint %struct.Main* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.Main*
	store %struct.Main* %3, %struct.Main** %self
	%4 = load %struct.Main** %self
	%5 = icmp ne %struct.Main* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @MainInit(%struct.Main* %4)
	br label %null

null:   			; preds = %5
	ret %struct.Main* %4
}

%struct.IO = type {
	%struct.IOVTable*
}

%struct.IOVTable = type {
	i32 (%struct.IO*)*,
	%struct.IO* (%struct.IO*, i8*)*,
	%struct.IO* (%struct.IO*, i1)*,
	%struct.IO* (%struct.IO*, i32)*,
	i1 (%struct.IO*)*,
	i8* (%struct.IO*)*
}

@IOVTable_inst = global %struct.IOVTable{
	i32 (%struct.IO*)* @IO_inputInt32,
	%struct.IO* (%struct.IO*, i8*)* @IO_print,
	%struct.IO* (%struct.IO*, i1)* @IO_printBool,
	%struct.IO* (%struct.IO*, i32)* @IO_printInt32,
	i1 (%struct.IO*)* @IO_inputBool,
	i8* (%struct.IO*)* @IO_inputLine
}

define void @IOInit(%struct.IO* %self){
	%1 = bitcast %struct.IO* %self to %struct.Object*
	call void @ObjectInit(%struct.Object* %1)
	%2 = getelementptr inbounds %struct.IO* %self, i32 0, i32 0
	store %struct.IOVTable* @IOVTable_inst, %struct.IOVTable** %2
	ret void
}

define %struct.IO* @IONew(){
	%self = alloca %struct.IO*
	%1 = getelementptr %struct.IO* null, i32 1
	%size = ptrtoint %struct.IO* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.IO*
	store %struct.IO* %3, %struct.IO** %self
	%4 = load %struct.IO** %self
	%5 = icmp ne %struct.IO* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @IOInit(%struct.IO* %4)
	br label %null

null:   			; preds = %5
	ret %struct.IO* %4
}

%struct.Object = type {
	%struct.ObjectVTable*
}

%struct.ObjectVTable = type {
}

@ObjectVTable_inst = global %struct.ObjectVTable{
}

define void @ObjectInit(%struct.Object* %self){
	%1 = getelementptr inbounds %struct.Object* %self, i32 0, i32 0
	store %struct.ObjectVTable* @ObjectVTable_inst, %struct.ObjectVTable** %1
	ret void
}

define %struct.Object* @ObjectNew(){
	%self = alloca %struct.Object*
	%1 = getelementptr %struct.Object* null, i32 1
	%size = ptrtoint %struct.Object* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.Object*
	store %struct.Object* %3, %struct.Object** %self
	%4 = load %struct.Object** %self
	%5 = icmp ne %struct.Object* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @ObjectInit(%struct.Object* %4)
	br label %null

null:   			; preds = %5
	ret %struct.Object* %4
}

define %struct.IO* @IO_print(%struct.IO* %self, i8* %s) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i8*
	store i8* %s, i8** %2
	%3 = alloca %struct.IO*
	%4 = alloca %struct.IO*
	%5 = alloca i8*
	%6 = load i8** %2
	store i8* %6, i8** %5
;call
	%7 = load i8** %5
call void @print(i8* %7)
	%8 = alloca %struct.IO*
	%9 = load %struct.IO** %1
	store %struct.IO* %9, %struct.IO** %8
	%10 = load %struct.IO** %8
	store %struct.IO* %10, %struct.IO** %3
	%11 = load %struct.IO** %3
	ret %struct.IO* %11
}

define %struct.IO* @IO_printBool(%struct.IO* %self, i1 %b) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i1
	store i1 %b, i1* %2
	%3 = alloca %struct.IO*
	%4 = alloca %struct.IO*
	%5 = alloca i1
	%6 = load i1* %2
	store i1 %6, i1* %5
;call
	%7 = load i1* %5
call void @printBool(i1 %7)
	%8 = alloca %struct.IO*
	%9 = load %struct.IO** %1
	store %struct.IO* %9, %struct.IO** %8
	%10 = load %struct.IO** %8
	store %struct.IO* %10, %struct.IO** %3
	%11 = load %struct.IO** %3
	ret %struct.IO* %11
}

define %struct.IO* @IO_printInt32(%struct.IO* %self, i32 %i) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i32
	store i32 %i, i32* %2
	%3 = alloca %struct.IO*
	%4 = alloca %struct.IO*
	%5 = alloca i32
	%6 = load i32* %2
	store i32 %6, i32* %5
;call
	%7 = load i32* %5
call void @printInt32(i32 %7)
	%8 = alloca %struct.IO*
	%9 = load %struct.IO** %1
	store %struct.IO* %9, %struct.IO** %8
	%10 = load %struct.IO** %8
	store %struct.IO* %10, %struct.IO** %3
	%11 = load %struct.IO** %3
	ret %struct.IO* %11
}

define i8* @IO_inputLine(%struct.IO* %self) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i8*
	%3 = alloca i8*
;call
	%4 = call i8* @inputLine()
	store i8* %4, i8** %3
	%5 = load i8** %3
	store i8* %5, i8** %2
	%6 = load i8** %2
	ret i8* %6
}

define i1 @IO_inputBool(%struct.IO* %self) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i1
	%3 = alloca i1
;call
	%4 = call i1 @inputBool()
	store i1 %4, i1* %3
	%5 = load i1* %3
	store i1 %5, i1* %2
	%6 = load i1* %2
	ret i1 %6
}

define i32 @IO_inputInt32(%struct.IO* %self) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i32
	%3 = alloca i32
;call
	%4 = call i32 @inputInt32()
	store i32 %4, i32* %3
	%5 = load i32* %3
	store i32 %5, i32* %2
	%6 = load i32* %2
	ret i32 %6
}

define i1 @List_isNil(%struct.List* %self) #0 {
	%1 = alloca %struct.List*
	store %struct.List* %self, %struct.List** %1
	%2 = alloca i1
	%3 = alloca i1
	store i1 true, i1* %3
	%4 = load i1* %3
	store i1 %4, i1* %2
	%5 = load i1* %2
	ret i1 %5
}

define i32 @List_length(%struct.List* %self) #0 {
	%1 = alloca %struct.List*
	store %struct.List* %self, %struct.List** %1
	%2 = alloca i32
	%3 = alloca i32
	store i32 0, i32* %3
	%4 = load i32* %3
	store i32 %4, i32* %2
	%5 = load i32* %2
	ret i32 %5
}

define %struct.Cons* @Cons_init(%struct.Cons* %self, i32 %hd, %struct.List* %tl) #0 {
	%1 = alloca %struct.Cons*
	store %struct.Cons* %self, %struct.Cons** %1
	%2 = alloca i32
	store i32 %hd, i32* %2
	%3 = alloca %struct.List*
	store %struct.List* %tl, %struct.List** %3
	%4 = alloca %struct.Cons*
	%5 = alloca i32
	; assignement
	%6 = alloca i32
	%7 = load i32* %2
	store i32 %7, i32* %6
	%8 = load i32* %6
;field
	%9 = load %struct.Cons** %1
	%10 = getelementptr inbounds %struct.Cons* %9, i32 0, i32 2
	store i32 %8, i32* %10
	store i32 %8, i32* %5
	%11 = alloca %struct.List*
	; assignement
	%12 = alloca %struct.List*
	%13 = load %struct.List** %3
	store %struct.List* %13, %struct.List** %12
	%14 = load %struct.List** %12
;field
	%15 = load %struct.Cons** %1
	%16 = getelementptr inbounds %struct.Cons* %15, i32 0, i32 1
	store %struct.List* %14, %struct.List** %16
	store %struct.List* %14, %struct.List** %11
	%17 = alloca %struct.Cons*
	%18 = load %struct.Cons** %1
	store %struct.Cons* %18, %struct.Cons** %17
	%19 = load %struct.Cons** %17
	store %struct.Cons* %19, %struct.Cons** %4
	%20 = load %struct.Cons** %4
	ret %struct.Cons* %20
}

define i32 @Cons_head(%struct.Cons* %self) #0 {
	%1 = alloca %struct.Cons*
	store %struct.Cons* %self, %struct.Cons** %1
	%2 = alloca i32
	%3 = alloca i32
	%4 = load %struct.Cons** %1
	%5 = getelementptr inbounds %struct.Cons* %4, i32 0, i32 2
	%6 = load i32* %5
	store i32 %6, i32* %3
	%7 = load i32* %3
	store i32 %7, i32* %2
	%8 = load i32* %2
	ret i32 %8
}

define i1 @Cons_isNil(%struct.Cons* %self) #0 {
	%1 = alloca %struct.Cons*
	store %struct.Cons* %self, %struct.Cons** %1
	%2 = alloca i1
	%3 = alloca i1
	store i1 false, i1* %3
	%4 = load i1* %3
	store i1 %4, i1* %2
	%5 = load i1* %2
	ret i1 %5
}

define i32 @Cons_length(%struct.Cons* %self) #0 {
	%1 = alloca %struct.Cons*
	store %struct.Cons* %self, %struct.Cons** %1
	%2 = alloca i32
	%3 = alloca i32
	; condition
	%4 = alloca i1
	; unary
	%5 = alloca i1
	; binary operation
	%6 = alloca i8*
	store i8* getelementptr inbounds ([2 x i8]* @.str0, i32 0, i32 0), i8** %6
	%7 = alloca i8*
	store i8* getelementptr inbounds ([2 x i8]* @.str1, i32 0, i32 0), i8** %7
	%8 = load i8** %6
	%9 = load i8** %7
	%10 = call i32 @strcmp(i8* %8, i8* %9)
	%11 = icmp eq i32 0, %10
	store i1 %11, i1* %5
	%12 = load i1* %5
	%13 = add i1 %12, 1
	store i1 %13, i1* %4
	%14 = load i1* %4
	br i1 %14, label %then_14, label %else_14
	
then_14:
		%15 = alloca i32
		; binary operation
		%16 = alloca i32
		store i32 1, i32* %16
		%17 = alloca i32
		%18 = alloca %struct.List*
		%19 = load %struct.Cons** %1
		%20 = getelementptr inbounds %struct.Cons* %19, i32 0, i32 1
		%21 = load %struct.List** %20
		store %struct.List* %21, %struct.List** %18
; call
		%22 = load %struct.List** %18
		%23 = getelementptr inbounds %struct.List* %22, i32 0, i32 0
		%24 = load %struct.ListVTable** %23
		%25 = getelementptr inbounds %struct.ListVTable* %24, i32 0, i32 0
		%26 = load i32 (%struct.List*)** %25
		%27 = call i32 %26(%struct.List* %22)
		store i32 %27, i32* %17
		%28 = load i32* %16
		%29 = load i32* %17
		%30 = add nuw i32 %28, %29
		store i32 %30, i32* %15
;avant bitcast
		%31 = load i32* %15
		store i32 %31, i32* %3
		br label %end_14
	
else_14:
		%32 = alloca i32
		store i32 1, i32* %32
		%33 = load i32* %32
		store i32 %33, i32* %3
		br label %end_14
	
end_14:
	%34 = load i32* %3
	store i32 %34, i32* %2
	%35 = load i32* %2
	ret i32 %35
}

define i32 @Main_main(%struct.Main* %self) #0 {
	%1 = alloca %struct.Main*
	store %struct.Main* %self, %struct.Main** %1
	%2 = alloca i32
	%3 = alloca i32
	; let
	%4 = alloca %struct.List*
	store %struct.List* null, %struct.List** %4
	%5 = alloca i32
	%6 = alloca %struct.IO*
	%7 = alloca i8*
	store i8* getelementptr inbounds ([17 x i8]* @.str2, i32 0, i32 0), i8** %7
; call
	%8 = load %struct.Main** %1
	%9 = getelementptr inbounds %struct.Main* %8, i32 0, i32 0
	%10 = load %struct.MainVTable** %9
	%11 = getelementptr inbounds %struct.MainVTable* %10, i32 0, i32 1
	%12 = load %struct.IO* (%struct.Main*, i8*)** %11
	%13 = load i8** %7
	%14 = call %struct.IO* %12(%struct.Main* %8, i8* %13)
	store %struct.IO* %14, %struct.IO** %6
	%15 = alloca i1
	; binary operation
	%16 = alloca i32
	store i32 1, i32* %16
	%17 = alloca i32
	store i32 2, i32* %17
	%18 = load i32* %16
	%19 = load i32* %17
	%20 = icmp slt i32 %18, %19
	store i1 %20, i1* %15
	%21 = alloca %struct.List*
	; assignement
	%22 = alloca %struct.Cons*
	; new
	%23 = call %struct.Cons* @ConsNew()
	store %struct.Cons* %23, %struct.Cons** %22
	%24 = load %struct.Cons** %22
	%25 = bitcast %struct.Cons* %24 to %struct.List*
	store %struct.List* %25, %struct.List** %4
	store %struct.List* %25, %struct.List** %21
	%26 = alloca i1
; call
	%27 = load %struct.Main** %1
	%28 = getelementptr inbounds %struct.Main* %27, i32 0, i32 0
	%29 = load %struct.MainVTable** %28
	%30 = getelementptr inbounds %struct.MainVTable* %29, i32 0, i32 6
	%31 = load i1 (%struct.Main*)** %30
	%32 = call i1 %31(%struct.Main* %27)
	store i1 %32, i1* %26
	%33 = alloca i1
	; condition
	%34 = alloca i1
	; binary operation
	%35 = alloca i32
	store i32 2, i32* %35
	%36 = alloca i32
	; binary operation
	%37 = alloca i32
	store i32 2, i32* %37
	%38 = alloca i32
	store i32 2, i32* %38
	%39 = load i32* %37
	%40 = load i32* %38
	%41 = sitofp i32 %39 to float
	%42 = call float @llvm.powi.f32(float %41, i32 %40)
	%43 = fptosi float %42 to i32
	store i32 %43, i32* %36
	%44 = load i32* %35
	%45 = load i32* %36
	%46 = icmp sle i32 %44, %45
	store i1 %46, i1* %34
	%47 = load i1* %34
	br i1 %47, label %then_47, label %end_47
	
then_47:
		%48 = alloca %struct.IO*
		%49 = alloca i8*
		store i8* getelementptr inbounds ([11 x i8]* @.str3, i32 0, i32 0), i8** %49
; call
		%50 = load %struct.Main** %1
		%51 = getelementptr inbounds %struct.Main* %50, i32 0, i32 0
		%52 = load %struct.MainVTable** %51
		%53 = getelementptr inbounds %struct.MainVTable* %52, i32 0, i32 1
		%54 = load %struct.IO* (%struct.Main*, i8*)** %53
		%55 = load i8** %49
		%56 = call %struct.IO* %54(%struct.Main* %50, i8* %55)
		store %struct.IO* %56, %struct.IO** %48
		store i1 0, i1* %33
		br label %end_47
	
end_47:
	%57 = alloca %struct.IO*
	%58 = alloca i32
	%59 = alloca %struct.List*
	%60 = load %struct.List** %4
	store %struct.List* %60, %struct.List** %59
; call
	%61 = load %struct.List** %59
	%62 = getelementptr inbounds %struct.List* %61, i32 0, i32 0
	%63 = load %struct.ListVTable** %62
	%64 = getelementptr inbounds %struct.ListVTable* %63, i32 0, i32 0
	%65 = load i32 (%struct.List*)** %64
	%66 = call i32 %65(%struct.List* %61)
	store i32 %66, i32* %58
; call
	%67 = load %struct.Main** %1
	%68 = getelementptr inbounds %struct.Main* %67, i32 0, i32 0
	%69 = load %struct.MainVTable** %68
	%70 = getelementptr inbounds %struct.MainVTable* %69, i32 0, i32 3
	%71 = load %struct.IO* (%struct.Main*, i32)** %70
	%72 = load i32* %58
	%73 = call %struct.IO* %71(%struct.Main* %67, i32 %72)
	store %struct.IO* %73, %struct.IO** %57
	%74 = alloca %struct.IO*
	%75 = alloca i8*
	store i8* getelementptr inbounds ([2 x i8]* @.str4, i32 0, i32 0), i8** %75
; call
	%76 = load %struct.Main** %1
	%77 = getelementptr inbounds %struct.Main* %76, i32 0, i32 0
	%78 = load %struct.MainVTable** %77
	%79 = getelementptr inbounds %struct.MainVTable* %78, i32 0, i32 1
	%80 = load %struct.IO* (%struct.Main*, i8*)** %79
	%81 = load i8** %75
	%82 = call %struct.IO* %80(%struct.Main* %76, i8* %81)
	store %struct.IO* %82, %struct.IO** %74
	%83 = alloca i1
	; let
	%84 = alloca i32
	%85 = alloca i32
	store i32 10, i32* %85
	%86 = load i32* %85
	store i32 %86, i32* %84
	%87 = alloca i1
	%88 = alloca i1
	%89 = alloca i32
	; while
	br label %loop_8

loop_8:
	%90 = alloca i1
	; binary operation
	%91 = alloca i32
	store i32 0, i32* %91
	%92 = alloca i32
	%93 = load i32* %84
	store i32 %93, i32* %92
	%94 = load i32* %91
	%95 = load i32* %92
	%96 = icmp slt i32 %94, %95
	store i1 %96, i1* %90
	%97 = load i1* %90
	br i1 %97, label %do_8, label %end_8

do_8:
	%98 = alloca %struct.IO*
	%99 = alloca i32
	%100 = load i32* %84
	store i32 %100, i32* %99
; call
	%101 = load %struct.Main** %1
	%102 = getelementptr inbounds %struct.Main* %101, i32 0, i32 0
	%103 = load %struct.MainVTable** %102
	%104 = getelementptr inbounds %struct.MainVTable* %103, i32 0, i32 3
	%105 = load %struct.IO* (%struct.Main*, i32)** %104
	%106 = load i32* %99
	%107 = call %struct.IO* %105(%struct.Main* %101, i32 %106)
	store %struct.IO* %107, %struct.IO** %98
	%108 = alloca %struct.IO*
	%109 = alloca i8*
	store i8* getelementptr inbounds ([2 x i8]* @.str5, i32 0, i32 0), i8** %109
; call
	%110 = load %struct.Main** %1
	%111 = getelementptr inbounds %struct.Main* %110, i32 0, i32 0
	%112 = load %struct.MainVTable** %111
	%113 = getelementptr inbounds %struct.MainVTable* %112, i32 0, i32 1
	%114 = load %struct.IO* (%struct.Main*, i8*)** %113
	%115 = load i8** %109
	%116 = call %struct.IO* %114(%struct.Main* %110, i8* %115)
	store %struct.IO* %116, %struct.IO** %108
	%117 = alloca i32
	; assignement
	%118 = alloca i32
	; binary operation
	%119 = alloca i32
	%120 = load i32* %84
	store i32 %120, i32* %119
	%121 = alloca i32
	store i32 1, i32* %121
	%122 = load i32* %119
	%123 = load i32* %121
	%124 = sub i32 %122, %123
	store i32 %124, i32* %118
	%125 = load i32* %118
	store i32 %125, i32* %84
	store i32 %125, i32* %117
	%126 = load i32* %117
	store i32 %126, i32* %89
	br label %loop_8

end_8:
	%127 = load i1* %88
	store i1 %127, i1* %87
	%128 = load i1* %87
	store i1 %128, i1* %83
	%129 = alloca %struct.IO*
	%130 = alloca i8*
	store i8* getelementptr inbounds ([2 x i8]* @.str6, i32 0, i32 0), i8** %130
; call
	%131 = load %struct.Main** %1
	%132 = getelementptr inbounds %struct.Main* %131, i32 0, i32 0
	%133 = load %struct.MainVTable** %132
	%134 = getelementptr inbounds %struct.MainVTable* %133, i32 0, i32 1
	%135 = load %struct.IO* (%struct.Main*, i8*)** %134
	%136 = load i8** %130
	%137 = call %struct.IO* %135(%struct.Main* %131, i8* %136)
	store %struct.IO* %137, %struct.IO** %129
	%138 = alloca i8*
	store i8* getelementptr inbounds ([7 x i8]* @.str7, i32 0, i32 0), i8** %138
	%139 = alloca %struct.Cons*
	; new
	%140 = call %struct.Cons* @ConsNew()
	store %struct.Cons* %140, %struct.Cons** %139
	%141 = alloca i32
	store i32 0, i32* %141
	%142 = load i32* %141
	store i32 %142, i32* %5
	%143 = load i32* %5
	store i32 %143, i32* %3
	%144 = load i32* %3
	store i32 %144, i32* %2
	%145 = load i32* %2
	ret i32 %145
}

define i1 @Main_test(%struct.Main* %self) #0 {
	%1 = alloca %struct.Main*
	store %struct.Main* %self, %struct.Main** %1
	%2 = alloca i1
	%3 = alloca i1
	store i1 0, i1* %3
	%4 = load i1* %3
	store i1 %4, i1* %2
	%5 = load i1* %2
	ret i1 %5
}

define i32 @main(){
	%1 = call %struct.Main* @MainNew()
	%2 = getelementptr inbounds %struct.Main* %1, i32 0, i32 0
	%3 = load %struct.MainVTable** %2
	%4 = getelementptr inbounds %struct.MainVTable* %3, i32 0, i32 7
	%5 = load i32 (%struct.Main*)** %4
	%6 = call i32 %5(%struct.Main* %1)
	ret i32 %6
}
