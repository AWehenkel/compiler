declare i1 @inputBool()
declare i32 @inputInt32()
declare i8* @inputLine()
declare void @print(i8*)
declare void @printInt32(i32)
declare void @printBool(i1)
declare i32 @strcmp(i8*, i8*)
@.str0 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@.str1 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@.str2 = private unnamed_addr constant [17 x i8] c"List has length\0a\00", align 1
@.str3 = private unnamed_addr constant [2 x i8] c"\0a\00", align 1
@.str4 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str5 = private unnamed_addr constant [2 x i8] c"\0a\00", align 1
@.str6 = private unnamed_addr constant [7 x i8] c"coucou\00", align 1
declare noalias i8* @malloc(i32)

%struct.List = type {
	%struct.ListVTable*
}

%struct.ListVTable = type {
	i32 (%struct.List*)*,
	i1 (%struct.List*)*
}

@ListVTable_inst = global %struct.ListVTable{
	i32 (%struct.List*)* @List_length,
	i1 (%struct.List*)* @List_isNil
}

define void @ListInit(%struct.List* %self){
	%1 = bitcast %struct.List* %self to %struct.Object*
	call void @ObjectInit(%struct.Object* %1)
	%2 = getelementptr inbounds %struct.List* %self, i32 0, i32 0
	store %struct.ListVTable* @ListVTable_inst, %struct.ListVTable** %2
	ret void
}

define %struct.List* @ListNew(){
	%self = alloca %struct.List*
	%1 = getelementptr %struct.List* null, i32 1
	%size = ptrtoint %struct.List* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.List*
	store %struct.List* %3, %struct.List** %self
	%4 = load %struct.List** %self
	%5 = icmp ne %struct.List* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @ListInit(%struct.List* %4)
	br label %null

null:   			; preds = %5
	ret %struct.List* %4
}

%struct.Nil = type {
	%struct.NilVTable*
}

%struct.NilVTable = type {
	i32 (%struct.Nil*)*,
	i1 (%struct.Nil*)*
}

@NilVTable_inst = global %struct.NilVTable{
	i32 (%struct.Nil*)* bitcast (i32 (%struct.List*)* @List_length to i32 (%struct.Nil*)*),
	i1 (%struct.Nil*)* bitcast (i1 (%struct.List*)* @List_isNil to i1 (%struct.Nil*)*)
}

define void @NilInit(%struct.Nil* %self){
	%1 = bitcast %struct.Nil* %self to %struct.List*
	call void @ListInit(%struct.List* %1)
	%2 = getelementptr inbounds %struct.Nil* %self, i32 0, i32 0
	store %struct.NilVTable* @NilVTable_inst, %struct.NilVTable** %2
	ret void
}

define %struct.Nil* @NilNew(){
	%self = alloca %struct.Nil*
	%1 = getelementptr %struct.Nil* null, i32 1
	%size = ptrtoint %struct.Nil* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.Nil*
	store %struct.Nil* %3, %struct.Nil** %self
	%4 = load %struct.Nil** %self
	%5 = icmp ne %struct.Nil* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @NilInit(%struct.Nil* %4)
	br label %null

null:   			; preds = %5
	ret %struct.Nil* %4
}

%struct.Cons = type {
	%struct.ConsVTable*,
	%struct.List*,
	i32
}

%struct.ConsVTable = type {
	i32 (%struct.Cons*)*,
	i1 (%struct.Cons*)*,
	i32 (%struct.Cons*)*,
	%struct.Cons* (%struct.Cons*, i32, %struct.List*)*
}

@ConsVTable_inst = global %struct.ConsVTable{
	i32 (%struct.Cons*)* @Cons_length,
	i1 (%struct.Cons*)* @Cons_isNil,
	i32 (%struct.Cons*)* @Cons_head,
	%struct.Cons* (%struct.Cons*, i32, %struct.List*)* @Cons_init
}

define void @ConsInit(%struct.Cons* %self){
	%1 = bitcast %struct.Cons* %self to %struct.List*
	call void @ListInit(%struct.List* %1)
	%tail = getelementptr inbounds %struct.Cons* %self, i32 0, i32 1
	store %struct.List* null, %struct.List** %tail
	%head = getelementptr inbounds %struct.Cons* %self, i32 0, i32 2
	store i32 0, i32* %head
	%2 = getelementptr inbounds %struct.Cons* %self, i32 0, i32 0
	store %struct.ConsVTable* @ConsVTable_inst, %struct.ConsVTable** %2
	ret void
}

define %struct.Cons* @ConsNew(){
	%self = alloca %struct.Cons*
	%1 = getelementptr %struct.Cons* null, i32 1
	%size = ptrtoint %struct.Cons* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.Cons*
	store %struct.Cons* %3, %struct.Cons** %self
	%4 = load %struct.Cons** %self
	%5 = icmp ne %struct.Cons* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @ConsInit(%struct.Cons* %4)
	br label %null

null:   			; preds = %5
	ret %struct.Cons* %4
}

%struct.Main = type {
	%struct.MainVTable*
}

%struct.MainVTable = type {
	i32 (%struct.Main*)*,
	%struct.IO* (%struct.Main*, i8*)*,
	%struct.IO* (%struct.Main*, i1)*,
	%struct.IO* (%struct.Main*, i32)*,
	i1 (%struct.Main*)*,
	i8* (%struct.Main*)*,
	i1 (%struct.Main*)*,
	i32 (%struct.Main*)*
}

@MainVTable_inst = global %struct.MainVTable{
	i32 (%struct.Main*)* bitcast (i32 (%struct.IO*)* @IO_inputInt32 to i32 (%struct.Main*)*),
	%struct.IO* (%struct.Main*, i8*)* bitcast (%struct.IO* (%struct.IO*, i8*)* @IO_print to %struct.IO* (%struct.Main*, i8*)*),
	%struct.IO* (%struct.Main*, i1)* bitcast (%struct.IO* (%struct.IO*, i1)* @IO_printBool to %struct.IO* (%struct.Main*, i1)*),
	%struct.IO* (%struct.Main*, i32)* bitcast (%struct.IO* (%struct.IO*, i32)* @IO_printInt32 to %struct.IO* (%struct.Main*, i32)*),
	i1 (%struct.Main*)* bitcast (i1 (%struct.IO*)* @IO_inputBool to i1 (%struct.Main*)*),
	i8* (%struct.Main*)* bitcast (i8* (%struct.IO*)* @IO_inputLine to i8* (%struct.Main*)*),
	i1 (%struct.Main*)* @Main_test,
	i32 (%struct.Main*)* @Main_main
}

define void @MainInit(%struct.Main* %self){
	%1 = bitcast %struct.Main* %self to %struct.IO*
	call void @IOInit(%struct.IO* %1)
	%2 = getelementptr inbounds %struct.Main* %self, i32 0, i32 0
	store %struct.MainVTable* @MainVTable_inst, %struct.MainVTable** %2
	ret void
}

define %struct.Main* @MainNew(){
	%self = alloca %struct.Main*
	%1 = getelementptr %struct.Main* null, i32 1
	%size = ptrtoint %struct.Main* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.Main*
	store %struct.Main* %3, %struct.Main** %self
	%4 = load %struct.Main** %self
	%5 = icmp ne %struct.Main* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @MainInit(%struct.Main* %4)
	br label %null

null:   			; preds = %5
	ret %struct.Main* %4
}

%struct.IO = type {
	%struct.IOVTable*
}

%struct.IOVTable = type {
	i32 (%struct.IO*)*,
	%struct.IO* (%struct.IO*, i8*)*,
	%struct.IO* (%struct.IO*, i1)*,
	%struct.IO* (%struct.IO*, i32)*,
	i1 (%struct.IO*)*,
	i8* (%struct.IO*)*
}

@IOVTable_inst = global %struct.IOVTable{
	i32 (%struct.IO*)* @IO_inputInt32,
	%struct.IO* (%struct.IO*, i8*)* @IO_print,
	%struct.IO* (%struct.IO*, i1)* @IO_printBool,
	%struct.IO* (%struct.IO*, i32)* @IO_printInt32,
	i1 (%struct.IO*)* @IO_inputBool,
	i8* (%struct.IO*)* @IO_inputLine
}

define void @IOInit(%struct.IO* %self){
	%1 = bitcast %struct.IO* %self to %struct.Object*
	call void @ObjectInit(%struct.Object* %1)
	%2 = getelementptr inbounds %struct.IO* %self, i32 0, i32 0
	store %struct.IOVTable* @IOVTable_inst, %struct.IOVTable** %2
	ret void
}

define %struct.IO* @IONew(){
	%self = alloca %struct.IO*
	%1 = getelementptr %struct.IO* null, i32 1
	%size = ptrtoint %struct.IO* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.IO*
	store %struct.IO* %3, %struct.IO** %self
	%4 = load %struct.IO** %self
	%5 = icmp ne %struct.IO* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @IOInit(%struct.IO* %4)
	br label %null

null:   			; preds = %5
	ret %struct.IO* %4
}

%struct.Object = type {
	%struct.ObjectVTable*
}

%struct.ObjectVTable = type {
}

@ObjectVTable_inst = global %struct.ObjectVTable{
}

define void @ObjectInit(%struct.Object* %self){
	%1 = getelementptr inbounds %struct.Object* %self, i32 0, i32 0
	store %struct.ObjectVTable* @ObjectVTable_inst, %struct.ObjectVTable** %1
	ret void
}

define %struct.Object* @ObjectNew(){
	%self = alloca %struct.Object*
	%1 = getelementptr %struct.Object* null, i32 1
	%size = ptrtoint %struct.Object* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.Object*
	store %struct.Object* %3, %struct.Object** %self
	%4 = load %struct.Object** %self
	%5 = icmp ne %struct.Object* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @ObjectInit(%struct.Object* %4)
	br label %null

null:   			; preds = %5
	ret %struct.Object* %4
}

define %struct.IO* @IO_print(%struct.IO* %self, i8* %s) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i8*
	store i8* %s, i8** %2
	%3 = alloca %struct.IO*
	%4 = alloca %struct.IO*
	%5 = alloca i8*
	%6 = load i8** %2
	store i8* %6, i8** %5
;call
	%7 = load i8** %5
call void @print(i8* %7)
	%8 = alloca %struct.IO*
	%9 = load %struct.IO** %1
	store %struct.IO* %9, %struct.IO** %8
	%10 = load %struct.IO** %8
	store %struct.IO* %10, %struct.IO** %3
	%11 = load %struct.IO** %3
	ret %struct.IO* %11
}

define %struct.IO* @IO_printBool(%struct.IO* %self, i1 %b) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i1
	store i1 %b, i1* %2
	%3 = alloca %struct.IO*
	%4 = alloca %struct.IO*
	%5 = alloca i1
	%6 = load i1* %2
	store i1 %6, i1* %5
;call
	%7 = load i1* %5
call void @printBool(i1 %7)
	%8 = alloca %struct.IO*
	%9 = load %struct.IO** %1
	store %struct.IO* %9, %struct.IO** %8
	%10 = load %struct.IO** %8
	store %struct.IO* %10, %struct.IO** %3
	%11 = load %struct.IO** %3
	ret %struct.IO* %11
}

define %struct.IO* @IO_printInt32(%struct.IO* %self, i32 %i) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i32
	store i32 %i, i32* %2
	%3 = alloca %struct.IO*
	%4 = alloca %struct.IO*
	%5 = alloca i32
	%6 = load i32* %2
	store i32 %6, i32* %5
;call
	%7 = load i32* %5
call void @printInt32(i32 %7)
	%8 = alloca %struct.IO*
	%9 = load %struct.IO** %1
	store %struct.IO* %9, %struct.IO** %8
	%10 = load %struct.IO** %8
	store %struct.IO* %10, %struct.IO** %3
	%11 = load %struct.IO** %3
	ret %struct.IO* %11
}

define i8* @IO_inputLine(%struct.IO* %self) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i8*
	%3 = alloca i8*
;call
	%4 = call i8* @inputLine()
	store i8* %4, i8** %3
	%5 = load i8** %3
	store i8* %5, i8** %2
	%6 = load i8** %2
	ret i8* %6
}

define i1 @IO_inputBool(%struct.IO* %self) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i1
	%3 = alloca i1
;call
	%4 = call i1 @inputBool()
	store i1 %4, i1* %3
	%5 = load i1* %3
	store i1 %5, i1* %2
	%6 = load i1* %2
	ret i1 %6
}

define i32 @IO_inputInt32(%struct.IO* %self) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i32
	%3 = alloca i32
;call
	%4 = call i32 @inputInt32()
	store i32 %4, i32* %3
	%5 = load i32* %3
	store i32 %5, i32* %2
	%6 = load i32* %2
	ret i32 %6
}

define i1 @List_isNil(%struct.List* %self) #0 {
	%1 = alloca %struct.List*
	store %struct.List* %self, %struct.List** %1
	%2 = alloca i1
	%3 = alloca i1
	store i1 true, i1* %3
	%4 = load i1* %3
	store i1 %4, i1* %2
	%5 = load i1* %2
	ret i1 %5
}

define i32 @List_length(%struct.List* %self) #0 {
	%1 = alloca %struct.List*
	store %struct.List* %self, %struct.List** %1
	%2 = alloca i32
	%3 = alloca i32
	store i32 0, i32* %3
	%4 = load i32* %3
	store i32 %4, i32* %2
	%5 = load i32* %2
	ret i32 %5
}

define %struct.Cons* @Cons_init(%struct.Cons* %self, i32 %hd, %struct.List* %tl) #0 {
	%1 = alloca %struct.Cons*
	store %struct.Cons* %self, %struct.Cons** %1
	%2 = alloca i32
	store i32 %hd, i32* %2
	%3 = alloca %struct.List*
	store %struct.List* %tl, %struct.List** %3
	%4 = alloca %struct.Cons*
	%5 = alloca i32
	; assignement
	%6 = alloca i32
;before_visit
	%7 = load i32* %2
	store i32 %7, i32* %6
;after_visit
	%8 = load i32* %6
;field
	%9 = load %struct.Cons** %1
	%10 = getelementptr inbounds %struct.Cons* %9, i32 0, i32 2
	store i32 %8, i32* %10
	store i32 %8, i32* %5
	%11 = alloca %struct.List*
	; assignement
	%12 = alloca %struct.List*
;before_visit
	%13 = load %struct.List** %3
	store %struct.List* %13, %struct.List** %12
;after_visit
	%14 = load %struct.List** %12
;field
	%15 = load %struct.Cons** %1
	%16 = getelementptr inbounds %struct.Cons* %15, i32 0, i32 1
	store %struct.List* %14, %struct.List** %16
	store %struct.List* %14, %struct.List** %11
	%17 = alloca %struct.Cons*
	%18 = load %struct.Cons** %1
	store %struct.Cons* %18, %struct.Cons** %17
	%19 = load %struct.Cons** %17
	store %struct.Cons* %19, %struct.Cons** %4
	%20 = load %struct.Cons** %4
	ret %struct.Cons* %20
}

define i32 @Cons_head(%struct.Cons* %self) #0 {
	%1 = alloca %struct.Cons*
	store %struct.Cons* %self, %struct.Cons** %1
	%2 = alloca i32
	%3 = alloca i32
	%4 = load %struct.Cons** %1
	%5 = getelementptr inbounds %struct.Cons* %4, i32 0, i32 2
	%6 = load i32* %5
	store i32 %6, i32* %3
	%7 = load i32* %3
	store i32 %7, i32* %2
	%8 = load i32* %2
	ret i32 %8
}

define i1 @Cons_isNil(%struct.Cons* %self) #0 {
	%1 = alloca %struct.Cons*
	store %struct.Cons* %self, %struct.Cons** %1
	%2 = alloca i1
	%3 = alloca i1
	store i1 false, i1* %3
	%4 = load i1* %3
	store i1 %4, i1* %2
	%5 = load i1* %2
	ret i1 %5
}

define i32 @Cons_length(%struct.Cons* %self) #0 {
	%1 = alloca %struct.Cons*
	store %struct.Cons* %self, %struct.Cons** %1
	%2 = alloca i32
	%3 = alloca i32
	; condition
	%4 = alloca i1
	; unary
	%5 = alloca i1
	; binary operation
	%6 = alloca i8*
	store i8* getelementptr inbounds ([2 x i8]* @.str0, i32 0, i32 0), i8** %6
	%7 = alloca i8*
	store i8* getelementptr inbounds ([2 x i8]* @.str1, i32 0, i32 0), i8** %7
	%8 = load i8** %6
	%9 = load i8** %7
	%10 = call i32 @strcmp(i8* %8, i8* %9)
	%11 = icmp eq i32 0, %10
	store i1 %11, i1* %5
	%12 = load i1* %5
	%13 = add i1 %12, 1
	store i1 %13, i1* %4
	%14 = load i1* %4
	br i1 %14, label %then_14, label %else_14
	
then_14:
		%15 = alloca i32
		; binary operation
		%16 = alloca i32
		store i32 1, i32* %16
		%17 = alloca i32
		%18 = alloca %struct.List*
		%19 = load %struct.Cons** %1
		%20 = getelementptr inbounds %struct.Cons* %19, i32 0, i32 1
		%21 = load %struct.List** %20
		store %struct.List* %21, %struct.List** %18
; call
		%22 = load %struct.List** %18
		%23 = getelementptr inbounds %struct.List* %22, i32 0, i32 0
		%24 = load %struct.ListVTable** %23
		%25 = getelementptr inbounds %struct.ListVTable* %24, i32 0, i32 0
		%26 = load i32 (%struct.List*)** %25
		%27 = call i32 %26(%struct.List* %22)
		store i32 %27, i32* %17
		%28 = load i32* %16
		%29 = load i32* %17
		%30 = add nuw i32 %28, %29
		store i32 %30, i32* %15
		%31 = load i32* %15
		store i32 %31, i32* %3
		br label %end_14
	
else_14:
		%32 = alloca i32
		store i32 1, i32* %32
		%33 = load i32* %32
		store i32 %33, i32* %3
		br label %end_14
	
end_14:
	%34 = load i32* %3
	store i32 %34, i32* %2
	%35 = load i32* %2
	ret i32 %35
}

define i32 @Main_main(%struct.Main* %self) #0 {
	%1 = alloca %struct.Main*
	store %struct.Main* %self, %struct.Main** %1
	%2 = alloca i32
	%3 = alloca i32
	; let
	%4 = alloca %struct.List*
	%5 = alloca i32
	%6 = alloca %struct.IO*
	%7 = alloca i8*
	store i8* getelementptr inbounds ([17 x i8]* @.str2, i32 0, i32 0), i8** %7
; call
	%8 = load %struct.Main** %1
	%9 = getelementptr inbounds %struct.Main* %8, i32 0, i32 0
	%10 = load %struct.MainVTable** %9
	%11 = getelementptr inbounds %struct.MainVTable* %10, i32 0, i32 1
	%12 = load %struct.IO* (%struct.Main*, i8*)** %11
	%13 = load i8** %7
	%14 = call %struct.IO* %12(%struct.Main* %8, i8* %13)
	store %struct.IO* %14, %struct.IO** %6
	%15 = alloca %struct.List*
	; assignement
	%16 = alloca %struct.Cons*
;before_visit
	; new
	%17 = call %struct.Cons* @ConsNew()
	store %struct.Cons* %17, %struct.Cons** %16
;after_visit
	%18 = load %struct.Cons** %16
	%19 = bitcast %struct.Cons* %18 to %struct.List*
	store %struct.List* %19, %struct.List** %4
	store %struct.List* %19, %struct.List** %15
	%20 = alloca i1
; call
	%21 = load %struct.Main** %1
	%22 = getelementptr inbounds %struct.Main* %21, i32 0, i32 0
	%23 = load %struct.MainVTable** %22
	%24 = getelementptr inbounds %struct.MainVTable* %23, i32 0, i32 6
	%25 = load i1 (%struct.Main*)** %24
	%26 = call i1 %25(%struct.Main* %21)
	store i1 %26, i1* %20
	%27 = alloca %struct.IO*
	%28 = alloca i32
	%29 = alloca %struct.List*
	%30 = load %struct.List** %4
	store %struct.List* %30, %struct.List** %29
; call
	%31 = load %struct.List** %29
	%32 = getelementptr inbounds %struct.List* %31, i32 0, i32 0
	%33 = load %struct.ListVTable** %32
	%34 = getelementptr inbounds %struct.ListVTable* %33, i32 0, i32 0
	%35 = load i32 (%struct.List*)** %34
	%36 = call i32 %35(%struct.List* %31)
	store i32 %36, i32* %28
; call
	%37 = load %struct.Main** %1
	%38 = getelementptr inbounds %struct.Main* %37, i32 0, i32 0
	%39 = load %struct.MainVTable** %38
	%40 = getelementptr inbounds %struct.MainVTable* %39, i32 0, i32 3
	%41 = load %struct.IO* (%struct.Main*, i32)** %40
	%42 = load i32* %28
	%43 = call %struct.IO* %41(%struct.Main* %37, i32 %42)
	store %struct.IO* %43, %struct.IO** %27
	%44 = alloca %struct.IO*
	%45 = alloca i8*
	store i8* getelementptr inbounds ([2 x i8]* @.str3, i32 0, i32 0), i8** %45
; call
	%46 = load %struct.Main** %1
	%47 = getelementptr inbounds %struct.Main* %46, i32 0, i32 0
	%48 = load %struct.MainVTable** %47
	%49 = getelementptr inbounds %struct.MainVTable* %48, i32 0, i32 1
	%50 = load %struct.IO* (%struct.Main*, i8*)** %49
	%51 = load i8** %45
	%52 = call %struct.IO* %50(%struct.Main* %46, i8* %51)
	store %struct.IO* %52, %struct.IO** %44
	%53 = alloca i1
	; let
	%54 = alloca i32
	%55 = alloca i32
	store i32 10, i32* %55
	%56 = load i32* %55
	store i32 %56, i32* %54
	%57 = alloca i1
	%58 = alloca i1
	; while
	br label %loop_5

loop_5:
	%59 = alloca i1
	; binary operation
	%60 = alloca i32
	store i32 0, i32* %60
	%61 = alloca i32
	%62 = load i32* %54
	store i32 %62, i32* %61
	%63 = load i32* %60
	%64 = load i32* %61
	%65 = icmp slt i32 %63, %64
	store i1 %65, i1* %59
	%66 = load i1* %59
	br i1 %66, label %do_5, label %end_5

do_5:
	%67 = alloca %struct.IO*
	%68 = alloca i32
	%69 = load i32* %54
	store i32 %69, i32* %68
; call
	%70 = load %struct.Main** %1
	%71 = getelementptr inbounds %struct.Main* %70, i32 0, i32 0
	%72 = load %struct.MainVTable** %71
	%73 = getelementptr inbounds %struct.MainVTable* %72, i32 0, i32 3
	%74 = load %struct.IO* (%struct.Main*, i32)** %73
	%75 = load i32* %68
	%76 = call %struct.IO* %74(%struct.Main* %70, i32 %75)
	store %struct.IO* %76, %struct.IO** %67
	%77 = alloca %struct.IO*
	%78 = alloca i8*
	store i8* getelementptr inbounds ([2 x i8]* @.str4, i32 0, i32 0), i8** %78
; call
	%79 = load %struct.Main** %1
	%80 = getelementptr inbounds %struct.Main* %79, i32 0, i32 0
	%81 = load %struct.MainVTable** %80
	%82 = getelementptr inbounds %struct.MainVTable* %81, i32 0, i32 1
	%83 = load %struct.IO* (%struct.Main*, i8*)** %82
	%84 = load i8** %78
	%85 = call %struct.IO* %83(%struct.Main* %79, i8* %84)
	store %struct.IO* %85, %struct.IO** %77
	%86 = alloca i32
	; assignement
	%87 = alloca i32
;before_visit
	; binary operation
	%88 = alloca i32
	%89 = load i32* %54
	store i32 %89, i32* %88
	%90 = alloca i32
	store i32 1, i32* %90
	%91 = load i32* %88
	%92 = load i32* %90
	%93 = sub i32 %91, %92
	store i32 %93, i32* %87
;after_visit
	%94 = load i32* %87
	store i32 %94, i32* %54
	store i32 %94, i32* %86
	br label %loop_5

end_5:
	%95 = load i1* %58
	store i1 %95, i1* %57
	%96 = load i1* %57
	store i1 %96, i1* %53
	%97 = alloca %struct.IO*
	%98 = alloca i8*
	store i8* getelementptr inbounds ([2 x i8]* @.str5, i32 0, i32 0), i8** %98
; call
	%99 = load %struct.Main** %1
	%100 = getelementptr inbounds %struct.Main* %99, i32 0, i32 0
	%101 = load %struct.MainVTable** %100
	%102 = getelementptr inbounds %struct.MainVTable* %101, i32 0, i32 1
	%103 = load %struct.IO* (%struct.Main*, i8*)** %102
	%104 = load i8** %98
	%105 = call %struct.IO* %103(%struct.Main* %99, i8* %104)
	store %struct.IO* %105, %struct.IO** %97
	%106 = alloca i8*
	store i8* getelementptr inbounds ([7 x i8]* @.str6, i32 0, i32 0), i8** %106
	%107 = alloca %struct.Cons*
	; new
	%108 = call %struct.Cons* @ConsNew()
	store %struct.Cons* %108, %struct.Cons** %107
	%109 = alloca i32
	store i32 0, i32* %109
	%110 = load i32* %109
	store i32 %110, i32* %5
	%111 = load i32* %5
	store i32 %111, i32* %3
	%112 = load i32* %3
	store i32 %112, i32* %2
	%113 = load i32* %2
	ret i32 %113
}

define i1 @Main_test(%struct.Main* %self) #0 {
	%1 = alloca %struct.Main*
	store %struct.Main* %self, %struct.Main** %1
	%2 = alloca i1
	%3 = alloca i1
	%4 = load i1* %3
	store i1 %4, i1* %2
	%5 = load i1* %2
	ret i1 %5
}

define i32 @main(){
%1 = call %struct.Main* @MainNew()
%2 = getelementptr inbounds %struct.Main* %1, i32 0, i32 0
%3 = load %struct.MainVTable** %2
%4 = getelementptr inbounds %struct.MainVTable* %3, i32 0, i32 7
%5 = load i32 (%struct.Main*)** %4
%6 = call i32 %5(%struct.Main* %1)
ret i32 %6
}
