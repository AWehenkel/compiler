declare i1 @inputBool()
declare i32 @inputInt32()
declare i8* @inputLine()
declare void @print(i8*)
declare void @printInt32(i32)
declare void @printBool(i1)
declare i32 @strcmp(i8*, i8*)
declare float @llvm.powi.f32(float, i32)

@.str_empty = private unnamed_addr constant [1 x i8] c"\00", align 1
@.str0 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@.str1 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@.str2 = private unnamed_addr constant [17 x i8] c"List has length\0a\00", align 1
@.str3 = private unnamed_addr constant [3 x i8] c"ok\00", align 1
@.str4 = private unnamed_addr constant [3 x i8] c"ko\00", align 1
@.str5 = private unnamed_addr constant [11 x i8] c"Ca marche\0a\00", align 1
@.str6 = private unnamed_addr constant [2 x i8] c"\0a\00", align 1
@.str7 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str8 = private unnamed_addr constant [2 x i8] c"\0a\00", align 1
@.str9 = private unnamed_addr constant [7 x i8] c"coucou\00", align 1
declare noalias i8* @malloc(i32)

%struct.List = type {
	%struct.ListVTable*
}

%struct.ListVTable = type {
	i32 (%struct.List*)*,
	i1 (%struct.List*)*
}

@ListVTable_inst = global %struct.ListVTable{
	i32 (%struct.List*)* @List_length,
	i1 (%struct.List*)* @List_isNil
}

define void @ListInit(%struct.List* %self){
	%1 = bitcast %struct.List* %self to %struct.Object*
	call void @ObjectInit(%struct.Object* %1)
	%2 = getelementptr inbounds %struct.List* %self, i32 0, i32 0
	store %struct.ListVTable* @ListVTable_inst, %struct.ListVTable** %2
	ret void
}

define %struct.List* @ListNew(){
	%self = alloca %struct.List*
	%1 = getelementptr %struct.List* null, i32 1
	%size = ptrtoint %struct.List* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.List*
	store %struct.List* %3, %struct.List** %self
	%4 = load %struct.List** %self
	%5 = icmp ne %struct.List* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @ListInit(%struct.List* %4)
	br label %null

null:   			; preds = %5
	ret %struct.List* %4
}

%struct.Nil = type {
	%struct.NilVTable*
}

%struct.NilVTable = type {
	i32 (%struct.Nil*)*,
	i1 (%struct.Nil*)*
}

@NilVTable_inst = global %struct.NilVTable{
	i32 (%struct.Nil*)* bitcast (i32 (%struct.List*)* @List_length to i32 (%struct.Nil*)*),
	i1 (%struct.Nil*)* bitcast (i1 (%struct.List*)* @List_isNil to i1 (%struct.Nil*)*)
}

define void @NilInit(%struct.Nil* %self){
	%1 = bitcast %struct.Nil* %self to %struct.List*
	call void @ListInit(%struct.List* %1)
	%2 = getelementptr inbounds %struct.Nil* %self, i32 0, i32 0
	store %struct.NilVTable* @NilVTable_inst, %struct.NilVTable** %2
	ret void
}

define %struct.Nil* @NilNew(){
	%self = alloca %struct.Nil*
	%1 = getelementptr %struct.Nil* null, i32 1
	%size = ptrtoint %struct.Nil* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.Nil*
	store %struct.Nil* %3, %struct.Nil** %self
	%4 = load %struct.Nil** %self
	%5 = icmp ne %struct.Nil* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @NilInit(%struct.Nil* %4)
	br label %null

null:   			; preds = %5
	ret %struct.Nil* %4
}

%struct.Cons = type {
	%struct.ConsVTable*,
	%struct.List*,
	i32
}

%struct.ConsVTable = type {
	i32 (%struct.Cons*)*,
	i1 (%struct.Cons*)*,
	i32 (%struct.Cons*)*,
	%struct.Cons* (%struct.Cons*, i32, %struct.List*)*
}

@ConsVTable_inst = global %struct.ConsVTable{
	i32 (%struct.Cons*)* @Cons_length,
	i1 (%struct.Cons*)* @Cons_isNil,
	i32 (%struct.Cons*)* @Cons_head,
	%struct.Cons* (%struct.Cons*, i32, %struct.List*)* @Cons_init
}

define void @ConsInit(%struct.Cons* %self){
	%1 = bitcast %struct.Cons* %self to %struct.List*
	call void @ListInit(%struct.List* %1)
	%tail = getelementptr inbounds %struct.Cons* %self, i32 0, i32 1
	%2 = alloca %struct.Nil*
	; new
	%3 = call %struct.Nil* @NilNew()
	store %struct.Nil* %3, %struct.Nil** %2
	%4 = load %struct.Nil** %2
	%5 = bitcast %struct.Nil* %4 to %struct.List*
	store %struct.List* %5, %struct.List** %tail
	%head = getelementptr inbounds %struct.Cons* %self, i32 0, i32 2
	store i32 0, i32* %head
	%6 = getelementptr inbounds %struct.Cons* %self, i32 0, i32 0
	store %struct.ConsVTable* @ConsVTable_inst, %struct.ConsVTable** %6
	ret void
}

define %struct.Cons* @ConsNew(){
	%self = alloca %struct.Cons*
	%1 = getelementptr %struct.Cons* null, i32 1
	%size = ptrtoint %struct.Cons* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.Cons*
	store %struct.Cons* %3, %struct.Cons** %self
	%4 = load %struct.Cons** %self
	%5 = icmp ne %struct.Cons* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @ConsInit(%struct.Cons* %4)
	br label %null

null:   			; preds = %5
	ret %struct.Cons* %4
}

%struct.Main = type {
	%struct.MainVTable*
}

%struct.MainVTable = type {
	i32 (%struct.Main*)*,
	%struct.IO* (%struct.Main*, i8*)*,
	%struct.IO* (%struct.Main*, i1)*,
	%struct.IO* (%struct.Main*, i32)*,
	i1 (%struct.Main*)*,
	i8* (%struct.Main*)*,
	i1 (%struct.Main*)*,
	i32 (%struct.Main*)*
}

@MainVTable_inst = global %struct.MainVTable{
	i32 (%struct.Main*)* bitcast (i32 (%struct.IO*)* @IO_inputInt32 to i32 (%struct.Main*)*),
	%struct.IO* (%struct.Main*, i8*)* bitcast (%struct.IO* (%struct.IO*, i8*)* @IO_print to %struct.IO* (%struct.Main*, i8*)*),
	%struct.IO* (%struct.Main*, i1)* bitcast (%struct.IO* (%struct.IO*, i1)* @IO_printBool to %struct.IO* (%struct.Main*, i1)*),
	%struct.IO* (%struct.Main*, i32)* bitcast (%struct.IO* (%struct.IO*, i32)* @IO_printInt32 to %struct.IO* (%struct.Main*, i32)*),
	i1 (%struct.Main*)* bitcast (i1 (%struct.IO*)* @IO_inputBool to i1 (%struct.Main*)*),
	i8* (%struct.Main*)* bitcast (i8* (%struct.IO*)* @IO_inputLine to i8* (%struct.Main*)*),
	i1 (%struct.Main*)* @Main_test,
	i32 (%struct.Main*)* @Main_main
}

define void @MainInit(%struct.Main* %self){
	%1 = bitcast %struct.Main* %self to %struct.IO*
	call void @IOInit(%struct.IO* %1)
	%2 = getelementptr inbounds %struct.Main* %self, i32 0, i32 0
	store %struct.MainVTable* @MainVTable_inst, %struct.MainVTable** %2
	ret void
}

define %struct.Main* @MainNew(){
	%self = alloca %struct.Main*
	%1 = getelementptr %struct.Main* null, i32 1
	%size = ptrtoint %struct.Main* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.Main*
	store %struct.Main* %3, %struct.Main** %self
	%4 = load %struct.Main** %self
	%5 = icmp ne %struct.Main* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @MainInit(%struct.Main* %4)
	br label %null

null:   			; preds = %5
	ret %struct.Main* %4
}

%struct.IO = type {
	%struct.IOVTable*
}

%struct.IOVTable = type {
	i32 (%struct.IO*)*,
	%struct.IO* (%struct.IO*, i8*)*,
	%struct.IO* (%struct.IO*, i1)*,
	%struct.IO* (%struct.IO*, i32)*,
	i1 (%struct.IO*)*,
	i8* (%struct.IO*)*
}

@IOVTable_inst = global %struct.IOVTable{
	i32 (%struct.IO*)* @IO_inputInt32,
	%struct.IO* (%struct.IO*, i8*)* @IO_print,
	%struct.IO* (%struct.IO*, i1)* @IO_printBool,
	%struct.IO* (%struct.IO*, i32)* @IO_printInt32,
	i1 (%struct.IO*)* @IO_inputBool,
	i8* (%struct.IO*)* @IO_inputLine
}

define void @IOInit(%struct.IO* %self){
	%1 = bitcast %struct.IO* %self to %struct.Object*
	call void @ObjectInit(%struct.Object* %1)
	%2 = getelementptr inbounds %struct.IO* %self, i32 0, i32 0
	store %struct.IOVTable* @IOVTable_inst, %struct.IOVTable** %2
	ret void
}

define %struct.IO* @IONew(){
	%self = alloca %struct.IO*
	%1 = getelementptr %struct.IO* null, i32 1
	%size = ptrtoint %struct.IO* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.IO*
	store %struct.IO* %3, %struct.IO** %self
	%4 = load %struct.IO** %self
	%5 = icmp ne %struct.IO* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @IOInit(%struct.IO* %4)
	br label %null

null:   			; preds = %5
	ret %struct.IO* %4
}

%struct.Object = type {
	%struct.ObjectVTable*
}

%struct.ObjectVTable = type {
}

@ObjectVTable_inst = global %struct.ObjectVTable{
}

define void @ObjectInit(%struct.Object* %self){
	%1 = getelementptr inbounds %struct.Object* %self, i32 0, i32 0
	store %struct.ObjectVTable* @ObjectVTable_inst, %struct.ObjectVTable** %1
	ret void
}

define %struct.Object* @ObjectNew(){
	%self = alloca %struct.Object*
	%1 = getelementptr %struct.Object* null, i32 1
	%size = ptrtoint %struct.Object* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.Object*
	store %struct.Object* %3, %struct.Object** %self
	%4 = load %struct.Object** %self
	%5 = icmp ne %struct.Object* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @ObjectInit(%struct.Object* %4)
	br label %null

null:   			; preds = %5
	ret %struct.Object* %4
}

define %struct.IO* @IO_print(%struct.IO* %self, i8* %s) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i8*
	store i8* %s, i8** %2
	%3 = alloca %struct.IO*
	%4 = alloca %struct.IO*
	%5 = alloca i8*
	%6 = load i8** %2
	store i8* %6, i8** %5
;call
	%7 = load i8** %5
call void @print(i8* %7)
	%8 = alloca %struct.IO*
	%9 = load %struct.IO** %1
	store %struct.IO* %9, %struct.IO** %8
	%10 = load %struct.IO** %8
	store %struct.IO* %10, %struct.IO** %3
	%11 = load %struct.IO** %3
	ret %struct.IO* %11
}

define %struct.IO* @IO_printBool(%struct.IO* %self, i1 %b) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i1
	store i1 %b, i1* %2
	%3 = alloca %struct.IO*
	%4 = alloca %struct.IO*
	%5 = alloca i1
	%6 = load i1* %2
	store i1 %6, i1* %5
;call
	%7 = load i1* %5
call void @printBool(i1 %7)
	%8 = alloca %struct.IO*
	%9 = load %struct.IO** %1
	store %struct.IO* %9, %struct.IO** %8
	%10 = load %struct.IO** %8
	store %struct.IO* %10, %struct.IO** %3
	%11 = load %struct.IO** %3
	ret %struct.IO* %11
}

define %struct.IO* @IO_printInt32(%struct.IO* %self, i32 %i) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i32
	store i32 %i, i32* %2
	%3 = alloca %struct.IO*
	%4 = alloca %struct.IO*
	%5 = alloca i32
	%6 = load i32* %2
	store i32 %6, i32* %5
;call
	%7 = load i32* %5
call void @printInt32(i32 %7)
	%8 = alloca %struct.IO*
	%9 = load %struct.IO** %1
	store %struct.IO* %9, %struct.IO** %8
	%10 = load %struct.IO** %8
	store %struct.IO* %10, %struct.IO** %3
	%11 = load %struct.IO** %3
	ret %struct.IO* %11
}

define i8* @IO_inputLine(%struct.IO* %self) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i8*
	%3 = alloca i8*
;call
	%4 = call i8* @inputLine()
	store i8* %4, i8** %3
	%5 = load i8** %3
	store i8* %5, i8** %2
	%6 = load i8** %2
	ret i8* %6
}

define i1 @IO_inputBool(%struct.IO* %self) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i1
	%3 = alloca i1
;call
	%4 = call i1 @inputBool()
	store i1 %4, i1* %3
	%5 = load i1* %3
	store i1 %5, i1* %2
	%6 = load i1* %2
	ret i1 %6
}

define i32 @IO_inputInt32(%struct.IO* %self) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i32
	%3 = alloca i32
;call
	%4 = call i32 @inputInt32()
	store i32 %4, i32* %3
	%5 = load i32* %3
	store i32 %5, i32* %2
	%6 = load i32* %2
	ret i32 %6
}

define i1 @List_isNil(%struct.List* %self) #0 {
	%1 = alloca %struct.List*
	store %struct.List* %self, %struct.List** %1
	%2 = alloca i1
	%3 = alloca i1
	store i1 true, i1* %3
	%4 = load i1* %3
	store i1 %4, i1* %2
	%5 = load i1* %2
	ret i1 %5
}

define i32 @List_length(%struct.List* %self) #0 {
	%1 = alloca %struct.List*
	store %struct.List* %self, %struct.List** %1
	%2 = alloca i32
	%3 = alloca i32
	store i32 0, i32* %3
	%4 = load i32* %3
	store i32 %4, i32* %2
	%5 = load i32* %2
	ret i32 %5
}

define %struct.Cons* @Cons_init(%struct.Cons* %self, i32 %hd, %struct.List* %tl) #0 {
	%1 = alloca %struct.Cons*
	store %struct.Cons* %self, %struct.Cons** %1
	%2 = alloca i32
	store i32 %hd, i32* %2
	%3 = alloca %struct.List*
	store %struct.List* %tl, %struct.List** %3
	%4 = alloca %struct.Cons*
	%5 = alloca i32
	; assignement
	%6 = alloca i32
	%7 = load i32* %2
	store i32 %7, i32* %6
	%8 = load i32* %6
;field
	%9 = load %struct.Cons** %1
	%10 = getelementptr inbounds %struct.Cons* %9, i32 0, i32 2
	store i32 %8, i32* %10
	store i32 %8, i32* %5
	%11 = alloca %struct.List*
	; assignement
	%12 = alloca %struct.List*
	%13 = load %struct.List** %3
	store %struct.List* %13, %struct.List** %12
	%14 = load %struct.List** %12
;field
	%15 = load %struct.Cons** %1
	%16 = getelementptr inbounds %struct.Cons* %15, i32 0, i32 1
	store %struct.List* %14, %struct.List** %16
	store %struct.List* %14, %struct.List** %11
	%17 = alloca %struct.Cons*
	%18 = load %struct.Cons** %1
	store %struct.Cons* %18, %struct.Cons** %17
	%19 = load %struct.Cons** %17
	store %struct.Cons* %19, %struct.Cons** %4
	%20 = load %struct.Cons** %4
	ret %struct.Cons* %20
}

define i32 @Cons_head(%struct.Cons* %self) #0 {
	%1 = alloca %struct.Cons*
	store %struct.Cons* %self, %struct.Cons** %1
	%2 = alloca i32
	%3 = alloca i32
	%4 = load %struct.Cons** %1
	%5 = getelementptr inbounds %struct.Cons* %4, i32 0, i32 2
	%6 = load i32* %5
	store i32 %6, i32* %3
	%7 = load i32* %3
	store i32 %7, i32* %2
	%8 = load i32* %2
	ret i32 %8
}

define i1 @Cons_isNil(%struct.Cons* %self) #0 {
	%1 = alloca %struct.Cons*
	store %struct.Cons* %self, %struct.Cons** %1
	%2 = alloca i1
	%3 = alloca i1
	store i1 false, i1* %3
	%4 = load i1* %3
	store i1 %4, i1* %2
	%5 = load i1* %2
	ret i1 %5
}

define i32 @Cons_length(%struct.Cons* %self) #0 {
	%1 = alloca %struct.Cons*
	store %struct.Cons* %self, %struct.Cons** %1
	%2 = alloca i32
	%3 = alloca i32
	; condition
	%4 = alloca i1
	; unary
	%5 = alloca i1
	; binary operation
	%6 = alloca i8*
	store i8* getelementptr inbounds ([2 x i8]* @.str0, i32 0, i32 0), i8** %6
	%7 = alloca i8*
	store i8* getelementptr inbounds ([2 x i8]* @.str1, i32 0, i32 0), i8** %7
	%8 = load i8** %6
	%9 = load i8** %7
	%10 = call i32 @strcmp(i8* %8, i8* %9)
	%11 = icmp eq i32 0, %10
	store i1 %11, i1* %5
	%12 = load i1* %5
	%13 = add i1 %12, 1
	store i1 %13, i1* %4
	%14 = load i1* %4
	br i1 %14, label %then_14, label %else_14
	
then_14:
		%15 = alloca i32
		; binary operation
		%16 = alloca i32
		store i32 1, i32* %16
		%17 = alloca i32
		%18 = alloca %struct.List*
		%19 = load %struct.Cons** %1
		%20 = getelementptr inbounds %struct.Cons* %19, i32 0, i32 1
		%21 = load %struct.List** %20
		store %struct.List* %21, %struct.List** %18
; call
		%22 = load %struct.List** %18
		%23 = getelementptr inbounds %struct.List* %22, i32 0, i32 0
		%24 = load %struct.ListVTable** %23
		%25 = getelementptr inbounds %struct.ListVTable* %24, i32 0, i32 0
		%26 = load i32 (%struct.List*)** %25
		%27 = call i32 %26(%struct.List* %22)
		store i32 %27, i32* %17
		%28 = load i32* %16
		%29 = load i32* %17
		%30 = add nuw i32 %28, %29
		store i32 %30, i32* %15
;avant bitcast
		%31 = load i32* %15
		store i32 %31, i32* %3
		br label %end_14
	
else_14:
		%32 = alloca i32
		store i32 1, i32* %32
		%33 = load i32* %32
		store i32 %33, i32* %3
		br label %end_14
	
end_14:
	%34 = load i32* %3
	store i32 %34, i32* %2
	%35 = load i32* %2
	ret i32 %35
}

define i32 @Main_main(%struct.Main* %self) #0 {
	%1 = alloca %struct.Main*
	store %struct.Main* %self, %struct.Main** %1
	%2 = alloca i32
	%3 = alloca i32
	; let
	%4 = alloca %struct.List*
	store %struct.List* null, %struct.List** %4
	%5 = alloca i32
	%6 = alloca %struct.IO*
	%7 = alloca i8*
	store i8* getelementptr inbounds ([17 x i8]* @.str2, i32 0, i32 0), i8** %7
; call
	%8 = load %struct.Main** %1
	%9 = getelementptr inbounds %struct.Main* %8, i32 0, i32 0
	%10 = load %struct.MainVTable** %9
	%11 = getelementptr inbounds %struct.MainVTable* %10, i32 0, i32 1
	%12 = load %struct.IO* (%struct.Main*, i8*)** %11
	%13 = load i8** %7
	%14 = call %struct.IO* %12(%struct.Main* %8, i8* %13)
	store %struct.IO* %14, %struct.IO** %6
	%15 = alloca i1
	; binary operation
	%16 = alloca i32
	store i32 1, i32* %16
	%17 = alloca i32
	store i32 2, i32* %17
	%18 = load i32* %16
	%19 = load i32* %17
	%20 = icmp slt i32 %18, %19
	store i1 %20, i1* %15
	%21 = alloca %struct.List*
	; assignement
	%22 = alloca %struct.Cons*
	; new
	%23 = call %struct.Cons* @ConsNew()
	store %struct.Cons* %23, %struct.Cons** %22
	%24 = load %struct.Cons** %22
	%25 = bitcast %struct.Cons* %24 to %struct.List*
	store %struct.List* %25, %struct.List** %4
	store %struct.List* %25, %struct.List** %21
	%26 = alloca i1
; call
	%27 = load %struct.Main** %1
	%28 = getelementptr inbounds %struct.Main* %27, i32 0, i32 0
	%29 = load %struct.MainVTable** %28
	%30 = getelementptr inbounds %struct.MainVTable* %29, i32 0, i32 6
	%31 = load i1 (%struct.Main*)** %30
	%32 = call i1 %31(%struct.Main* %27)
	store i1 %32, i1* %26
	%33 = alloca i1
	; condition
	%34 = alloca i1
	; binary operation
	; condition
	%35 = alloca i1
	%36 = alloca %struct.IO*
	%37 = alloca i8*
	store i8* getelementptr inbounds ([3 x i8]* @.str3, i32 0, i32 0), i8** %37
; call
	%38 = load %struct.Main** %1
	%39 = getelementptr inbounds %struct.Main* %38, i32 0, i32 0
	%40 = load %struct.MainVTable** %39
	%41 = getelementptr inbounds %struct.MainVTable* %40, i32 0, i32 1
	%42 = load %struct.IO* (%struct.Main*, i8*)** %41
	%43 = load i8** %37
	%44 = call %struct.IO* %42(%struct.Main* %38, i8* %43)
	store %struct.IO* %44, %struct.IO** %36
	%45 = alloca i1
	store i1 true, i1* %45
	%46 = load i1* %45
	store i1 %46, i1* %35
	%47 = load i1* %35
	br i1 %47, label %then_47, label %else_47
	
then_47:
		%48 = alloca i1
		store i1 true, i1* %48
;avant bitcast
		%49 = load i1* %48
		store i1 %49, i1* %34
		br label %end_47
	
else_47:
		%50 = alloca i1
		%51 = alloca %struct.IO*
		%52 = alloca i8*
		store i8* getelementptr inbounds ([3 x i8]* @.str4, i32 0, i32 0), i8** %52
; call
		%53 = load %struct.Main** %1
		%54 = getelementptr inbounds %struct.Main* %53, i32 0, i32 0
		%55 = load %struct.MainVTable** %54
		%56 = getelementptr inbounds %struct.MainVTable* %55, i32 0, i32 1
		%57 = load %struct.IO* (%struct.Main*, i8*)** %56
		%58 = load i8** %52
		%59 = call %struct.IO* %57(%struct.Main* %53, i8* %58)
		store %struct.IO* %59, %struct.IO** %51
		%60 = alloca i1
		store i1 true, i1* %60
		%61 = load i1* %60
		store i1 %61, i1* %50
		%62 = load i1* %50
		store i1 %62, i1* %34
		br label %end_47
	
end_47:
	%63 = load i1* %34
	br i1 %63, label %then_63, label %end_63
	
then_63:
		%64 = alloca %struct.IO*
		%65 = alloca i8*
		store i8* getelementptr inbounds ([11 x i8]* @.str5, i32 0, i32 0), i8** %65
; call
		%66 = load %struct.Main** %1
		%67 = getelementptr inbounds %struct.Main* %66, i32 0, i32 0
		%68 = load %struct.MainVTable** %67
		%69 = getelementptr inbounds %struct.MainVTable* %68, i32 0, i32 1
		%70 = load %struct.IO* (%struct.Main*, i8*)** %69
		%71 = load i8** %65
		%72 = call %struct.IO* %70(%struct.Main* %66, i8* %71)
		store %struct.IO* %72, %struct.IO** %64
		store i1 0, i1* %33
		br label %end_63
	
end_63:
	%73 = alloca %struct.IO*
	%74 = alloca i32
	%75 = alloca %struct.List*
	%76 = load %struct.List** %4
	store %struct.List* %76, %struct.List** %75
; call
	%77 = load %struct.List** %75
	%78 = getelementptr inbounds %struct.List* %77, i32 0, i32 0
	%79 = load %struct.ListVTable** %78
	%80 = getelementptr inbounds %struct.ListVTable* %79, i32 0, i32 0
	%81 = load i32 (%struct.List*)** %80
	%82 = call i32 %81(%struct.List* %77)
	store i32 %82, i32* %74
; call
	%83 = load %struct.Main** %1
	%84 = getelementptr inbounds %struct.Main* %83, i32 0, i32 0
	%85 = load %struct.MainVTable** %84
	%86 = getelementptr inbounds %struct.MainVTable* %85, i32 0, i32 3
	%87 = load %struct.IO* (%struct.Main*, i32)** %86
	%88 = load i32* %74
	%89 = call %struct.IO* %87(%struct.Main* %83, i32 %88)
	store %struct.IO* %89, %struct.IO** %73
	%90 = alloca %struct.IO*
	%91 = alloca i8*
	store i8* getelementptr inbounds ([2 x i8]* @.str6, i32 0, i32 0), i8** %91
; call
	%92 = load %struct.Main** %1
	%93 = getelementptr inbounds %struct.Main* %92, i32 0, i32 0
	%94 = load %struct.MainVTable** %93
	%95 = getelementptr inbounds %struct.MainVTable* %94, i32 0, i32 1
	%96 = load %struct.IO* (%struct.Main*, i8*)** %95
	%97 = load i8** %91
	%98 = call %struct.IO* %96(%struct.Main* %92, i8* %97)
	store %struct.IO* %98, %struct.IO** %90
	%99 = alloca i1
	; let
	%100 = alloca i32
	%101 = alloca i32
	store i32 10, i32* %101
	%102 = load i32* %101
	store i32 %102, i32* %100
	%103 = alloca i1
	%104 = alloca i1
	%105 = alloca i32
	; while
	br label %loop_1

loop_1:
	%106 = alloca i1
	; binary operation
	%107 = alloca i32
	store i32 0, i32* %107
	%108 = alloca i32
	%109 = load i32* %100
	store i32 %109, i32* %108
	%110 = load i32* %107
	%111 = load i32* %108
	%112 = icmp slt i32 %110, %111
	store i1 %112, i1* %106
	%113 = load i1* %106
	br i1 %113, label %do_1, label %end_1

do_1:
	%114 = alloca %struct.IO*
	%115 = alloca i32
	%116 = load i32* %100
	store i32 %116, i32* %115
; call
	%117 = load %struct.Main** %1
	%118 = getelementptr inbounds %struct.Main* %117, i32 0, i32 0
	%119 = load %struct.MainVTable** %118
	%120 = getelementptr inbounds %struct.MainVTable* %119, i32 0, i32 3
	%121 = load %struct.IO* (%struct.Main*, i32)** %120
	%122 = load i32* %115
	%123 = call %struct.IO* %121(%struct.Main* %117, i32 %122)
	store %struct.IO* %123, %struct.IO** %114
	%124 = alloca %struct.IO*
	%125 = alloca i8*
	store i8* getelementptr inbounds ([2 x i8]* @.str7, i32 0, i32 0), i8** %125
; call
	%126 = load %struct.Main** %1
	%127 = getelementptr inbounds %struct.Main* %126, i32 0, i32 0
	%128 = load %struct.MainVTable** %127
	%129 = getelementptr inbounds %struct.MainVTable* %128, i32 0, i32 1
	%130 = load %struct.IO* (%struct.Main*, i8*)** %129
	%131 = load i8** %125
	%132 = call %struct.IO* %130(%struct.Main* %126, i8* %131)
	store %struct.IO* %132, %struct.IO** %124
	%133 = alloca i32
	; assignement
	%134 = alloca i32
	; binary operation
	%135 = alloca i32
	%136 = load i32* %100
	store i32 %136, i32* %135
	%137 = alloca i32
	store i32 1, i32* %137
	%138 = load i32* %135
	%139 = load i32* %137
	%140 = sub i32 %138, %139
	store i32 %140, i32* %134
	%141 = load i32* %134
	store i32 %141, i32* %100
	store i32 %141, i32* %133
	%142 = load i32* %133
	store i32 %142, i32* %105
	br label %loop_1

end_1:
	%143 = load i1* %104
	store i1 %143, i1* %103
	%144 = load i1* %103
	store i1 %144, i1* %99
	%145 = alloca %struct.IO*
	%146 = alloca i8*
	store i8* getelementptr inbounds ([2 x i8]* @.str8, i32 0, i32 0), i8** %146
; call
	%147 = load %struct.Main** %1
	%148 = getelementptr inbounds %struct.Main* %147, i32 0, i32 0
	%149 = load %struct.MainVTable** %148
	%150 = getelementptr inbounds %struct.MainVTable* %149, i32 0, i32 1
	%151 = load %struct.IO* (%struct.Main*, i8*)** %150
	%152 = load i8** %146
	%153 = call %struct.IO* %151(%struct.Main* %147, i8* %152)
	store %struct.IO* %153, %struct.IO** %145
	%154 = alloca i8*
	store i8* getelementptr inbounds ([7 x i8]* @.str9, i32 0, i32 0), i8** %154
	%155 = alloca %struct.Cons*
	; new
	%156 = call %struct.Cons* @ConsNew()
	store %struct.Cons* %156, %struct.Cons** %155
	%157 = alloca i32
	store i32 0, i32* %157
	%158 = load i32* %157
	store i32 %158, i32* %5
	%159 = load i32* %5
	store i32 %159, i32* %3
	%160 = load i32* %3
	store i32 %160, i32* %2
	%161 = load i32* %2
	ret i32 %161
}

define i1 @Main_test(%struct.Main* %self) #0 {
	%1 = alloca %struct.Main*
	store %struct.Main* %self, %struct.Main** %1
	%2 = alloca i1
	%3 = alloca i1
	store i1 0, i1* %3
	%4 = load i1* %3
	store i1 %4, i1* %2
	%5 = load i1* %2
	ret i1 %5
}

define i32 @main(){
	%1 = call %struct.Main* @MainNew()
	%2 = getelementptr inbounds %struct.Main* %1, i32 0, i32 0
	%3 = load %struct.MainVTable** %2
	%4 = getelementptr inbounds %struct.MainVTable* %3, i32 0, i32 7
	%5 = load i32 (%struct.Main*)** %4
	%6 = call i32 %5(%struct.Main* %1)
	ret i32 %6
}
