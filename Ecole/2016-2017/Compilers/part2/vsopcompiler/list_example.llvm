declare i1 @inputBool()
declare i32 @inputInt32()
declare i8* @inputLine()
declare void @print(i8*)
declare void @printInt32(i32)
declare void @printBool(i1)
declare i32 @strcmp(i8*, i8*)
declare float @llvm.powi.f32(float, i32)

@.str_empty = private unnamed_addr constant [1 x i8] c"\00", align 1
@.str0 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@.str1 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@.str2 = private unnamed_addr constant [17 x i8] c"List has length\0a\00", align 1
@.str3 = private unnamed_addr constant [2 x i8] c"\0a\00", align 1
@.str4 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str5 = private unnamed_addr constant [2 x i8] c"\0a\00", align 1
@.str6 = private unnamed_addr constant [7 x i8] c"coucou\00", align 1
declare noalias i8* @malloc(i32)

%struct.List = type {
	%struct.ListVTable*
}

%struct.ListVTable = type {
	i32 (%struct.List*)*,
	i1 (%struct.List*)*
}

@ListVTable_inst = global %struct.ListVTable{
	i32 (%struct.List*)* @List_length,
	i1 (%struct.List*)* @List_isNil
}

define void @ListInit(%struct.List* %self){
	%1 = bitcast %struct.List* %self to %struct.Object*
	call void @ObjectInit(%struct.Object* %1)
	%2 = getelementptr inbounds %struct.List* %self, i32 0, i32 0
	store %struct.ListVTable* @ListVTable_inst, %struct.ListVTable** %2
	ret void
}

define %struct.List* @ListNew(){
	%self = alloca %struct.List*
	%1 = getelementptr %struct.List* null, i32 1
	%size = ptrtoint %struct.List* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.List*
	store %struct.List* %3, %struct.List** %self
	%4 = load %struct.List** %self
	%5 = icmp ne %struct.List* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @ListInit(%struct.List* %4)
	br label %null

null:   			; preds = %5
	ret %struct.List* %4
}

%struct.Nil = type {
	%struct.NilVTable*
}

%struct.NilVTable = type {
	i32 (%struct.Nil*)*,
	i1 (%struct.Nil*)*
}

@NilVTable_inst = global %struct.NilVTable{
	i32 (%struct.Nil*)* bitcast (i32 (%struct.List*)* @List_length to i32 (%struct.Nil*)*),
	i1 (%struct.Nil*)* bitcast (i1 (%struct.List*)* @List_isNil to i1 (%struct.Nil*)*)
}

define void @NilInit(%struct.Nil* %self){
	%1 = bitcast %struct.Nil* %self to %struct.List*
	call void @ListInit(%struct.List* %1)
	%2 = getelementptr inbounds %struct.Nil* %self, i32 0, i32 0
	store %struct.NilVTable* @NilVTable_inst, %struct.NilVTable** %2
	ret void
}

define %struct.Nil* @NilNew(){
	%self = alloca %struct.Nil*
	%1 = getelementptr %struct.Nil* null, i32 1
	%size = ptrtoint %struct.Nil* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.Nil*
	store %struct.Nil* %3, %struct.Nil** %self
	%4 = load %struct.Nil** %self
	%5 = icmp ne %struct.Nil* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @NilInit(%struct.Nil* %4)
	br label %null

null:   			; preds = %5
	ret %struct.Nil* %4
}

%struct.Cons = type {
	%struct.ConsVTable*,
	%struct.List*,
	i32
}

%struct.ConsVTable = type {
	i32 (%struct.Cons*)*,
	i1 (%struct.Cons*)*,
	i32 (%struct.Cons*)*,
	%struct.Cons* (%struct.Cons*, i32, %struct.List*)*
}

@ConsVTable_inst = global %struct.ConsVTable{
	i32 (%struct.Cons*)* @Cons_length,
	i1 (%struct.Cons*)* @Cons_isNil,
	i32 (%struct.Cons*)* @Cons_head,
	%struct.Cons* (%struct.Cons*, i32, %struct.List*)* @Cons_init
}

define void @ConsInit(%struct.Cons* %self){
	%1 = bitcast %struct.Cons* %self to %struct.List*
	call void @ListInit(%struct.List* %1)
	%tail = getelementptr inbounds %struct.Cons* %self, i32 0, i32 1
	%2 = alloca %struct.Nil*
	; new
	%3 = call %struct.Nil* @NilNew()
	store %struct.Nil* %3, %struct.Nil** %2
	%4 = load %struct.Nil** %2
	%5 = bitcast %struct.Nil* %4 to %struct.List*
	store %struct.List* %5, %struct.List** %tail
	%head = getelementptr inbounds %struct.Cons* %self, i32 0, i32 2
	store i32 0, i32* %head
	%6 = getelementptr inbounds %struct.Cons* %self, i32 0, i32 0
	store %struct.ConsVTable* @ConsVTable_inst, %struct.ConsVTable** %6
	ret void
}

define %struct.Cons* @ConsNew(){
	%self = alloca %struct.Cons*
	%1 = getelementptr %struct.Cons* null, i32 1
	%size = ptrtoint %struct.Cons* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.Cons*
	store %struct.Cons* %3, %struct.Cons** %self
	%4 = load %struct.Cons** %self
	%5 = icmp ne %struct.Cons* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @ConsInit(%struct.Cons* %4)
	br label %null

null:   			; preds = %5
	ret %struct.Cons* %4
}

%struct.Main = type {
	%struct.MainVTable*
}

%struct.MainVTable = type {
	i32 (%struct.Main*)*,
	%struct.IO* (%struct.Main*, i8*)*,
	%struct.IO* (%struct.Main*, i1)*,
	%struct.IO* (%struct.Main*, i32)*,
	i1 (%struct.Main*)*,
	i8* (%struct.Main*)*,
	i1 (%struct.Main*)*,
	i32 (%struct.Main*)*
}

@MainVTable_inst = global %struct.MainVTable{
	i32 (%struct.Main*)* bitcast (i32 (%struct.IO*)* @IO_inputInt32 to i32 (%struct.Main*)*),
	%struct.IO* (%struct.Main*, i8*)* bitcast (%struct.IO* (%struct.IO*, i8*)* @IO_print to %struct.IO* (%struct.Main*, i8*)*),
	%struct.IO* (%struct.Main*, i1)* bitcast (%struct.IO* (%struct.IO*, i1)* @IO_printBool to %struct.IO* (%struct.Main*, i1)*),
	%struct.IO* (%struct.Main*, i32)* bitcast (%struct.IO* (%struct.IO*, i32)* @IO_printInt32 to %struct.IO* (%struct.Main*, i32)*),
	i1 (%struct.Main*)* bitcast (i1 (%struct.IO*)* @IO_inputBool to i1 (%struct.Main*)*),
	i8* (%struct.Main*)* bitcast (i8* (%struct.IO*)* @IO_inputLine to i8* (%struct.Main*)*),
	i1 (%struct.Main*)* @Main_test,
	i32 (%struct.Main*)* @Main_main
}

define void @MainInit(%struct.Main* %self){
	%1 = bitcast %struct.Main* %self to %struct.IO*
	call void @IOInit(%struct.IO* %1)
	%2 = getelementptr inbounds %struct.Main* %self, i32 0, i32 0
	store %struct.MainVTable* @MainVTable_inst, %struct.MainVTable** %2
	ret void
}

define %struct.Main* @MainNew(){
	%self = alloca %struct.Main*
	%1 = getelementptr %struct.Main* null, i32 1
	%size = ptrtoint %struct.Main* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.Main*
	store %struct.Main* %3, %struct.Main** %self
	%4 = load %struct.Main** %self
	%5 = icmp ne %struct.Main* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @MainInit(%struct.Main* %4)
	br label %null

null:   			; preds = %5
	ret %struct.Main* %4
}

%struct.IO = type {
	%struct.IOVTable*
}

%struct.IOVTable = type {
	i32 (%struct.IO*)*,
	%struct.IO* (%struct.IO*, i8*)*,
	%struct.IO* (%struct.IO*, i1)*,
	%struct.IO* (%struct.IO*, i32)*,
	i1 (%struct.IO*)*,
	i8* (%struct.IO*)*
}

@IOVTable_inst = global %struct.IOVTable{
	i32 (%struct.IO*)* @IO_inputInt32,
	%struct.IO* (%struct.IO*, i8*)* @IO_print,
	%struct.IO* (%struct.IO*, i1)* @IO_printBool,
	%struct.IO* (%struct.IO*, i32)* @IO_printInt32,
	i1 (%struct.IO*)* @IO_inputBool,
	i8* (%struct.IO*)* @IO_inputLine
}

define void @IOInit(%struct.IO* %self){
	%1 = bitcast %struct.IO* %self to %struct.Object*
	call void @ObjectInit(%struct.Object* %1)
	%2 = getelementptr inbounds %struct.IO* %self, i32 0, i32 0
	store %struct.IOVTable* @IOVTable_inst, %struct.IOVTable** %2
	ret void
}

define %struct.IO* @IONew(){
	%self = alloca %struct.IO*
	%1 = getelementptr %struct.IO* null, i32 1
	%size = ptrtoint %struct.IO* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.IO*
	store %struct.IO* %3, %struct.IO** %self
	%4 = load %struct.IO** %self
	%5 = icmp ne %struct.IO* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @IOInit(%struct.IO* %4)
	br label %null

null:   			; preds = %5
	ret %struct.IO* %4
}

%struct.Object = type {
	%struct.ObjectVTable*
}

%struct.ObjectVTable = type {
}

@ObjectVTable_inst = global %struct.ObjectVTable{
}

define void @ObjectInit(%struct.Object* %self){
	%1 = getelementptr inbounds %struct.Object* %self, i32 0, i32 0
	store %struct.ObjectVTable* @ObjectVTable_inst, %struct.ObjectVTable** %1
	ret void
}

define %struct.Object* @ObjectNew(){
	%self = alloca %struct.Object*
	%1 = getelementptr %struct.Object* null, i32 1
	%size = ptrtoint %struct.Object* %1 to i32
	%2 = call noalias i8* @malloc(i32 %size)
	%3 = bitcast i8* %2 to %struct.Object*
	store %struct.Object* %3, %struct.Object** %self
	%4 = load %struct.Object** %self
	%5 = icmp ne %struct.Object* %4, null
	br i1 %5, label %notnull, label %null

notnull:			; preds = %5
	call void @ObjectInit(%struct.Object* %4)
	br label %null

null:   			; preds = %5
	ret %struct.Object* %4
}

define %struct.IO* @IO_print(%struct.IO* %self, i8* %s) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i8*
	store i8* %s, i8** %2
	%3 = alloca %struct.IO*
	%4 = alloca %struct.IO*
	%5 = alloca i8*
	%6 = load i8** %2
	store i8* %6, i8** %5
;call
	%7 = load i8** %5
call void @print(i8* %7)
	%8 = alloca %struct.IO*
	%9 = load %struct.IO** %1
	store %struct.IO* %9, %struct.IO** %8
	%10 = load %struct.IO** %8
	store %struct.IO* %10, %struct.IO** %3
	%11 = load %struct.IO** %3
	ret %struct.IO* %11
}

define %struct.IO* @IO_printBool(%struct.IO* %self, i1 %b) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i1
	store i1 %b, i1* %2
	%3 = alloca %struct.IO*
	%4 = alloca %struct.IO*
	%5 = alloca i1
	%6 = load i1* %2
	store i1 %6, i1* %5
;call
	%7 = load i1* %5
call void @printBool(i1 %7)
	%8 = alloca %struct.IO*
	%9 = load %struct.IO** %1
	store %struct.IO* %9, %struct.IO** %8
	%10 = load %struct.IO** %8
	store %struct.IO* %10, %struct.IO** %3
	%11 = load %struct.IO** %3
	ret %struct.IO* %11
}

define %struct.IO* @IO_printInt32(%struct.IO* %self, i32 %i) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i32
	store i32 %i, i32* %2
	%3 = alloca %struct.IO*
	%4 = alloca %struct.IO*
	%5 = alloca i32
	%6 = load i32* %2
	store i32 %6, i32* %5
;call
	%7 = load i32* %5
call void @printInt32(i32 %7)
	%8 = alloca %struct.IO*
	%9 = load %struct.IO** %1
	store %struct.IO* %9, %struct.IO** %8
	%10 = load %struct.IO** %8
	store %struct.IO* %10, %struct.IO** %3
	%11 = load %struct.IO** %3
	ret %struct.IO* %11
}

define i8* @IO_inputLine(%struct.IO* %self) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i8*
	%3 = alloca i8*
;call
	%4 = call i8* @inputLine()
	store i8* %4, i8** %3
	%5 = load i8** %3
	store i8* %5, i8** %2
	%6 = load i8** %2
	ret i8* %6
}

define i1 @IO_inputBool(%struct.IO* %self) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i1
	%3 = alloca i1
;call
	%4 = call i1 @inputBool()
	store i1 %4, i1* %3
	%5 = load i1* %3
	store i1 %5, i1* %2
	%6 = load i1* %2
	ret i1 %6
}

define i32 @IO_inputInt32(%struct.IO* %self) #0 {
	%1 = alloca %struct.IO*
	store %struct.IO* %self, %struct.IO** %1
	%2 = alloca i32
	%3 = alloca i32
;call
	%4 = call i32 @inputInt32()
	store i32 %4, i32* %3
	%5 = load i32* %3
	store i32 %5, i32* %2
	%6 = load i32* %2
	ret i32 %6
}

define i1 @List_isNil(%struct.List* %self) #0 {
	%1 = alloca %struct.List*
	store %struct.List* %self, %struct.List** %1
	%2 = alloca i1
	%3 = alloca i1
	store i1 true, i1* %3
	%4 = load i1* %3
	store i1 %4, i1* %2
	%5 = load i1* %2
	ret i1 %5
}

define i32 @List_length(%struct.List* %self) #0 {
	%1 = alloca %struct.List*
	store %struct.List* %self, %struct.List** %1
	%2 = alloca i32
	%3 = alloca i32
	store i32 0, i32* %3
	%4 = load i32* %3
	store i32 %4, i32* %2
	%5 = load i32* %2
	ret i32 %5
}

define %struct.Cons* @Cons_init(%struct.Cons* %self, i32 %hd, %struct.List* %tl) #0 {
	%1 = alloca %struct.Cons*
	store %struct.Cons* %self, %struct.Cons** %1
	%2 = alloca i32
	store i32 %hd, i32* %2
	%3 = alloca %struct.List*
	store %struct.List* %tl, %struct.List** %3
	%4 = alloca %struct.Cons*
	%5 = alloca i32
	; assignement
	%6 = alloca i32
	%7 = load i32* %2
	store i32 %7, i32* %6
	%8 = load i32* %6
;field
	%9 = load %struct.Cons** %1
	%10 = getelementptr inbounds %struct.Cons* %9, i32 0, i32 2
	store i32 %8, i32* %10
	store i32 %8, i32* %5
	%11 = alloca %struct.List*
	; assignement
	%12 = alloca %struct.List*
	%13 = load %struct.List** %3
	store %struct.List* %13, %struct.List** %12
	%14 = load %struct.List** %12
;field
	%15 = load %struct.Cons** %1
	%16 = getelementptr inbounds %struct.Cons* %15, i32 0, i32 1
	store %struct.List* %14, %struct.List** %16
	store %struct.List* %14, %struct.List** %11
	%17 = alloca %struct.Cons*
	%18 = load %struct.Cons** %1
	store %struct.Cons* %18, %struct.Cons** %17
	%19 = load %struct.Cons** %17
	store %struct.Cons* %19, %struct.Cons** %4
	%20 = load %struct.Cons** %4
	ret %struct.Cons* %20
}

define i32 @Cons_head(%struct.Cons* %self) #0 {
	%1 = alloca %struct.Cons*
	store %struct.Cons* %self, %struct.Cons** %1
	%2 = alloca i32
	%3 = alloca i32
	%4 = load %struct.Cons** %1
	%5 = getelementptr inbounds %struct.Cons* %4, i32 0, i32 2
	%6 = load i32* %5
	store i32 %6, i32* %3
	%7 = load i32* %3
	store i32 %7, i32* %2
	%8 = load i32* %2
	ret i32 %8
}

define i1 @Cons_isNil(%struct.Cons* %self) #0 {
	%1 = alloca %struct.Cons*
	store %struct.Cons* %self, %struct.Cons** %1
	%2 = alloca i1
	%3 = alloca i1
	store i1 false, i1* %3
	%4 = load i1* %3
	store i1 %4, i1* %2
	%5 = load i1* %2
	ret i1 %5
}

define i32 @Cons_length(%struct.Cons* %self) #0 {
	%1 = alloca %struct.Cons*
	store %struct.Cons* %self, %struct.Cons** %1
	%2 = alloca i32
	%3 = alloca i32
	; condition
	%4 = alloca i1
	; unary
	%5 = alloca i1
	; binary operation
	%6 = alloca i8*
	store i8* getelementptr inbounds ([2 x i8]* @.str0, i32 0, i32 0), i8** %6
	%7 = alloca i8*
	store i8* getelementptr inbounds ([2 x i8]* @.str1, i32 0, i32 0), i8** %7
	%8 = load i8** %6
	%9 = load i8** %7
	%10 = call i32 @strcmp(i8* %8, i8* %9)
	%11 = icmp eq i32 0, %10
	store i1 %11, i1* %5
	%12 = load i1* %5
	%13 = add i1 %12, 1
	store i1 %13, i1* %4
	%14 = load i1* %4
	br i1 %14, label %then_14, label %else_14
	
then_14:
		%15 = alloca i32
		; binary operation
		%16 = alloca i32
		store i32 1, i32* %16
		%17 = alloca i32
		%18 = alloca %struct.List*
		%19 = load %struct.Cons** %1
		%20 = getelementptr inbounds %struct.Cons* %19, i32 0, i32 1
		%21 = load %struct.List** %20
		store %struct.List* %21, %struct.List** %18
; call
		%22 = load %struct.List** %18
		%23 = getelementptr inbounds %struct.List* %22, i32 0, i32 0
		%24 = load %struct.ListVTable** %23
		%25 = getelementptr inbounds %struct.ListVTable* %24, i32 0, i32 0
		%26 = load i32 (%struct.List*)** %25
		%27 = call i32 %26(%struct.List* %22)
		store i32 %27, i32* %17
		%28 = load i32* %16
		%29 = load i32* %17
		%30 = add nuw i32 %28, %29
		store i32 %30, i32* %15
		%31 = load i32* %15
		store i32 %31, i32* %3
		br label %end_14
	
else_14:
		%32 = alloca i32
		store i32 1, i32* %32
		%33 = load i32* %32
		store i32 %33, i32* %3
		br label %end_14
	
end_14:
	%34 = load i32* %3
	store i32 %34, i32* %2
	%35 = load i32* %2
	ret i32 %35
}

define i32 @Main_main(%struct.Main* %self) #0 {
	%1 = alloca %struct.Main*
	store %struct.Main* %self, %struct.Main** %1
	%2 = alloca i32
	%3 = alloca i32
	; let
	%4 = alloca %struct.List*
	store %struct.List* null, %struct.List** %4
	%5 = alloca i32
	%6 = alloca %struct.IO*
	%7 = alloca i8*
	store i8* getelementptr inbounds ([17 x i8]* @.str2, i32 0, i32 0), i8** %7
; call
	%8 = load %struct.Main** %1
	%9 = getelementptr inbounds %struct.Main* %8, i32 0, i32 0
	%10 = load %struct.MainVTable** %9
	%11 = getelementptr inbounds %struct.MainVTable* %10, i32 0, i32 1
	%12 = load %struct.IO* (%struct.Main*, i8*)** %11
	%13 = load i8** %7
	%14 = call %struct.IO* %12(%struct.Main* %8, i8* %13)
	store %struct.IO* %14, %struct.IO** %6
	%15 = alloca i1
	; binary operation
	%16 = alloca i32
	store i32 1, i32* %16
	%17 = alloca i32
	store i32 2, i32* %17
	%18 = load i32* %16
	%19 = load i32* %17
	%20 = icmp slt i32 %18, %19
	store i1 %20, i1* %15
	%21 = alloca %struct.List*
	; assignement
	%22 = alloca %struct.Cons*
	; new
	%23 = call %struct.Cons* @ConsNew()
	store %struct.Cons* %23, %struct.Cons** %22
	%24 = load %struct.Cons** %22
	%25 = bitcast %struct.Cons* %24 to %struct.List*
	store %struct.List* %25, %struct.List** %4
	store %struct.List* %25, %struct.List** %21
	%26 = alloca i1
; call
	%27 = load %struct.Main** %1
	%28 = getelementptr inbounds %struct.Main* %27, i32 0, i32 0
	%29 = load %struct.MainVTable** %28
	%30 = getelementptr inbounds %struct.MainVTable* %29, i32 0, i32 6
	%31 = load i1 (%struct.Main*)** %30
	%32 = call i1 %31(%struct.Main* %27)
	store i1 %32, i1* %26
	%33 = alloca %struct.IO*
	%34 = alloca i32
	%35 = alloca %struct.List*
	%36 = load %struct.List** %4
	store %struct.List* %36, %struct.List** %35
; call
	%37 = load %struct.List** %35
	%38 = getelementptr inbounds %struct.List* %37, i32 0, i32 0
	%39 = load %struct.ListVTable** %38
	%40 = getelementptr inbounds %struct.ListVTable* %39, i32 0, i32 0
	%41 = load i32 (%struct.List*)** %40
	%42 = call i32 %41(%struct.List* %37)
	store i32 %42, i32* %34
; call
	%43 = load %struct.Main** %1
	%44 = getelementptr inbounds %struct.Main* %43, i32 0, i32 0
	%45 = load %struct.MainVTable** %44
	%46 = getelementptr inbounds %struct.MainVTable* %45, i32 0, i32 3
	%47 = load %struct.IO* (%struct.Main*, i32)** %46
	%48 = load i32* %34
	%49 = call %struct.IO* %47(%struct.Main* %43, i32 %48)
	store %struct.IO* %49, %struct.IO** %33
	%50 = alloca %struct.IO*
	%51 = alloca i8*
	store i8* getelementptr inbounds ([2 x i8]* @.str3, i32 0, i32 0), i8** %51
; call
	%52 = load %struct.Main** %1
	%53 = getelementptr inbounds %struct.Main* %52, i32 0, i32 0
	%54 = load %struct.MainVTable** %53
	%55 = getelementptr inbounds %struct.MainVTable* %54, i32 0, i32 1
	%56 = load %struct.IO* (%struct.Main*, i8*)** %55
	%57 = load i8** %51
	%58 = call %struct.IO* %56(%struct.Main* %52, i8* %57)
	store %struct.IO* %58, %struct.IO** %50
	%59 = alloca i1
	; let
	%60 = alloca i32
	%61 = alloca i32
	store i32 10, i32* %61
	%62 = load i32* %61
	store i32 %62, i32* %60
	%63 = alloca i1
	%64 = alloca i1
	%65 = alloca i32
	; while
	br label %loop_6

loop_6:
	%66 = alloca i1
	; binary operation
	%67 = alloca i32
	store i32 0, i32* %67
	%68 = alloca i32
	%69 = load i32* %60
	store i32 %69, i32* %68
	%70 = load i32* %67
	%71 = load i32* %68
	%72 = icmp slt i32 %70, %71
	store i1 %72, i1* %66
	%73 = load i1* %66
	br i1 %73, label %do_6, label %end_6

do_6:
	%74 = alloca %struct.IO*
	%75 = alloca i32
	%76 = load i32* %60
	store i32 %76, i32* %75
; call
	%77 = load %struct.Main** %1
	%78 = getelementptr inbounds %struct.Main* %77, i32 0, i32 0
	%79 = load %struct.MainVTable** %78
	%80 = getelementptr inbounds %struct.MainVTable* %79, i32 0, i32 3
	%81 = load %struct.IO* (%struct.Main*, i32)** %80
	%82 = load i32* %75
	%83 = call %struct.IO* %81(%struct.Main* %77, i32 %82)
	store %struct.IO* %83, %struct.IO** %74
	%84 = alloca %struct.IO*
	%85 = alloca i8*
	store i8* getelementptr inbounds ([2 x i8]* @.str4, i32 0, i32 0), i8** %85
; call
	%86 = load %struct.Main** %1
	%87 = getelementptr inbounds %struct.Main* %86, i32 0, i32 0
	%88 = load %struct.MainVTable** %87
	%89 = getelementptr inbounds %struct.MainVTable* %88, i32 0, i32 1
	%90 = load %struct.IO* (%struct.Main*, i8*)** %89
	%91 = load i8** %85
	%92 = call %struct.IO* %90(%struct.Main* %86, i8* %91)
	store %struct.IO* %92, %struct.IO** %84
	%93 = alloca i32
	; assignement
	%94 = alloca i32
	; binary operation
	%95 = alloca i32
	%96 = load i32* %60
	store i32 %96, i32* %95
	%97 = alloca i32
	store i32 1, i32* %97
	%98 = load i32* %95
	%99 = load i32* %97
	%100 = sub i32 %98, %99
	store i32 %100, i32* %94
	%101 = load i32* %94
	store i32 %101, i32* %60
	store i32 %101, i32* %93
	%102 = load i32* %93
	store i32 %102, i32* %65
	br label %loop_6

end_6:
	%103 = load i1* %64
	store i1 %103, i1* %63
	%104 = load i1* %63
	store i1 %104, i1* %59
	%105 = alloca %struct.IO*
	%106 = alloca i8*
	store i8* getelementptr inbounds ([2 x i8]* @.str5, i32 0, i32 0), i8** %106
; call
	%107 = load %struct.Main** %1
	%108 = getelementptr inbounds %struct.Main* %107, i32 0, i32 0
	%109 = load %struct.MainVTable** %108
	%110 = getelementptr inbounds %struct.MainVTable* %109, i32 0, i32 1
	%111 = load %struct.IO* (%struct.Main*, i8*)** %110
	%112 = load i8** %106
	%113 = call %struct.IO* %111(%struct.Main* %107, i8* %112)
	store %struct.IO* %113, %struct.IO** %105
	%114 = alloca i8*
	store i8* getelementptr inbounds ([7 x i8]* @.str6, i32 0, i32 0), i8** %114
	%115 = alloca %struct.Cons*
	; new
	%116 = call %struct.Cons* @ConsNew()
	store %struct.Cons* %116, %struct.Cons** %115
	%117 = alloca i32
	store i32 0, i32* %117
	%118 = load i32* %117
	store i32 %118, i32* %5
	%119 = load i32* %5
	store i32 %119, i32* %3
	%120 = load i32* %3
	store i32 %120, i32* %2
	%121 = load i32* %2
	ret i32 %121
}

define i1 @Main_test(%struct.Main* %self) #0 {
	%1 = alloca %struct.Main*
	store %struct.Main* %self, %struct.Main** %1
	%2 = alloca i1
	%3 = alloca i1
	store i1 0, i1* %3
	%4 = load i1* %3
	store i1 %4, i1* %2
	%5 = load i1* %2
	ret i1 %5
}

define i32 @main(){
	%1 = call %struct.Main* @MainNew()
	%2 = getelementptr inbounds %struct.Main* %1, i32 0, i32 0
	%3 = load %struct.MainVTable** %2
	%4 = getelementptr inbounds %struct.MainVTable* %3, i32 0, i32 7
	%5 = load i32 (%struct.Main*)** %4
	%6 = call i32 %5(%struct.Main* %1)
	ret i32 %6
}
